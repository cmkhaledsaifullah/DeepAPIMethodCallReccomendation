CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[sum] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[sum] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  LEX[end.getTimeInMillis] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.util.Vector,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.FileInputStream]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  TYPE[BufferedImage] PARENTHESESSTART LEX[Math.max] PARENTHESESSTART
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.util.SortedSet,size,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.io.FileOutputStream,close,0,void] +++$+++  LEX[printStream.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  OP[assign] EOL CURLYEND RETURN
CALL[java.io.File,listFiles,0,java.io.File[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.io.File] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.Properties,keys,0,java.util.Enumeration<K>] +++$+++  PARENTHESESEND CURLYSTART VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[ternaryTrue] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Hashtable] PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Hashtable] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[encounter] EOL WHILE PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[encounter] EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.SortedSet,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.SortedSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.SortedSet,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,size,0,int] +++$+++  LEX[StatFunctions.getTop] PARENTHESESSTART VAR[java.util.Hashtable] COMMA
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.SortedSet,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[java.util.Hashtable,get,1,V] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART LEX[Debug.println] PARENTHESESSTART OP[sum]
CALL[java.io.InputStream,close,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.io.File,setLastModified,1,boolean] PARA[CALL[java.io.File,lastModified]] +++$+++  LEX[out.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,size,0,int] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Hashtable,size,0,int] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Hashtable,put,2,V] PARA[CALL[org.hnrw.report.Report_Diagnosis.Diagnosis,getEncounterUid]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.event.KeyEvent,consume,0,void] +++$+++  LEX[KeyEvent] VAR[java.awt.event.KeyEvent] PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.util.Map.Entry,getValue]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  LEX[mdate] OP[sum] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[com.sadinoff.genj.console.Console.Action,getArgName]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[com.sadinoff.genj.console.Console.Action,getArgName]] +++$+++  EOL CASE VAR[com.sadinoff.genj.console.Console.Action.ArgType] OP[ternaryFalse]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  EOL DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.util.Collection,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Collection,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[vectorB.getY] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[vectorA.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[d.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  LEX[aStart.getX] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  EOL DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[bEnd.getX] PARENTHESESSTART PARENTHESESEND OP[multiply]
CALL[java.awt.Rectangle,getSize,0,java.awt.Dimension] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.CharArrayWriter,toString,0,java.lang.String] +++$+++  PARENTHESESSTART NEW TYPE[JTextArea] PARENTHESESSTART
CALL[java.awt.geom.Rectangle2D,getWidth,0,double] +++$+++  LEX[canvas.getWidth] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.awt.geom.Ellipse2D,getPathIterator,1,java.awt.geom.PathIterator] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  PARENTHESESEND EOL LEX[shapeMarrs.append] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  COMMA PARENTHESESSTART LEX[float] PARENTHESESEND
CALL[java.util.List,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.ComboBoxEditor,getItem,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JComponent,addMouseListener,1,void] PARA[VAR[java.awt.event.MouseListener]] +++$+++  LEX[MouseListener] VAR[java.awt.event.MouseListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,addMouseMotionListener,1,void] PARA[VAR[java.awt.event.MouseMotionListener]] +++$+++  LEX[MouseMotionListener] VAR[java.awt.event.MouseMotionListener] PARENTHESESEND CURLYSTART
CALL[java.awt.Rectangle,getWidth,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Graphics2D,fill,1,void] PARA[VAR[java.awt.Shape]] +++$+++  LEX[yalign] PARENTHESESEND CURLYSTART INT
CALL[java.awt.Graphics2D,getClip,0,java.awt.Shape] +++$+++ 
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[lessThan] PARENTHESESEND VAR[INT] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,read,0,int] +++$+++  OP[sum] OP[sum] EOL RETURN
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  TRY CURLYSTART LEX[result.add] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Resources] PARENTHESESEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.geom.Dimension2D,getHeight,0,double] +++$+++  INT PARENTHESESEND LEX[Math.ceil] PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JSpinner,addChangeListener,1,void] PARA[VAR[javax.swing.JSpinner.NumberEditor]] +++$+++  PARENTHESESSTART VAR[javax.swing.JSpinner.NumberEditor] PARENTHESESEND EOL
CALL[java.util.List,isEmpty,0,boolean] +++$+++  OP[assign] LEX[prop] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  PARENTHESESEND OP[multiply] VAR[INT] COMMA
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Property] PARENTHESESEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Collection,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[TagPath] ARRAYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[entity] PARENTHESESEND CURLYSTART
CALL[java.net.Socket,getRemoteSocketAddress,0,java.net.SocketAddress] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.regex.Matcher,start,0,int] +++$+++  LEX[string.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[CALL[java.util.regex.Matcher,start]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[sub] PARENTHESESEND EOL
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.awt.Graphics2D,drawRenderedImage,2,void] PARA[VAR[java.awt.image.BufferedImage]] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  PARENTHESESSTART DOUBLE PARENTHESESEND VAR[INT]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  NEW TYPE[AssertionError] PARENTHESESSTART COMMA
CALL[java.util.prefs.Preferences,get,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.io.File,toPath,0,java.nio.file.Path] +++$+++  TYPE[Entry] PARENTHESESSTART LEX[ul] COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Entry] VAR[net.sf.jabref.collab.FileUpdateMonitor.Entry] OP[assign]
CALL[javax.swing.JRadioButton,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART VAR[java.awt.event.ActionListener] PARENTHESESEND EOL
CALL[javax.swing.JTable,getRowHeight,0,int] +++$+++  LEX[table.setRowHeight] PARENTHESESSTART LEX[Math.max] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.awt.Container,setLayout,1,void] PARA[VAR[java.awt.GridBagLayout]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  LEX[inputMenu.addSeparator] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenu]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.awt.event.MouseEvent,getY,0,int] +++$+++  LEX[e.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JList,setSelectionMode,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.JScrollPane,getViewport,0,javax.swing.JViewport] +++$+++  CURLYEND TYPE[JViewport] VAR[javax.swing.JViewport] OP[assign]
CALL[javax.swing.JList,getCellBounds,2,java.awt.Rectangle] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL TYPE[Rectangle] VAR[java.awt.Rectangle] OP[assign]
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.DefaultListModel,get,1,E] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.datatransfer.DataFlavor,getMimeType,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.text.JTextComponent,isFocusOwner,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.awt.event.MouseEvent,getY,0,int] +++$+++  LEX[e.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[not] OP[assign]
CALL[javax.swing.JTextField,getFont,0,java.awt.Font] +++$+++  CURLYSTART TYPE[Font] VAR[java.awt.Font] OP[assign]
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.text.JTextComponent,getText,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART OP[not]
CALL[javax.swing.text.JTextComponent,getWidth,0,int] +++$+++  PARENTHESESEND EOL LEX[popup.setPopupSize] PARENTHESESSTART
CALL[javax.swing.text.JTextComponent,hasFocus,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[javax.swing.text.JTextComponent,requestFocusInWindow,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.text.JTextComponent,setCaretPosition,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTextArea,setFocusable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isEnabled,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Color,getGreen,0,int] +++$+++  OP[sum] LEX[two.getRed] PARENTHESESSTART PARENTHESESEND
CALL[java.util.concurrent.ConcurrentLinkedQueue,remove,1,boolean] PARA[VAR[java.lang.Thread]] +++$+++  LEX[thread.join] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Timer,schedule,2,void] PARA[VAR[java.util.TimerTask]] PARA[VAR[LONG]] +++$+++  LONG VAR[LONG] PARENTHESESEND CURLYSTART
CALL[java.net.URI,getHost,0,java.lang.String] +++$+++  LEX[RESOLVER.getScheme] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] OP[sum] OP[assign] PARENTHESESSTART
CALL[java.lang.Boolean,equals,1,boolean] PARA[FIELD[net.sf.jabref.logic.net.ProxyPreferences]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.concurrent.ExecutorService,submit,1,java.util.concurrent.Future<? extends java.lang.Object>] PARA[VAR[java.lang.Runnable]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Optional,isPresent,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  TYPE[ArrayList] OP[lessThan] OP[greaterThan] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.Character,charValue,0,char] +++$+++  PARENTHESESEND CURLYSTART LEX[chars.append] PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isLetterOrDigit] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.Optional,isPresent,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.ByteArrayOutputStream,toString,0,java.lang.String] +++$+++  LEX[xmpPreferences] PARENTHESESEND EOL RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  LEX[setDefaultProperties] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  COMMA LEX[Boolean.FALSE] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.util.regex.Matcher,appendReplacement,2,java.util.regex.Matcher] PARA[VAR[java.lang.StringBuffer]] PARA[CALL[java.lang.String,substring]] +++$+++  LEX[mcr.group] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[lessThan] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL RETURN VAR[INT] ARRAYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN LEX[Optional.ofNullable] PARENTHESESSTART
CALL[java.util.List,indexOf,1,int] PARA[VAR[net.sf.jabref.model.groups.TreeNode.T]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics,getFontMetrics,0,java.awt.FontMetrics] +++$+++  CURLYSTART TYPE[FontMetrics] VAR[java.awt.FontMetrics] OP[assign]
CALL[java.awt.FontMetrics,getAscent,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.String] COMMA COMMA
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] VAR[javax.swing.JDialog] PARENTHESESEND CURLYSTART
CALL[java.util.HashSet,remove,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  LEX[ChangeListener] VAR[javax.swing.event.ChangeListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableColumnModel,getColumnIndexAtX,1,int] PARA[CALL[java.awt.event.MouseEvent,getX]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[CALL[java.lang.String,length]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[BeanInstance] PARENTHESESEND
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[BeanInstance] PARENTHESESEND
CALL[javax.swing.JCheckBox,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[Experiment] LEX[exp] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComboBox,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JButton,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Classifier] PARENTHESESEND
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[javax.swing.JList,getSelectedIndex,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Graphics,getFontMetrics,1,java.awt.FontMetrics] PARA[VAR[java.awt.Font]] +++$+++  PARENTHESESEND EOL VAR[java.awt.FontMetrics] OP[assign]
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[p2.searchPoints] PARENTHESESSTART
CALL[javax.swing.JPanel,repaint,0,void] +++$+++  VAR[INT] OP[assign] VAR[INT] EOL
CALL[weka.gui.boundaryvisualizer.BoundaryPanel.PlotPanel,createImage,2,java.awt.Image] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.awt.Image] OP[assign]
CALL[javax.swing.JTextField,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,clone,0,java.lang.Object] +++$+++  TYPE[String] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.HashSet,iterator,0,java.util.Iterator<E>] +++$+++  LEX[l] EOL VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.StreamTokenizer,whitespaceChars,2,void] PARA[LIT[Integer]] PARA[LIT[Character]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,wordChars,2,void] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  LEX[m_st.resetSyntax] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[m_lines.addElement] PARENTHESESSTART
CALL[java.util.Vector,addElement,1,void] PARA[CALL[java.lang.String,substring]] +++$+++  OP[sum] EOL CURLYEND CURLYEND
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Object,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  VAR[java.io.IOException] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[javax.swing.DefaultListModel,size,0,int] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[javax.swing.DefaultListModel,setElementAt,2,void] PARA[VAR[java.lang.Object]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JRadioButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,clipRect,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawPolygon,3,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawRenderableImage,2,void] PARA[VAR[java.awt.image.renderable.RenderableImage]] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  LEX[AffineTransform] VAR[java.awt.geom.AffineTransform] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,fill,1,void] PARA[VAR[java.awt.Shape]] +++$+++  LEX[Shape] VAR[java.awt.Shape] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,getClipBounds,0,java.awt.Rectangle] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[KeepClassSpecification] PARENTHESESEND
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[optimizationsDialog.setFilter] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[KeepClassSpecification] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL LEX[classSpecification.className] OP[assign]
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Stack,push,1,E] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataOutput,writeInt,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.DataOutput,writeUTF,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataInput,readInt,0,int] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.DataInput,readUnsignedShort,0,int] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.DataInput,skipBytes,1,int] PARA[VAR[INT]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART VAR[INT] OP[sum] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.event.MouseEvent,getPoint,0,java.awt.Point] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[myTable.columnAtPoint] PARENTHESESSTART
CALL[javax.swing.JTable,getSelectedColumn,0,int] +++$+++  PARENTHESESEND PARENTHESESEND OP[assign] OP[assign]
CALL[javax.swing.text.JTextComponent,selectAll,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.text.JTextComponent,removeFocusListener,1,void] PARA[VAR[java.awt.event.FocusListener]] +++$+++  LEX[DocumentEvent] LEX[arg0] PARENTHESESEND CURLYSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Hashtable,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.AbstractButton,isEnabled,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  LEX[ourLogger.log] PARENTHESESSTART LEX[Level.WARNING] COMMA
CALL[java.util.Set,contains,1,boolean] PARA[VAR[net.sourceforge.ganttproject.task.algorithm.RetainRootsAlgorithm.T]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Graphics2D,drawString,3,void] PARA[VAR[java.lang.String]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART LEX[Color.GRAY] PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,addChoosableFileFilter,1,void] PARA[FIELD[ImporterFactory]] +++$+++  PARENTHESESSTART LEX[ImporterFactory.ganFilter] PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,addChoosableFileFilter,1,void] PARA[FIELD[ImporterFactory]] +++$+++  PARENTHESESSTART LEX[ImporterFactory.mppFilter] PARENTHESESEND EOL
CALL[java.awt.event.KeyEvent,getKeyCode,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTable,getSelectedRows,0,int[]] +++$+++  ARRAYSTART ARRAYEND VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  LEX[myValues.size] PARENTHESESSTART PARENTHESESEND OP[ternaryTrue]
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sourceforge.ganttproject.gui.NotificationChannel.Listener]] +++$+++  LEX[Listener] VAR[net.sourceforge.ganttproject.gui.NotificationChannel.Listener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,setText,1,void] PARA[CALL[java.io.File,getAbsolutePath]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.atomic.AtomicReference,set,1,void] PARA[VAR[java.lang.Runnable]] +++$+++  LEX[Runnable] VAR[java.lang.Runnable] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.Box,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  LEX[Box.createVerticalBox] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Box,add,1,java.awt.Component] PARA[CALL[null,createVerticalStrut]] +++$+++  PARENTHESESSTART VAR[javax.swing.JPanel] PARENTHESESEND EOL
CALL[java.awt.Window,repaint,0,void] +++$+++  LEX[windowAncestor.pack] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Runnable,run,0,void] +++$+++  TYPE[JFXPanel] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPanel,remove,1,void] PARA[VAR[javax.swing.JComponent]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.Box,add,1,java.awt.Component] PARA[VAR[java.awt.Component]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.awt.image.RenderedImage,getWidth,0,int] +++$+++  OP[assign] NEW TYPE[BufferedImage] PARENTHESESSTART
CALL[javax.swing.TransferHandler.TransferSupport,isDataFlavorSupported,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.GregorianCalendar,getTime,0,java.util.Date] +++$+++  VAR[java.lang.StringBuffer] OP[assign] LEX[dateFormat.format] PARENTHESESSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Listener] VAR[net.sourceforge.ganttproject.language.GanttLanguage.Listener] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  RETURN TYPE[DURATION_FROM_START_AND_DURATION] EOL CURLYEND
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[biz.ganttproject.core.chart.canvas.Canvas.Line]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND EOL
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Line] VAR[biz.ganttproject.core.chart.canvas.Canvas.Text] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[biz.ganttproject.core.chart.canvas.Canvas.Shape]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.Date,after,1,boolean] PARA[VAR[java.util.Date]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Date,before,1,boolean] PARA[VAR[java.util.Date]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.Color,getRGB,0,int] +++$+++  LEX[foreground.getRGB] PARENTHESESSTART PARENTHESESEND OP[ternaryFalse]
CALL[java.awt.Graphics2D,drawLine,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  OP[lessThan] TYPE[Composition] OP[greaterThan] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[biz.ganttproject.core.time.GanttCalendar,set,2,void] PARA[FIELD[Calendar]] PARA[CALL[null,parseInt]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[biz.ganttproject.core.option.FontSpec.Size,toString,0,java.lang.String] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND COMMA
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[Font] OP[greaterThan] LEX[supplier] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[string.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[string.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Collection,clear,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART LEX[results.addAll] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[greaterThan] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,getInterfaces,0,java.lang.Class<? extends java.lang.Object>[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Class] OP[assign]
CALL[java.util.Map,get,1,V] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  PARENTHESESEND CURLYSTART LEX[classes.add] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.Object,notifyAll,0,void] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[lessThan] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,lastIndexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL LEX[buf.append] PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.Action,putValue,2,void] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.Action,putValue,2,void] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.Frame,getSize,0,java.awt.Dimension] +++$+++  EOL TYPE[Dimension] VAR[java.awt.Dimension] OP[assign]
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.tree.TreeModel]] +++$+++  LEX[TreeModel] VAR[javax.swing.tree.TreeModel] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART LEX[menuItem.setMnemonic] PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[CALL[null,valueOf]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.awt.Point,getY,0,double] +++$+++  VAR[DOUBLE] OP[assign] LEX[Math.max] PARENTHESESSTART
CALL[java.awt.Point,getY,0,double] +++$+++  PARENTHESESEND OP[sum] VAR[INT] COMMA
CALL[java.util.Set,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  ELSE CURLYSTART WHILE PARENTHESESSTART
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Integer]] +++$+++  LEX[true] EOL CURLYEND CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Hashtable,clear,0,void] +++$+++  LEX[clearLocalVariableDeclarations] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Collection,remove,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[org.argouml.language.java.reveng.classfile.ParserUtils.Token,getValue]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JComboBox,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[CALL[null,valueOf]] +++$+++  LEX[float] VAR[FLOAT] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,clear,0,void] +++$+++  PARENTHESESSTART VAR[java.util.Properties] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.awt.Graphics,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  OP[sub] VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  COMMA PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Comparator,compare,2,int] PARA[VAR[jmemorize.util.ReverseOrder.T]] PARA[VAR[jmemorize.util.ReverseOrder.T]] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[multiply]
CALL[java.util.Locale,getCountry,0,java.lang.String] +++$+++  LEX[PREFS.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.prefs.Preferences,getBoolean,2,boolean] PARA[VAR[java.lang.String]] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,listFiles,0,java.io.File[]] +++$+++  OP[greaterThan] PARENTHESESSTART LEX[Arrays.asList] PARENTHESESSTART
CALL[java.io.File,delete,0,boolean] +++$+++  OP[ternaryFalse] VAR[java.util.Set] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[jmemorize.core.learn.LearnHistory.SessionSummary]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[javax.swing.JTextPane,addCaretListener,1,void] PARA[VAR[javax.swing.event.CaretListener]] +++$+++  LEX[CaretListener] VAR[javax.swing.event.CaretListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,doClick,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.event.MouseEvent] PARENTHESESEND PARENTHESESEND
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[m_categoryOrderRandomButton.setEnabled] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[m_categoryOrderFixedButton.setEnabled] PARENTHESESSTART
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Locale,getDisplayLanguage,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Locale,getDisplayLanguage,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND LEX[image.getWidth] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[srcPt.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.image.ColorModel,isAlphaPremultiplied,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND COMMA
CALL[java.lang.IllegalStateException,initCause,1,java.lang.Throwable] PARA[VAR[java.lang.Exception]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBorder,1,void] PARA[VAR[javax.swing.border.Border]] +++$+++  TYPE[BorderLayout] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JMenuItem,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[javax.swing.InputMap,put,2,void] PARA[VAR[javax.swing.KeyStroke]] PARA[LIT[Stirng]] +++$+++  OP[sum] VAR[java.lang.Object] PARENTHESESEND EOL
CALL[javax.swing.JDialog,pack,0,void] +++$+++  OP[assign] LEX[ItemEvent.SELECTED] PARENTHESESEND EOL
CALL[javax.swing.JDialog,isVisible,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.beans.PropertyChangeEvent,getSource,0,java.lang.Object] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.Integer,intValue,0,int] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  ARRAYEND CURLYSTART VAR[java.lang.String] COMMA
CALL[javax.swing.JLabel,setText,1,void] PARA[LIT[Stirng]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  OP[assign] NEW TYPE[ArrayList] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL EOL RETURN
CALL[java.io.InputStream,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[ImageTools]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[ImageTools]] +++$+++  LEX[ImageTools.SCALE_ACTUAL] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.color.ColorSpace,getType,0,int] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.awt.color.ColorSpace,getNumComponents,0,int] +++$+++  VAR[INT] ARRAYEND EOL ASSERT
CALL[java.awt.image.ColorModel,getComponentSize,1,int] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART OP[lessThan] OP[lessThan]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,setDialogTitle,1,void] PARA[VAR[java.lang.String]] +++$+++  COMMA LEX[PropertyConstants.OPEN_DIALOG_WINDOW] PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,setSelectedFile,1,void] PARA[VAR[java.io.File]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.event.ActionListener,actionPerformed,1,void] PARA[VAR[java.awt.event.ActionEvent]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[CALL[javax.swing.JProgressBar,getMaximum]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,getSize,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.event.ItemEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] NULL EOL ASSERT
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.awt.event.ActionEvent,getActionCommand,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ChangeListener] PARENTHESESEND
CALL[java.io.File,isDirectory,0,boolean] +++$+++  VAR[BOOLEAN] EOL IF PARENTHESESSTART
CALL[java.util.Map,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.ListSelectionModel,setSelectionInterval,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.ListSelectionModel,isSelectionEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.event.ActionEvent,getActionCommand,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JToggleButton,isSelected,0,boolean] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JFormattedTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.io.InputStream,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[listener.find] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[findText.getText] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[caseSensitiveCheckBox.isSelected] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JCheckBoxMenuItem,getState,0,boolean] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JMenuItem,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.awt.CheckboxMenuItem,setActionCommand,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[java.io.FilterInputStream,available,0,int] +++$+++  OP[assign] NEW TYPE[ByteArrayOutputStream] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] COMMA
CALL[java.io.FilterInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.CheckboxMenuItem,getState,0,boolean] +++$+++  CURLYSTART VAR[INT] OP[assign] PARENTHESESSTART
CALL[java.util.Calendar,setTimeInMillis,1,void] PARA[VAR[LONG]] +++$+++  LEX[DateTime.calendarInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] ARRAYSTART ARRAYEND OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.LinkedList,addAll,2,boolean] PARA[VAR[INT]] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,listIterator,0,java.util.ListIterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode,getUserObject,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[HasDependencies] PARENTHESESEND
CALL[java.io.ObjectInputStream,readDouble,0,double] +++$+++  PARENTHESESEND EOL LEX[t.setPercentComplete] PARENTHESESSTART
CALL[java.util.LinkedList,listIterator,0,java.util.ListIterator<E>] +++$+++  EOL TYPE[ListIterator] VAR[java.util.ListIterator] OP[assign]
CALL[java.util.Date,getTimezoneOffset,0,int] +++$+++  PARENTHESESSTART LEX[GregorianCalendar.MINUTE] PARENTHESESEND OP[sub]
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  CURLYSTART LEX[log.debug] PARENTHESESSTART OP[sum]
CALL[java.io.ObjectOutputStream,writeDouble,1,void] PARA[VAR[DOUBLE]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.ListIterator,hasNext,0,boolean] +++$+++  OP[sub] VAR[INT] PARENTHESESEND EOL
CALL[java.util.Vector,add,1,boolean] PARA[VAR[com.projity.exchange.ResourceMappingForm.MergeField]] +++$+++  LEX[MergeField] VAR[com.projity.exchange.ResourceMappingForm.MergeField] PARENTHESESEND CURLYSTART
CALL[java.util.regex.Matcher,end,0,int] +++$+++  LEX[pos.getIndex] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND LEX[sorters.add] PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND LEX[groupers.add] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] EOL ELSE RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.io.StringWriter] PARENTHESESEND EOL
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[BOOLEAN]] +++$+++  LEX[pw.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[m_criteria] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  CURLYEND CASE OP[ternaryFalse] CURLYSTART
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND EOL VAR[java.util.Date] OP[assign]
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND EOL VAR[java.util.Date] OP[assign]
CALL[java.lang.Integer,compareTo,1,int] PARA[VAR[java.lang.Integer]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.PrintWriter,println,1,void] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] OP[assign] EOL CURLYEND
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[gi] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.math.BigInteger,intValue,0,int] +++$+++  NULL OP[ternaryFalse] LEX[Priority.getInstance] PARENTHESESSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  CURLYSTART TYPE[DateFormat] VAR[java.text.DateFormat] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.text.DecimalFormat,format]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.ArrayList,get,1,E] PARA[LIT[Integer]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  TYPE[DateRange] PARENTHESESSTART VAR[java.util.Date] COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[CHAR] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.datatransfer.DataFlavor,clone,0,java.lang.Object] +++$+++  TYPE[DataFlavor] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Font,deriveFont,1,java.awt.Font] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.awt.Font] OP[assign]
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[javax.swing.JComponent,repaint,1,void] PARA[VAR[java.awt.Rectangle]] +++$+++  LEX[node] OP[assign] NULL EOL
CALL[javax.swing.JViewport,getViewPosition,0,java.awt.Point] +++$+++  EOL TYPE[Point] VAR[java.awt.Point] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Action] PARENTHESESEND
CALL[javax.swing.Timer,setInitialDelay,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[tip] OP[assign] NULL EOL
CALL[java.awt.LayoutManager,removeLayoutComponent,1,void] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[temp.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.awt.GraphicsDevice,getDefaultConfiguration,0,java.awt.GraphicsConfiguration] +++$+++  EOL TYPE[GraphicsConfiguration] VAR[java.awt.GraphicsConfiguration] OP[assign]
CALL[java.awt.Color,getGreen,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  VAR[java.awt.image.ColorModel] COMMA LEX[destCM.createCompatibleWritableRaster] PARENTHESESSTART
CALL[java.io.FileOutputStream,close,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.StringBuffer,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.text.DecimalFormat,format]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.ByteArrayOutputStream,close,0,void] +++$+++  LEX[out.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[assign] LEX[xk.substring] PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  NULL EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[what.substring] PARENTHESESSTART COMMA
CALL[java.util.Hashtable,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.net.Socket,close,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  STRING LEX[line] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  STRING LEX[line] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  LEX[out.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[javax.swing.table.TableColumn,getModelIndex,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JFileChooser,getSelectedFile,0,java.io.File] +++$+++  CURLYSTART TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JTextField]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextField] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JComboBox,setEditable,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.Set,clear,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.Set,clear,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.FontMetrics,stringWidth,1,int] PARA[VAR[java.lang.String]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[cp.substring] PARENTHESESSTART COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[out.append] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[h.substring] PARENTHESESSTART COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  NULL EOL ELSE RETURN
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[javax.swing.JComponent,setToolTipText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JPanel]] +++$+++  PARENTHESESSTART VAR[javax.swing.JComponent] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JComponent]] +++$+++  LEX[FlowLayout.LEFT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Class,newInstance,0,T] +++$+++  OP[assign] PARENTHESESSTART TYPE[Directive] PARENTHESESEND
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  RETURN NEW TYPE[StringTermImpl] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.util.Collection,size,0,int] +++$+++  OP[lessThan] TYPE[Vec] OP[greaterThan] PARENTHESESSTART
CALL[java.util.Collection,size,0,int] +++$+++  RETURN NEW TYPE[Vec] PARENTHESESSTART
CALL[java.io.InputStream,read,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.util.Collection,size,0,int] +++$+++  RETURN NEW TYPE[Vec] PARENTHESESSTART
CALL[java.util.HashMap,remove,1,V] PARA[VAR[jasdl.bridge.mapping.MappingManager.X]] +++$+++  PARENTHESESSTART VAR[jasdl.bridge.mapping.MappingManager.Y] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART CASE OP[ternaryFalse]
CALL[java.util.Set,add,1,boolean] PARA[CALL[java.lang.StringBuffer,toString]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.Stack,size,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.io.InputStream,close,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[out.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.awt.Component,requestFocus,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART LEX[Color.WHITE] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setComposite,1,void] PARA[CALL[null,getInstance]] +++$+++  LEX[g2d.getColor] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Color,getGreen,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[multiply] OP[sum]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[img.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  COMMA LEX[RenderingHints.VALUE_ANTIALIAS_ON] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,moveTo,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  OP[assign] OP[sub] VAR[DOUBLE] EOL
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  LEX[e.getSource] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.event.MouseEvent,getY,0,int] +++$+++  LEX[e.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.concurrent.LinkedBlockingQueue,take,0,E] +++$+++  CURLYSTART TYPE[Runnable] VAR[java.lang.Runnable] OP[assign]
CALL[java.lang.Runnable,run,0,void] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.appendToMapList(java.util.Map<K, java.util.List<T>>, K, T).T]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.util.Map,get,1,V] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.accumulateToMap(java.util.Map<K, V>, K, V, java.util.function.BinaryOperator<V>).K]] +++$+++  VAR[net.sf.freecol.common.util.CollectionUtils.accumulateToMap(java.util.Map<K, V>, K, V, java.util.function.BinaryOperator<V>).K] COMMA LEX[accumulator.apply] PARENTHESESSTART
CALL[java.util.List,set,2,E] PARA[VAR[INT]] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[T] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  LEX[oneI.next] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.stream.Stream,allMatch,1,boolean] PARA[VAR[java.util.function.Predicate]] +++$+++  VAR[java.util.function.Predicate] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,remove,1,E] PARA[LIT[Integer]] +++$+++  NULL OP[ternaryFalse] LEX[Messages.message] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND PARENTHESESEND
CALL[java.io.File,lastModified,0,long] +++$+++  LEX[savegame.lastModified] PARENTHESESSTART PARENTHESESEND OP[greaterThan]
CALL[java.util.logging.Logger,finest,1,void] PARA[LIT[Stirng]] +++$+++  LEX[getImageResources] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  ARRAYEND OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[CHAR]] +++$+++  RETURN PARENTHESESSTART TYPE[FALetter] PARENTHESESEND
CALL[net.sf.freecol.common.debug.FreeColDebugger.DebugMode,ordinal,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART OP[lessThan] OP[lessThan]
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL PARENTHESESEND CURLYSTART
CALL[java.io.Writer,flush,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,toString]] +++$+++  VAR[INT] OP[assign] OP[assign] EOL
CALL[java.util.Map,put,2,V] PARA[VAR[net.sf.freecol.common.model.TypeCountMap.T]] PARA[VAR[INT]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sf.freecol.server.ai.Cargo]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] COMMA COMMA
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  OP[assign] NEW TYPE[SecretKeySpec] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.TableModelListener]] +++$+++  LEX[TableModelListener] VAR[javax.swing.event.TableModelListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTree,setSelectionRow,1,void] PARA[LIT[Integer]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JPanel,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.util.Properties,getProperty]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.Process,destroy,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,2,int] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.util.Map,put,2,V] PARA[CALL[java.util.Map.Entry,getKey]] PARA[CALL[java.util.Map.Entry,getValue]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART VAR[java.net.URI] PARENTHESESEND EOL
CALL[java.awt.event.MouseWheelEvent,getWheelRotation,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[Logger.error] PARENTHESESSTART
CALL[javax.swing.tree.DefaultMutableTreeNode,getUserObject,0,java.lang.Object] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  LEX[genres.size] PARENTHESESSTART PARENTHESESEND OP[ternaryTrue]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] LEX[result.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.Integer,equals,1,boolean] PARA[FIELD[net.filebot.web.Episode]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[java.net.URL,openConnection,0,java.net.URLConnection] +++$+++  OP[assign] PARENTHESESSTART TYPE[HttpURLConnection] PARENTHESESEND
CALL[java.net.HttpURLConnection,setDoOutput,1,void] PARA[LIT[Boolean]] +++$+++  LEX[connection.setRequestMethod] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.HttpURLConnection,getOutputStream,0,java.io.OutputStream] +++$+++  CURLYEND TYPE[OutputStream] VAR[java.io.OutputStream] OP[assign]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[VAR[net.filebot.web.OpenSubtitlesXmlRpc.BaseInfo]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Class,cast,1,T] PARA[VAR[java.lang.Throwable]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.util.function.Function,apply,1,R] PARA[CALL[java.util.List,get]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.file.Path,relativize,1,java.nio.file.Path] PARA[VAR[java.nio.file.Path]] +++$+++  VAR[java.nio.file.Path] OP[assign] LEX[destination.resolve] PARENTHESESSTART
CALL[java.nio.file.Path,resolve,1,java.nio.file.Path] PARA[CALL[java.nio.file.Path,relativize]] +++$+++  CURLYSTART TYPE[Path] VAR[java.nio.file.Path] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[CALL[java.io.File,getName]] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  LEX[filename.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.nio.ByteBuffer,flip,0,java.nio.Buffer] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,capacity,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,rewind,0,java.nio.Buffer] +++$+++  LEX[rewind] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.geom.RectangularShape,getMinX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.RectangularShape,getMaxX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.RectangularShape,getCenterY,0,double] +++$+++  LEX[shape.getMaxX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.RectangularShape,getMaxX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.RectangularShape,getMinY,0,double] +++$+++  LEX[shape.getMaxX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.RectangularShape,getMinX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[javax.swing.Timer,restart,0,void] +++$+++  VAR[javax.swing.event.DocumentEvent] OP[assign] VAR[javax.swing.event.DocumentEvent] EOL
CALL[java.awt.Color,getRed,0,int] +++$+++  VAR[FLOAT] OP[assign] LEX[Color.RGBtoHSB] PARENTHESESSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART RETURN LEX[Math.max] PARENTHESESSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[VAR[java.nio.charset.Charset]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  NEW TYPE[SevenZipNativeInitializationException] PARENTHESESSTART OP[sum]
CALL[java.io.PrintWriter,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[javax.swing.JPanel,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  LEX[selectRadio.isSelected] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,getBorder,0,javax.swing.border.Border] +++$+++  PARENTHESESEND EOL LEX[scroll.setBorder] PARENTHESESSTART
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JList,getTransferHandler,0,javax.swing.TransferHandler] +++$+++  RETURN PARENTHESESSTART TYPE[DefaultTransferHandler] PARENTHESESEND
CALL[java.util.zip.ZipEntry,isDirectory,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.zip.ZipInputStream,getNextEntry,0,java.util.zip.ZipEntry] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.util.zip.ZipEntry] OP[assign]
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Throwable] OP[assign]
CALL[java.lang.String,clone,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Collection,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  TYPE[File] PARENTHESESSTART VAR[java.io.File] COMMA
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Float,floatValue,0,float] +++$+++  OP[greaterThan] VAR[INT] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[currentEvents.get] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[org.jcandle.model.CsvHeader]] PARA[CALL[null,valueOf]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.Integer,toString,0,java.lang.String] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.ObjectInputStream,readObject,0,java.lang.Object] +++$+++  EOL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN LEX[MessageFormat.format] PARENTHESESSTART
CALL[java.util.GregorianCalendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[GregorianCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.GregorianCalendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.awt.Graphics2D,getStroke,0,java.awt.Stroke] +++$+++  EOL TYPE[Stroke] VAR[java.awt.Stroke] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[restart] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[com.openbravo.pos.util.SelectPrinter,applyComponentOrientation,1,void] PARA[CALL[java.awt.Component,getComponentOrientation]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[TicketLineInfo] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Double,doubleValue,0,double] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Double,doubleValue,0,double] +++$+++  NEW TYPE[Double] PARENTHESESSTART OP[sub]
CALL[java.awt.Font,getStyle,0,int] +++$+++  OP[assign] OP[ternaryTrue] LEX[Font.BOLD] OP[ternaryFalse]
CALL[java.util.Set,add,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.HashMap,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  OP[assign] PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND CURLYEND ELSE
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.CharSequence,length,0,int] +++$+++  PARENTHESESSTART EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  CASE OP[ternaryFalse] CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] VAR[java.lang.Object] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  BREAK EOL DEFAULT OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND OP[not] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.awt.Graphics,setColor,1,void] PARA[CALL[null,getControlHighlight]] +++$+++  COMMA LEX[height-2] PARENTHESESEND EOL
CALL[java.awt.Graphics,setColor,1,void] PARA[CALL[null,getControl]] +++$+++  COMMA LEX[height-1] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  ARRAYEND PARENTHESESEND EOL CURLYEND
CALL[javax.swing.Box,add,2,java.awt.Component] PARA[VAR[java.awt.Component]] PARA[LIT[Integer]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[javax.swing.JScrollBar,setUnitIncrement,1,void] PARA[LIT[Integer]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[assign] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[false] EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Vector,insertElementAt,2,void] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.lang.StringBuilder,length,0,int] +++$+++  OP[assign] NEW CHAR ARRAYSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  NULL COMMA VAR[INT] COMMA
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[CALL[java.util.Enumeration,nextElement]] +++$+++  LEX[out.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.Icon]] +++$+++  PARENTHESESSTART VAR[java.net.URL] PARENTHESESEND EOL
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESSTART NEW TYPE[JLabel] PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  OP[assign] NULL EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL WHILE PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESEND VAR[INT] OP[assign]
CALL[java.net.UnknownHostException,getMessage,0,java.lang.String] +++$+++  TYPE[Object] ARRAYSTART ARRAYEND CURLYSTART
CALL[java.net.HttpURLConnection,getResponseCode,0,int] +++$+++  COMMA THIS COMMA OP[sum]
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gjt.sp.jedit.pluginmgr.PluginList.Plugin]] +++$+++  LEX[Plugin] VAR[org.gjt.sp.jedit.pluginmgr.PluginList.Plugin] PARENTHESESEND CURLYSTART
CALL[org.gjt.sp.jedit.pluginmgr.Roster.Operation,equals,1,boolean] PARA[VAR[org.gjt.sp.jedit.pluginmgr.Roster.Operation]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART LEX[pluginModel.setValueAt] PARENTHESESSTART
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  OP[ternaryTrue] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND PARENTHESESEND LEX[retval.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  EOL VAR[INT] OP[assign] EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  VAR[INT] OP[assign] EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART OP[not] LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[not] OP[assign] PARENTHESESEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.Timer,setRepeats,1,void] PARA[LIT[Boolean]] +++$+++  LEX[timer.stop] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  BREAK EOL DEFAULT OP[ternaryFalse]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CASE OP[ternaryFalse] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTextArea,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[buf.toString] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.net.URL,openStream,0,java.io.InputStream] +++$+++  EOL TYPE[InputStream] VAR[java.io.InputStream] OP[assign]
CALL[java.awt.Graphics,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JList,requestFocus,0,void] +++$+++  LEX[requestDefaultFocus] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.ListSelectionModel,addSelectionInterval,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.event.KeyEvent,consume,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.table.DefaultTableModel,getRowCount,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[greaterThan] OP[assign]
CALL[javax.swing.ListSelectionModel,addSelectionInterval,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,removeAllElements,0,void] +++$+++  LEX[DefaultTableModel] VAR[javax.swing.table.DefaultTableModel] PARENTHESESEND CURLYSTART
CALL[javax.swing.JList,setToolTipText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[sum]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.Class,getDeclaredField,1,java.lang.reflect.Field] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART VAR[java.lang.reflect.Field] OP[assign]
CALL[java.lang.reflect.InvocationTargetException,getTargetException,0,java.lang.Throwable] +++$+++  NEW TYPE[UtilEvalError] PARENTHESESSTART OP[sum]
CALL[java.lang.reflect.Constructor,getModifiers,0,int] +++$+++  CURLYSTART RETURN LEX[Modifier.isPublic] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.Class,newInstance,0,T] +++$+++  OP[assign] PARENTHESESSTART TYPE[CollectionManager] PARENTHESESEND
CALL[java.lang.Class,isPrimitive,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Class,isArray,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.awt.event.ActionEvent,getModifiers,0,int] +++$+++  LEX[evt.getWhen] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JTree,scrollPathToVisible,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART VAR[javax.swing.tree.TreePath] PARENTHESESEND EOL
CALL[java.awt.Font,getLineMetrics,2,java.awt.font.LineMetrics] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.font.FontRenderContext]] +++$+++  PARENTHESESEND EOL VAR[java.awt.font.LineMetrics] OP[assign]
CALL[java.awt.Font,getStringBounds,2,java.awt.geom.Rectangle2D] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.font.FontRenderContext]] +++$+++  EOL TYPE[Rectangle2D] VAR[java.awt.geom.Rectangle2D] OP[assign]
CALL[java.io.ObjectInputStream,close,0,void] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.io.File,isDirectory,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,mkdir,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  LEX[keyStroke] OP[assign] LEX[KeyEventTranslator.parseKey] PARENTHESESSTART
CALL[java.util.Set,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.util.Set,size,0,int] +++$+++  LEX[theseRequireMe.size] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND EOL VAR[LONG] OP[assign]
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,format]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,clear,0,void] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,replace,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  LEX[s1.length] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  VAR[INT] COMMA VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.Process,getErrorStream,0,java.io.InputStream] +++$+++  PARENTHESESSTART NEW TYPE[InputStreamReader] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART LEX[token.substring] PARENTHESESSTART COMMA
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.Thread,join,0,void] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  LEX[thOutput.setLength] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[text.substring] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  COMMA VAR[java.lang.String] COMMA COMMA
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[text.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] PARENTHESESSTART LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.BugCode]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  LEX[Thread] VAR[java.lang.Thread] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[edu.umd.cs.findbugs.util.Util.nullSafeCompareTo(T, T).T,compareTo,1,int] PARA[VAR[edu.umd.cs.findbugs.util.Util.nullSafeCompareTo(T, T).T]] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.io.OutputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND OP[not] OP[assign]
CALL[java.util.Collection,size,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[lessThan] TYPE[K] OP[greaterThan] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  CURLYSTART RETURN LEX[DescriptorFactory.canonicalizeString] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[name.charAt] PARENTHESESSTART
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  CURLYSTART DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.io.Writer,close,0,void] +++$+++  LEX[x.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K2]] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K2]] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.V]] +++$+++  VAR[java.util.Map] PARENTHESESEND EOL RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K2]] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.V]] +++$+++  TYPE[HashMap] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.concurrent.CountDownLatch,countDown,0,void] +++$+++  VAR[BOOLEAN] OP[assign] LEX[true] EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  RETURN VAR[INT] OP[greaterThan] OP[assign]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.Set] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.DetectorFactory]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equals,1,boolean] PARA[CALL[edu.umd.cs.findbugs.Plugin,getPluginId]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART TYPE[Plugin] VAR[edu.umd.cs.findbugs.Plugin] OP[ternaryFalse]
CALL[java.util.List,size,0,int] +++$+++  VAR[edu.umd.cs.findbugs.SwitchHandler.SwitchDetails] OP[assign] LEX[switchOffsetStack.get] PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.net.URLConnection,getInputStream,0,java.io.InputStream] +++$+++  PARENTHESESEND EOL VAR[java.io.InputStream] OP[assign]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[optionGroups.put] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[CALL[java.util.List,size]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  LEX[filterSettings.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.Map,hashCode,0,int] +++$+++  LEX[includeFilterFiles.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  OP[greaterThan] OP[greaterThan] VAR[java.util.Set] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[javax.annotation.meta.When,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.ba.jsr305.TypeQualifierAnnotation]] +++$+++  FIELD[typeQualifier,edu.umd.cs.findbugs.ba.jsr305.TypeQualifierAnnotation] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.Object,toString]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.InheritableThreadLocal,set,1,void] PARA[VAR[edu.umd.cs.findbugs.ba.AnalysisContext]] +++$+++  LEX[AnalysisContext] VAR[edu.umd.cs.findbugs.ba.AnalysisContext] PARENTHESESEND CURLYSTART
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[cpg] PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.PushbackReader,unread,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  TYPE[Token] PARENTHESESSTART LEX[Token.WORD] COMMA
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  OP[sum] VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[entry.getValue] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.props.WarningPropertySet.T]] +++$+++  VAR[edu.umd.cs.findbugs.props.WarningPropertySet.T] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.reflect.InvocationTargetException,getCause,0,java.lang.Throwable] +++$+++  VAR[java.lang.reflect.InvocationTargetException] PARENTHESESEND CURLYSTART THROW
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESSTART LEX[srcLine] PARENTHESESEND EOL
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[PrintStream] VAR[java.io.PrintStream] PARENTHESESEND CURLYSTART
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[ternaryFalse] PARENTHESESEND EOL
CALL[java.lang.ThreadLocal,remove,0,void] +++$+++  LEX[clearInstance] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.File,canRead,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[theAspects] PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.SpringLayout,getConstraints,1,javax.swing.SpringLayout.Constraints] PARA[VAR[java.awt.Component]] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  OP[sum] VAR[java.io.File] OP[sum] OP[sum]
CALL[javax.swing.JTextPane,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  TYPE[JTextPane] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextPane,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.ArrayList,contains,1,boolean] PARA[VAR[java.io.File]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  OP[assign] VAR[java.io.File] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalStrut]] +++$+++  PARENTHESESSTART VAR[javax.swing.JButton] PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.AbstractButton,setMnemonic,1,void] PARA[VAR[INT]] +++$+++  OP[assign] LEX[KeyEvent.VK_UNDEFINED] PARENTHESESEND CURLYSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND EOL LEX[Assume.assumeTrue] PARENTHESESSTART
CALL[java.io.File,canRead,0,boolean] +++$+++  PARENTHESESEND EOL LEX[Assume.assumeTrue] PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicBoolean,set,1,void] PARA[LIT[Boolean]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Vector,elements,0,java.util.Enumeration<E>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,getLiteral]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND OP[ternaryTrue]
CALL[java.util.Vector,clone,0,java.lang.Object] +++$+++  RETURN PARENTHESESSTART TYPE[Vector] PARENTHESESEND
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readInt,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.RandomAccessFile,readInt,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.RandomAccessFile,writeInt,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.io.RandomAccessFile,readByte,0,byte] +++$+++  PARENTHESESEND EOL VAR[BYTE] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Lib.atoi] PARENTHESESSTART
CALL[java.nio.ByteBuffer,getInt,0,int] +++$+++  LEX[bb.getInt] PARENTHESESSTART PARENTHESESEND LEX[^]
CALL[java.nio.IntBuffer,get,1,int] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.io.RandomAccessFile,close,0,void] +++$+++  CURLYEND CURLYEND TRY CURLYSTART
CALL[java.awt.event.ActionEvent,getActionCommand,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.io.FileOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] OP[bitwiseAnd] LEX[xFF] EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] OP[lessThan] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  LEX[s.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JFileChooser,getSelectedFile,0,java.io.File] +++$+++  CURLYSTART TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.awt.event.ActionEvent,getSource,0,java.lang.Object] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[javax.swing.ListSelectionModel,isSelectionEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.event.ListSelectionEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[ListSelectionModel] PARENTHESESEND
CALL[javax.swing.JTable,getRowCount,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.event.KeyEvent,getKeyCode,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JTable,getSelectedColumn,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[org.h2.jaqu.util.WeakIdentityHashMap.V]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicLong,get,0,long] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.LinkedHashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[sum] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  OP[ternaryFalse] VAR[INT] OP[sum] EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[sum] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART OP[not] LEX[Character.isSpaceChar] PARENTHESESSTART
CALL[java.io.PrintStream,flush,0,void] +++$+++  LEX[sysOut.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[RuntimeException] PARENTHESESSTART OP[sum]
CALL[java.io.PrintStream,print,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[buff.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND VAR[CHAR] PARENTHESESEND EOL
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.Writer,write,3,void] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART RETURN EOL CURLYEND
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.io.PrintWriter,flush,0,void] +++$+++  VAR[java.lang.String] OP[sum] PARENTHESESEND EOL
CALL[java.util.ArrayList,addAll,1,boolean] PARA[CALL[org.h2.dev.cache.CacheLIRS.Segment,keys]] +++$+++  OP[ternaryFalse] VAR[org.h2.dev.cache.CacheLIRS.Segment] PARENTHESESEND CURLYSTART
CALL[java.util.zip.Deflater,end,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[files.add] PARENTHESESSTART
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  LEX[n.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Set,remove,1,boolean] PARA[VAR[org.h2.util.CloseWatcher]] +++$+++  FIELD[closeable,org.h2.util.CloseWatcher] OP[assign] NULL EOL
CALL[java.io.InputStream,close,0,void] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Date,getTime,0,long] +++$+++  VAR[java.util.Date] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Date,getTime,0,long] +++$+++  PARENTHESESEND EOL LEX[cal.setTimeInMillis] PARENTHESESSTART
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.sql.Timestamp]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.management.ThreadInfo,getLockName,0,java.lang.String] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Random,nextInt,1,int] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.management.MonitorInfo,getLockedStackDepth,0,int] +++$+++  LEX[b.getLockedStackDepth] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  LEX[x80] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.reflect.Method,invoke,2,java.lang.Object] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.net.InetAddress,isLoopbackAddress,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.net.ServerSocket,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.Writer,write,3,void] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.Writer,flush,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Class,isPrimitive,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.InputStream,read,0,int] +++$+++  OP[lessThan] OP[lessThan] PARENTHESESEND OP[sum]
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.Reader,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[org.h2.store.fs.FileMemData.Cache,put,2,V] PARA[VAR[org.h2.store.fs.FileMemData.CompressItem]] PARA[VAR[org.h2.store.fs.FileMemData.CompressItem]] +++$+++  PARENTHESESSTART TYPE[LZF] PARENTHESESEND CURLYSTART
CALL[java.nio.channels.FileChannel,truncate,1,java.nio.channels.FileChannel] PARA[VAR[LONG]] +++$+++  OP[remainder] LEX[Constants.FILE_BLOCK_SIZE] PARENTHESESEND EOL
CALL[java.nio.channels.FileChannel,tryLock,0,java.nio.channels.FileLock] +++$+++  TRY CURLYSTART VAR[java.nio.channels.FileLock] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sub]
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  PARENTHESESEND EOL LEX[idBuffer.position] PARENTHESESSTART
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.nio.channels.FileChannel,force,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  LEX[New.hashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.DataInputStream,readShort,0,short] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.net.Socket,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[INT]] PARA[VAR[org.h2.value.DataType]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  NULL OP[ternaryFalse] LEX[StringUtils.toUpperEnglish] PARENTHESESSTART
CALL[java.io.DataOutputStream,flush,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.net.Socket,isClosed,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  VAR[DOUBLE] OP[assign] LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND EOL SWITCH PARENTHESESSTART
CALL[java.io.File,mkdirs,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.concurrent.ExecutorService,submit,1,java.util.concurrent.Future<T>] PARA[VAR[java.util.concurrent.Callable]] +++$+++  VAR[java.util.concurrent.Callable] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  OP[ternaryFalse] VAR[java.lang.Integer] OP[sum] EOL
CALL[java.util.concurrent.ExecutorService,isTerminated,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  DEFAULT OP[ternaryFalse] IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND EOL SWITCH PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.Iterator,next]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] NEW TYPE[File] ARRAYSTART
CALL[java.util.regex.PatternSyntaxException,getLocalizedMessage,0,java.lang.String] +++$+++  LEX[Messages.getString] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,equals,1,boolean] PARA[CALL[java.util.regex.Pattern,pattern]] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.util.regex.Pattern,flags,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[not] OP[assign]
CALL[javax.swing.text.Document,getText,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[javax.swing.text.Document,getLength]] +++$+++  VAR[java.util.regex.Matcher] OP[assign] LEX[searchPattern.matcher] PARENTHESESSTART
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[CALL[javax.swing.text.Document,getText]] +++$+++  EOL CURLYEND VAR[java.util.regex.Matcher] OP[assign]
CALL[javax.swing.JLabel,setText,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JSpinner,getValue,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  EOL LEX[hideextensions.setEnabled] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getItem,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setMencoderRemuxMPEG2] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setAlternateSubtitlesFolder] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setAutoStart] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setHideAdvancedOptions] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setRendererForceDefault] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.BoundedRangeModel,getExtent,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JScrollBar,setValue,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] OP[sub] VAR[INT] EOL
CALL[javax.swing.JEditorPane,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JToolTip,setComponent,1,void] PARA[THIS[null]] +++$+++  TYPE[HyperLinkToolTip] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JToolTip,setComponent,1,void] PARA[THIS[null]] +++$+++  TYPE[HyperLinkToolTip] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,select,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,getSelectedFile,0,java.io.File] +++$+++  CURLYSTART TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.InputStream,read,0,int] +++$+++  OP[sum] OP[sum] EOL RETURN
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[out.write] PARENTHESESSTART
CALL[java.util.HashMap,remove,1,V] PARA[LIT[Stirng]] +++$+++  LEX[logFilePaths.get] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.Socket,close,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[CALL[java.net.InetAddress,getHostAddress]] +++$+++  TYPE[Integer] OP[greaterThan] VAR[java.util.concurrent.Future] OP[assign]
CALL[java.net.URL,getUserInfo,0,java.lang.String] +++$+++  LEX[url.getHost] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,add,1,boolean] PARA[CALL[net.pms.network.NetworkConfiguration.InterfaceAssociation,getShortName]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[net.pms.network.NetworkConfiguration.InterfaceAssociation,getDisplayName]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.sql.SQLException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOG.warning] PARENTHESESSTART OP[sum]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  LEX[prop.equals] PARENTHESESSTART PARENTHESESEND OP[ternaryTrue]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN VAR[java.lang.String] EOL RETURN
CALL[java.lang.Double,isInfinite,0,boolean] +++$+++  VAR[java.lang.Number] EOL IF PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.math.BigInteger,intValue,0,int] +++$+++  OP[assign] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.Writer,write,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART CASE OP[ternaryFalse]
CALL[java.io.Writer,write,1,void] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.io.Writer,write,1,void] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[sum] VAR[INT] ARRAYEND OP[sub]
CALL[java.io.Writer,flush,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.List,remove,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableModel,isCellEditable,2,boolean] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[groovy.model.DefaultTableModel.MyTableColumnModel,getColumnCount,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  CURLYEND TYPE[Class] VAR[java.lang.Class] OP[assign]
CALL[java.awt.Container,add,1,java.awt.Component] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  VAR[javax.swing.ListModel] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  CURLYSTART RETURN LEX[index] OP[lessThan]
CALL[javax.swing.MutableComboBoxModel,addElement,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.MutableComboBoxModel,insertElementAt,2,void] PARA[VAR[java.lang.Object]] PARA[VAR[INT]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableModel,getColumnCount,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.table.TableColumnModel,getColumnCount,0,int] +++$+++  VAR[javax.swing.table.TableColumnModel] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.tree.TreePath,pathByAddingChild,1,javax.swing.tree.TreePath] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JMenu,getMenuComponents,0,java.awt.Component[]] +++$+++  CURLYSTART RETURN LEX[DefaultGroovyMethods.iterator] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,listIterator,0,java.util.ListIterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.SortedSet,headSet,1,java.util.SortedSet<E>] PARA[VAR[java.lang.Integer]] +++$+++  EOL TYPE[SortedSet] VAR[java.util.SortedSet] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,listIterator,0,java.util.ListIterator<E>] +++$+++  RETURN NEW TYPE[ObservableListIterator] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[groovy.util.GroovyCollections.subsequences(java.util.List<T>).T]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  INSTANCEOF TYPE[String] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[greaterThan] OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.Object] EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] OP[multiply] VAR[INT] OP[sum]
CALL[java.util.Map,put,2,V] PARA[VAR[groovy.lang.MapWithDefault.K]] PARA[VAR[groovy.lang.MapWithDefault.V]] +++$+++  VAR[groovy.lang.MapWithDefault.V] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  OP[greaterThan] VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  ARRAYEND PARENTHESESEND EOL ELSE
CALL[java.util.prefs.Preferences,get,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[CALL[null,getenv]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.prefs.Preferences,get,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Iterator,remove,0,void] +++$+++  LEX[it.next] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[modifiedExpandos.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Class,getComponentType,0,java.lang.Class<? extends java.lang.Object>] +++$+++  CURLYSTART TYPE[Class] VAR[java.lang.Class] OP[assign]
CALL[java.util.LinkedList,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Class,getDeclaredMethods,0,java.lang.reflect.Method[]] +++$+++  PARENTHESESSTART TYPE[Method] VAR[java.lang.reflect.Method] OP[ternaryFalse]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[false] EOL IF PARENTHESESSTART
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.Object] EOL IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  COMMA VAR[INT] OP[sub] OP[sum]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.Object,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Class] OP[assign]
CALL[java.lang.Class,getSuperclass,0,java.lang.Class<? super T>] +++$+++  LEX[true] EOL VAR[java.lang.Class] OP[assign]
CALL[java.io.Closeable,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.ClassLoader,getResources,1,java.util.Enumeration<java.net.URL>] PARA[LIT[Stirng]] +++$+++  TYPE[URL] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.PushbackReader,unread,1,void] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Class]] +++$+++  COMMA VAR[java.lang.Class] PARENTHESESEND EOL
CALL[java.net.URI,getRawQuery,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.URI,getSchemeSpecificPart,0,java.lang.String] +++$+++  LEX[dburi.getScheme] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.net.URI,getHost,0,java.lang.String] +++$+++  LEX[dburi.getSchemeSpecificPart] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.net.URI,getPath,0,java.lang.String] +++$+++  LEX[dburi.getPort] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Properties,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.util.ResourceBundle,getObject]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.event.TreeModelListener,treeNodesChanged,1,void] PARA[VAR[javax.swing.event.TreeModelEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  NEW TYPE[RuntimeException] PARENTHESESSTART OP[sum]
CALL[javax.swing.undo.UndoManager,redo,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Class]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART LEX[Math.max] PARENTHESESSTART COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[javax.swing.tree.DefaultMutableTreeNode,getChildCount,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[javax.swing.tree.DefaultMutableTreeNode,add,1,void] PARA[VAR[javax.swing.tree.DefaultMutableTreeNode]] +++$+++  PARENTHESESSTART LEX[element] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[BuildException] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.regex.Matcher,start,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[comment.substring] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.regex.Matcher,start,0,int] +++$+++  LEX[tags.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  FINAL CHAR VAR[CHAR] OP[assign]
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  LEX[expectedMessages.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.util.concurrent.ExecutorService,shutdownNow,0,java.util.List<java.lang.Runnable>] +++$+++  LEX[close] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[org.pdfsam.pdf.PdfDescriptorLoadingStatus]] +++$+++  VAR[org.pdfsam.pdf.PdfDescriptorLoadingStatus] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  LEX[metadata.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.awt.image.BufferedImage,setRGB,3,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[CALL[java.awt.Color,getRGB]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  LEX[pout.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintStream,print,1,void] PARA[FIELD[net.sf.hale.util.SaveFileHeader]] +++$+++  LEX[pout.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART FIELD[versionID,net.sf.hale.util.SaveFileHeader] PARENTHESESEND EOL
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  LEX[pout.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.zip.ZipOutputStream,close,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.FileInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.ThreadGroup,activeCount,0,int] +++$+++  OP[assign] NEW TYPE[Thread] ARRAYSTART
CALL[java.io.PrintWriter,println,0,void] +++$+++  LEX[out.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.lang.StringBuilder,append,3,java.lang.StringBuilder] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.Integer]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[java.util.Set,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[ternaryFalse] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[StringBuilder] VAR[java.lang.StringBuilder] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[INT]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[INT]] PARA[VAR[net.sf.hale.rules.Role.LevelUpList]] +++$+++  TYPE[LevelUpList] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Random,nextDouble,0,double] +++$+++  OP[sub] VAR[DOUBLE] EOL RETURN
CALL[java.util.Random,nextFloat,0,float] +++$+++  OP[sub] VAR[FLOAT] EOL RETURN
CALL[java.io.File,canRead,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.PrintWriter,write,3,void] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[assign] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,length,0,int] +++$+++  COMMA VAR[java.lang.String] COMMA COMMA
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,equals,1,boolean] PARA[CALL[org.ambraproject.views.article.ArticleType,getHeading]] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.ambraproject.views.article.HomePageArticleInfo]] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[not]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ImageReader] PARENTHESESEND
CALL[java.io.File,isFile,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[BYTE]] +++$+++  ARRAYEND VAR[BYTE] PARENTHESESEND CURLYSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[lessThan] TYPE[String] OP[greaterThan] PARENTHESESEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[bitcoinAddress.setEnabled] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[paypalUrlAddress.setEnabled] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JProgressBar,setString,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.File,equals,1,boolean] PARA[FIELD[com.frostwire.gui.player.MediaSource]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.UIDefaults,getFont,1,java.awt.Font] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[javax.swing.table.TableCellEditor,cancelCellEditing,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.awt.Graphics,create,0,java.awt.Graphics] +++$+++  OP[assign] PARENTHESESSTART TYPE[Graphics2D] PARENTHESESEND
CALL[java.awt.geom.Path2D,closePath,0,void] +++$+++  OP[sum] VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,reset,0,void] +++$+++  DOUBLE VAR[DOUBLE] OP[assign] EOL
CALL[java.awt.geom.Path2D,moveTo,2,void] PARA[VAR[DOUBLE]] PARA[VAR[INT]] +++$+++  LEX[path.reset] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,reset,0,void] +++$+++  OP[assign] VAR[INT] OP[sum] VAR[INT]
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART CASE VAR[com.frostwire.gui.theme.ShapeGenerator.CornerStyle] OP[ternaryFalse]
CALL[javax.swing.JTextField,setBorder,1,void] PARA[THIS[null]] +++$+++  VAR[javax.swing.border.Border] OP[assign] VAR[javax.swing.border.Border] EOL
CALL[javax.swing.border.Border,getBorderInsets,1,java.awt.Insets] PARA[VAR[javax.swing.JTextField]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Insets] PARENTHESESEND
CALL[java.util.Set,remove,1,boolean] PARA[VAR[javax.swing.JComponent]] +++$+++  COMMA THIS PARENTHESESEND EOL
CALL[javax.swing.text.JTextComponent,addFocusListener,1,void] PARA[VAR[com.frostwire.gui.searchfield.PromptTextUI.FocusHandler]] +++$+++  TYPE[JTextComponent] PARENTHESESEND VAR[javax.swing.JComponent] EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  EOL TYPE[SortedListEntry] VAR[com.frostwire.gui.library.SortedListModel.SortedListEntry] OP[assign]
CALL[java.io.PrintWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[false] PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.PrintWriter,println,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.PrintWriter,write,1,void] PARA[CALL[java.io.File,getName]] +++$+++  OP[sum] OP[sum] PARENTHESESEND EOL
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[m3uFile.write] PARENTHESESSTART
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  OP[greaterThan] VAR[java.util.Set] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,getMinimumSize,0,java.awt.Dimension] +++$+++  PARENTHESESEND EOL LEX[checkBox.setSize] PARENTHESESSTART
CALL[javax.swing.JCheckBox,getWidth,0,int] +++$+++  OP[assign] NEW TYPE[BufferedImage] PARENTHESESSTART
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  EOL TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  EOL CURLYEND VAR[java.io.File] OP[assign]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND OP[ternaryTrue]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[out.print] PARENTHESESSTART
CALL[java.io.PrintWriter,print,1,void] PARA[CALL[java.util.List,get]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.sql.ResultSet,getObject]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Boolean] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] OP[greaterThan]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[separators.indexOf] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL LEX[pw.print] PARENTHESESSTART OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  EOL LEX[pw.print] PARENTHESESSTART OP[sum]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[CALL[java.awt.Font,getName]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[javax.swing.JTree,collapsePath,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART VAR[javax.swing.tree.TreePath] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setToolTipText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,setEditable,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,requestFocusInWindow,0,boolean] +++$+++  LEX[requestFocus] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[stopScroll] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[false] PARENTHESESEND EOL ELSE
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.Icon]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[com.limegroup.gnutella.gui.notify.AnimatedWindow,isVisible,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[javax.swing.JFrame,setTitle,1,void] PARA[VAR[java.lang.String]] +++$+++  TYPE[LimeJFrame] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[buttonGroup.getElements] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[javax.swing.JComponent,getActionMap,0,javax.swing.ActionMap] +++$+++  EOL TYPE[ActionMap] VAR[javax.swing.ActionMap] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[javax.swing.JMenuBar,getHeight,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[root.setLength] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.tree.TreeModel,getChild,2,java.lang.Object] PARA[VAR[java.lang.Object]] PARA[VAR[INT]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.tree.TreeModel,getChild,2,java.lang.Object] PARA[VAR[java.lang.Object]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[javax.swing.tree.TreeModel,getChildCount,1,int] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] COMMA VAR[INT] OP[assign]
CALL[java.awt.Color,getBlue,0,int] +++$+++  OP[assign] LEX[xFC] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.awt.Color,getRed,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.awt.Color,brighter,0,java.awt.Color] +++$+++  ELSE CURLYSTART VAR[java.awt.Color] OP[assign]
CALL[java.awt.Color,darker,0,java.awt.Color] +++$+++  PARENTHESESEND EOL VAR[java.awt.Color] OP[assign]
CALL[java.awt.Graphics,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  EOL CASE VAR[INT] OP[ternaryFalse]
CALL[java.awt.event.MouseEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[JTableHeader] PARENTHESESEND
CALL[java.util.List,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[not] OP[assign]
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.HashMap,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[Boolean] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[CompWrap] VAR[net.miginfocom.layout.Grid.CompWrap] OP[assign]
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.List,size,0,int] +++$+++  THIS PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.ThreadLocal,set,1,void] PARA[VAR[org.gudy.azureus2.core3.util.ThreadPool.threadPoolWorker]] +++$+++  OP[assign] OP[assign] VAR[org.gudy.azureus2.core3.util.ThreadPool.threadPoolWorker] PARENTHESESEND
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[org.gudy.azureus2.core3.util.CopyOnWriteList.T]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.concurrent.BlockingQueue,remove,1,boolean] PARA[VAR[java.lang.Runnable]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Process,destroy,0,void] +++$+++  TYPE[IllegalThreadStateException] VAR[java.lang.IllegalThreadStateException] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,toString]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[LONG] PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,getAbsoluteFile,0,java.io.File] +++$+++  OP[not] OP[assign] PARENTHESESEND RETURN
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.io.PrintWriter,close,0,void] +++$+++  LEX[pw.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,compareTo,1,int] PARA[VAR[java.io.File]] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[buf.append] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] COMMA VAR[INT] OP[assign]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.logging.Logger,logp,4,void] PARA[VAR[java.util.logging.Level]] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,length,0,int] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[newString.append] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[sum]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[sum] OP[sum]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[sb.append] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.nio.ByteBuffer,flip,0,java.nio.Buffer] +++$+++  OP[multiply] ARRAYEND PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.nio.channels.WritableByteChannel,isOpen,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,getInt,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.nio.channels.ReadableByteChannel,read,1,int] PARA[VAR[java.nio.ByteBuffer]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.ByteArrayOutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[BYTE] OP[assign]
CALL[java.util.Map,put,2,V] PARA[CALL[java.util.Map.Entry,getKey]] PARA[CALL[java.util.Map.Entry,getValue]] +++$+++  OP[greaterThan] PARENTHESESEND VAR[java.lang.Object] EOL
CALL[INT,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[BOOLEAN,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.lang.Float,floatValue,0,float] +++$+++  NULL OP[ternaryTrue] VAR[FLOAT] OP[ternaryFalse]
CALL[java.lang.CharSequence,length,0,int] +++$+++  OP[bitwiseOr] PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.CharSequence,equals,1,boolean] PARA[VAR[java.lang.CharSequence]] +++$+++  TYPE[String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[BOOLEAN] OP[ternaryTrue]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND RETURN LEX[str.substring] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  OP[bitwiseAnd] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isLetter] PARENTHESESSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND OP[not] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  LEX[str.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  CURLYEND RETURN LEX[Character.valueOf] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] EOL VAR[BYTE] OP[assign]
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,canWrite,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.io.InputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  LEX[writer.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Writer,close,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.io.File,exists,0,boolean] +++$+++  TYPE[IOException] CURLYSTART IF PARENTHESESSTART
CALL[java.util.LinkedHashMap,size,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.Object,notify,0,void] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isLetterOrDigit] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[assign] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[com.frostwire.android.core.MediaType]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.util.Set,equals,1,boolean] PARA[FIELD[com.frostwire.android.core.MediaType]] +++$+++  FIELD[schema,com.frostwire.android.core.MediaType] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.UUID,getLeastSignificantBits,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.Thread,join,0,void] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.lang.Process,destroy,0,void] +++$+++  LEX[error.join] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.io.DataOutputStream,writeInt,1,void] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  OP[assign] PARENTHESESSTART OP[not] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[null,toString]] +++$+++  BYTE VAR[BYTE] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipFile,getEntry,1,java.util.zip.ZipEntry] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[ZipEntry] VAR[java.util.zip.ZipEntry] OP[assign]
CALL[java.lang.NoSuchFieldException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  BREAK EOL CURLYEND RETURN
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  LEX[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JTextField]] +++$+++  LEX[JLabel.RIGHT] PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createGlue]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTextArea,setWrapStyleWord,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Biomarker] PARENTHESESEND
CALL[java.awt.Color,getGreen,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.JScrollPane,setHorizontalScrollBarPolicy,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Container,getComponent,1,java.awt.Component] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Component] VAR[java.awt.Component] OP[assign]
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.JComponent]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[ca.spaz.sql.SQLRow.SQLCol]] +++$+++  FIELD[name,ca.spaz.sql.SQLRow.SQLCol] OP[assign] VAR[java.lang.String] EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LONG VAR[LONG] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART LEX[formatter.applyPattern] PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.net.URISyntaxException,printStackTrace,0,void] +++$+++  TYPE[URISyntaxException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  COMMA LEX[Translator.translate] PARENTHESESSTART COMMA
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.net.Socket,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  LEX[map.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.lang.String,getBytes]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[BYTE]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.Set,size,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART LEX[buddyConnection] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART RETURN PARENTHESESSTART OP[sum]
CALL[java.lang.Long,longValue,0,long] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  EOL LEX[details.put] PARENTHESESSTART COMMA
CALL[java.net.URL,getProtocol,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.Map]] +++$+++  TYPE[HashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[com.aelitis.azureus.core.util.CopyOnWriteList.T]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[com.aelitis.azureus.core.util.CopyOnWriteList.T]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.io.InputStream,available,0,int] +++$+++  LEX[IOException] CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Set,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART NEW TYPE[CopyOnWriteSetIterator] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[sum] OP[assign] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  TYPE[ArrayList] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicInteger,addAndGet,1,int] PARA[VAR[INT]] +++$+++  LEX[reserveTemporarySpace] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[greaterThan] OP[ternaryTrue]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[names.add] PARENTHESESSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  OP[sum] EOL RETURN PARENTHESESSTART
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[Thread.MIN_PRIORITY] PARENTHESESEND EOL
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  FINAL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYEND TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYEND TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  LEX[request.isPartialContent] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[sum] VAR[LONG] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[sum] PARENTHESESEND EOL CURLYEND
CALL[java.nio.channels.SelectionKey,isValid,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Iterator,remove,0,void] +++$+++  OP[assign] LEX[listener] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,remove,0,void] +++$+++  OP[assign] LEX[listener] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[BOOLEAN] OP[assign]
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[VAR[java.nio.ByteBuffer]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[icon] OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[sum] OP[assign] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[com.aelitis.azureus.ui.common.table.impl.DataSourceCallBackUtil.addDataSourceCallback]] +++$+++  VAR[com.aelitis.azureus.ui.common.table.impl.DataSourceCallBackUtil.addDataSourceCallback] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESEND LEX[sb.append] PARENTHESESSTART
CALL[java.util.Stack,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Stack,peek,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  EOL WHILE PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[ternaryFalse] VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.FileOutputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getDeclaredMethod,2,java.lang.reflect.Method] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Class]] +++$+++  CURLYSTART TYPE[Method] VAR[java.lang.reflect.Method] OP[assign]
CALL[java.lang.Class,getDeclaredMethod,2,java.lang.reflect.Method] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Class]] +++$+++  CURLYSTART TYPE[Method] VAR[java.lang.reflect.Method] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.azureus2.ui.swt.ImageViewerWindow.TextViewerWindowListener]] +++$+++  LEX[TextViewerWindowListener] VAR[org.gudy.azureus2.ui.swt.ImageViewerWindow.TextViewerWindowListener] PARENTHESESEND CURLYSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[org.gudy.azureus2.ui.swt.shells.MessageSlideShell.PopupParams]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[sum] OP[assign] PARENTHESESSTART
CALL[java.net.ServerSocket,close,0,void] +++$+++  LEX[false] EOL TRY CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  TYPE[UserProfile] PARENTHESESEND LEX[usersMap.get] PARENTHESESSTART
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  CURLYSTART RETURN LEX[Collections.unmodifiableCollection] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.io.PrintWriter,flush,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,2,void] PARA[LIT[Integer]] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  TYPE[Object] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicLong,decrementAndGet,0,long] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,setName,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[daemon_threads.removeLast] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,limit,1,java.nio.Buffer] PARA[VAR[INT]] +++$+++  LEX[finalBuffer.rewind] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.StackTraceElement,getLineNumber,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.lang.StackTraceElement,toString,0,java.lang.String] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.util.Random,nextInt,0,int] +++$+++  RETURN PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.util.Random,nextLong,0,long] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.LinkedList,size,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.LinkedList,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART LEX[URLDecoder.decode] PARENTHESESSTART
CALL[java.net.URL,getProtocol,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[result.append] PARENTHESESSTART
CALL[java.net.URL,getAuthority,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.URL,getAuthority,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.URL,getQuery,0,java.lang.String] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART NEW TYPE[URL] PARENTHESESSTART
CALL[java.net.URL,getProtocol,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.URL,getDefaultPort,0,int] +++$+++  LEX[UrlUtils.setPort] PARENTHESESSTART VAR[java.net.URL] COMMA
CALL[java.util.concurrent.locks.ReentrantLock,unlock,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.zip.ZipInputStream,getNextEntry,0,java.util.zip.ZipEntry] +++$+++  CURLYSTART TYPE[ZipEntry] VAR[java.util.zip.ZipEntry] OP[assign]
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL LEX[sig.update] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[temp_app_path.substring] PARENTHESESSTART COMMA
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  CURLYSTART TYPE[S] VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.S] OP[assign]
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[T] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.util.concurrent.ConcurrentHashMap,containsKey,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.S]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.nio.ByteBuffer,rewind,0,java.nio.Buffer] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.io.InputStream]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.io.OutputStream,close,0,void] +++$+++  VAR[java.io.IOException] PARENTHESESEND CURLYSTART CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[VAR[INT]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND RETURN PARENTHESESSTART
CALL[java.io.File,length,0,long] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.io.File,deleteOnExit,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,remove,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.SystemTime.ChangeListener]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.util.Map]] +++$+++  COMMA VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.Stack,pop,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[current_indent_string.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  LEX[torrent.getName] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Set,retainAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  VAR[INT] ARRAYEND EOL CURLYEND
CALL[java.util.Set,retainAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  OP[assign] VAR[BYTE] EOL CURLYEND
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[LONG] OP[assign]
CALL[java.util.Locale,equals,1,boolean] PARA[VAR[java.util.Locale]] +++$+++  VAR[java.util.Locale] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  OP[assign] EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.util.Map]] +++$+++  TYPE[HashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.URL,getPort,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,clear,0,void] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[url.substring] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  CURLYEND CURLYEND CURLYEND EOL
CALL[java.net.URL,getPort,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.math.BigInteger,add,1,java.math.BigInteger] PARA[VAR[java.math.BigInteger]] +++$+++  EOL TYPE[BigInteger] VAR[java.math.BigInteger] OP[assign]
CALL[java.math.BigInteger,negate,0,java.math.BigInteger] +++$+++  ELSE CURLYSTART VAR[java.math.BigInteger] OP[assign]
CALL[java.math.BigInteger,shiftLeft,1,java.math.BigInteger] PARA[VAR[INT]] +++$+++  TYPE[SimpleBigDecimal] PARENTHESESSTART LEX[bigInt.add] PARENTHESESSTART
CALL[java.math.BigInteger,divide,1,java.math.BigInteger] PARA[VAR[java.math.BigInteger]] +++$+++  RETURN NEW TYPE[SimpleBigDecimal] PARENTHESESSTART
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  THROW NEW TYPE[CertificateEncodingException] PARENTHESESSTART
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  THROW NEW TYPE[CRLException] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  ARRAYSTART PARENTHESESSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW BYTE ARRAYSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.math.BigInteger,subtract,1,java.math.BigInteger] PARA[VAR[java.math.BigInteger]] +++$+++  EOL TYPE[BigInteger] VAR[java.math.BigInteger] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[DERObjectIdentifier] PARENTHESESEND
CALL[java.io.OutputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.io.File,lastModified,0,long] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[LONG] OP[sub]
CALL[java.io.File,delete,0,boolean] +++$+++  OP[ternaryFalse] VAR[java.io.File] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseListener,mousePressed,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseListener,mousePressed,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseListener,mouseEntered,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics,drawImage,4,boolean] PARA[VAR[java.awt.image.BufferedImage]] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[THIS[null]] +++$+++  LEX[Graphics] VAR[java.awt.Graphics] PARENTHESESEND CURLYSTART
CALL[java.awt.Window,isVisible,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.InputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[java.io.InputStream] PARENTHESESEND EOL
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JFrame,getTitle,0,java.lang.String] +++$+++  PARENTHESESSTART NEW TYPE[AbstractAction] PARENTHESESSTART
CALL[javax.swing.JMenu,addSeparator,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,remove,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.ref.WeakReference,get,0,T] +++$+++  EOL TYPE[Baseboard] VAR[com.eteks.sweethome3d.model.Baseboard] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[baseboardsCache.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  OP[greaterThan] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[javax.swing.JRootPane,revalidate,0,void] +++$+++  PARENTHESESSTART VAR[javax.swing.JLabel] PARENTHESESEND EOL
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.Object]] PARA[CALL[java.util.Hashtable,get]] +++$+++  LEX[en.nextElement] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  FINAL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.io.InputStreamReader,read,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.logging.Logger,getHandlers,0,java.util.logging.Handler[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.util.logging.Handler] OP[assign]
CALL[javax.swing.JButton,setName,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA LEX[Color.LIGHT_GRAY] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[Color] PARENTHESESSTART LEX[Integer.valueOf] PARENTHESESSTART
CALL[javax.swing.JEditorPane,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  LEX[JEditorPane] VAR[javax.swing.JEditorPane] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.Thread,setName,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.net.URI,getPath,0,java.lang.String] +++$+++  CURLYSTART LEX[logger.debug] PARENTHESESSTART OP[sum]
CALL[java.awt.Rectangle,getX,0,double] +++$+++  OP[assign] PARENTHESESSTART INT PARENTHESESEND
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  ARRAYEND OP[sum] LEX[className.substring] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[_textTillCarret.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[javax.swing.JComponent,setSize,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[ternaryFalse] VAR[INT] EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[onTimerAction] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[javax.swing.AbstractButton]] +++$+++  VAR[javax.swing.Action] PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[sum] OP[sum]
CALL[java.awt.Font,isItalic,0,boolean] +++$+++  PARENTHESESEND EOL VAR[BOOLEAN] OP[assign]
CALL[java.awt.Graphics,getColor,0,java.awt.Color] +++$+++  EOL TYPE[Color] VAR[java.awt.Color] OP[assign]
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.JInternalFrame,requestFocus,0,void] +++$+++  VAR[java.beans.PropertyVetoException] PARENTHESESEND EOL CURLYEND
CALL[java.lang.Runnable,run,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.Component,getSize,0,java.awt.Dimension] +++$+++  CURLYEND TYPE[Dimension] VAR[java.awt.Dimension] OP[assign]
CALL[javax.swing.JButton,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.table.TableModel,getColumnClass,1,java.lang.Class<? extends java.lang.Object>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[_btnUnhighlightResult.doClick] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART LEX[i18n.STMT_SEP_LABEL_TT] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setName,1,void] PARA[LIT[Stirng]] +++$+++  TYPE[JTextField] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[_prefs.setProcedureSeparator] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[IllegalArgumentException] CURLYSTART LEX[config.setTableStartTag] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[IllegalArgumentException] CURLYSTART LEX[config.setHeaderStartTag] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[currentConfigurationInView] EOL LEX[config.setEnabled] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[proxySettings.setHttpNonProxyHosts] PARENTHESESSTART
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  LEX[_httpUseProxyChk.isSelected] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTabbedPane,getBounds,0,java.awt.Rectangle] +++$+++  CURLYSTART TYPE[Rectangle] VAR[java.awt.Rectangle] OP[assign]
CALL[javax.swing.JComponent,isVisible,0,boolean] +++$+++  LEX[Exception] CURLYSTART IF PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getComponent,0,java.awt.Component] +++$+++  PARENTHESESEND CURLYSTART LEX[pop.show] PARENTHESESSTART
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  LEX[parent.getApplication] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  CURLYSTART CURLYEND LEX[_cache.saveAllForClass] PARENTHESESSTART
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.io.InputStreamReader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  OP[assign] LEX[s_stringMgr.getString] PARENTHESESSTART COMMA
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  PARENTHESESEND EOL LEX[sdp.setIsSpecified] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBackground,1,void] PARA[VAR[java.awt.Color]] +++$+++  VAR[java.awt.Color] OP[assign] VAR[java.awt.Color] EOL
CALL[javax.swing.JPanel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBackground,1,void] PARA[VAR[java.awt.Color]] +++$+++  VAR[java.awt.Color] OP[assign] VAR[java.awt.Color] EOL
CALL[javax.swing.tree.DefaultMutableTreeNode,add,1,void] PARA[VAR[javax.swing.tree.DefaultMutableTreeNode]] +++$+++  PARENTHESESSTART LEX[sqlAlias] PARENTHESESEND EOL
CALL[java.util.ArrayList,addAll,1,boolean] PARA[CALL[null,asList]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[s_log.error] PARENTHESESSTART OP[sum]
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[frame.pack] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JToggleButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART LEX[false] OP[assign] OP[assign]
CALL[java.awt.Window,toFront,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Window,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[win.toFront] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JInternalFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[fr.moveToFront] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.tree.DefaultTreeModel,getPathToRoot,1,javax.swing.tree.TreeNode[]] PARA[VAR[javax.swing.tree.DefaultMutableTreeNode]] +++$+++  OP[assign] NEW TYPE[TreePath] PARENTHESESSTART
CALL[javax.swing.JTabbedPane,getTabCount,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[javax.swing.JTabbedPane,setSelectedIndex,1,void] PARA[VAR[INT]] +++$+++  OP[assign] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[_sqlNbrRowsToShowField.setEnabled] PARENTHESESSTART
CALL[javax.swing.JList,setListData,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[reset] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JList,setListData,1,void] PARA[CALL[java.util.SortedSet,toArray]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JList,setListData,1,void] PARA[CALL[java.util.SortedSet,toArray]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[newNotUseList.add] PARENTHESESSTART
CALL[java.util.ArrayList,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESEND EOL LEX[notUseColsList.setListData] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.MutableComboBoxModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.MutableComboBoxModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[SQLHistoryItem] PARENTHESESEND
CALL[javax.swing.JTabbedPane,getTabCount,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Integer] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[DatabaseObjectType.VIEW] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Set] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  LEX[evt.getComponent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[ColumnComboModel] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseOr] OP[bitwiseOr] OP[assign] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[java.lang.Integer]] +++$+++  VAR[java.lang.Integer] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[CALL[java.util.ArrayList,get]] +++$+++  PARENTHESESEND CURLYSTART LEX[ret.add] PARENTHESESSTART
CALL[java.util.Vector,add,1,boolean] PARA[VAR[INT]] +++$+++  ARRAYEND OP[assign] VAR[INT] EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] EOL WHILE PARENTHESESSTART
CALL[java.util.Timer,cancel,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.management.ThreadInfo,getStackTrace,0,java.lang.StackTraceElement[]] +++$+++  PARENTHESESSTART TYPE[StackTraceElement] VAR[java.lang.StackTraceElement] OP[ternaryFalse]
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[pw.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.logging.Logger,severe,1,void] PARA[CALL[java.lang.Exception,toString]] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.net.InetAddress,getAddress,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[CALL[java.io.File,getName]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.prefs.Preferences,putBoolean,2,void] PARA[LIT[Stirng]] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.prefs.Preferences,putBoolean,2,void] PARA[LIT[Stirng]] PARA[VAR[BOOLEAN]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[org.python.modules.gc.WeakReferenceGC,clear,0,void] +++$+++  LEX[FinalizeTrigger.NOTIFY_GC_FLAG] EOL CURLYEND CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  RETURN NEW TYPE[PyString] PARENTHESESSTART
CALL[java.lang.StringBuilder,appendCodePoint,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  OP[greaterThan] LEX[xDFFF] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[INT] EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.util.zip.ZipFile,getInputStream,1,java.io.InputStream] PARA[VAR[java.util.zip.ZipEntry]] +++$+++  EOL TYPE[InputStream] VAR[java.io.InputStream] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.InputStream,mark,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,appendCodePoint,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  OP[sub] VAR[INT] PARENTHESESEND CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND COMMA COMMA
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  LEX[text.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.Set]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,isFile,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,append,3,java.lang.StringBuffer] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,lastIndexOf]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.PipedInputStream,close,0,void] +++$+++  LEX[_questionSenderStream.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,isFile,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,canWrite,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.BufferedWriter,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[java.util.regex.Matcher,appendReplacement,2,java.util.regex.Matcher] PARA[VAR[java.lang.StringBuffer]] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[sum] OP[sum] EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[writer.write] PARENTHESESSTART
CALL[java.io.BufferedWriter,write,1,void] PARA[CALL[java.lang.StringBuffer,toString]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  LEX[renderer.getListCellRendererComponent] PARENTHESESSTART VAR[javax.swing.JList] COMMA
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[greaterThan] OP[assign]
CALL[javax.swing.event.ListDataListener,intervalRemoved,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.io.File,mkdir,0,boolean] +++$+++  LEX[bkpDir.isDirectory] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[org.geoserver.web.data.importer.LayerResource.LayerStatus,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.awt.Graphics2D,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  COMMA LEX[RenderingHints.VALUE_STROKE_PURE] PARENTHESESEND EOL
CALL[java.awt.Font,createGlyphVector,2,java.awt.font.GlyphVector] PARA[CALL[java.awt.Graphics2D,getFontRenderContext]] PARA[CALL[java.lang.String,toCharArray]] +++$+++  EOL TYPE[GlyphVector] VAR[java.awt.font.GlyphVector] OP[assign]
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[FIELD[EoLayerType]] +++$+++  PARENTHESESSTART LEX[EoLayerType.GEOPHYSICAL_PARAMETER] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART DOUBLE PARENTHESESEND
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.GradientPaint] PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Queue,add,1,boolean] PARA[VAR[java.awt.image.BufferedImage]] +++$+++  LEX[rlg.dispose] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  VAR[java.awt.image.BufferedImage] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART LEX[buff.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[greaterThan] PARENTHESESEND LEX[elements.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] PARENTHESESEND
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[not] OP[assign] PARENTHESESEND
CALL[java.io.BufferedReader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.BufferedWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.io.BufferedOutputStream,flush,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.FileOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.Class,getDeclaredField,1,java.lang.reflect.Field] PARA[LIT[Stirng]] +++$+++  EOL TYPE[Field] VAR[java.lang.reflect.Field] OP[assign]
CALL[java.lang.reflect.InvocationTargetException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.IllegalAccessException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  LEX[LOGGER.log] PARENTHESESSTART LEX[Level.FINER] COMMA
CALL[java.util.Collection,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  LEX[oldValue.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[sum] OP[sum] ARRAYEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[greaterThan] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.concurrent.atomic.AtomicLong,getAndIncrement,0,long] +++$+++  CURLYSTART TYPE[Long] VAR[java.lang.Long] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[Object] ARRAYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[lessThan] TYPE[QName] OP[greaterThan] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.net.URL,toExternalForm,0,java.lang.String] +++$+++  NEW TYPE[RuntimeException] PARENTHESESSTART OP[sum]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.io.BufferedReader,close,0,void] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.HashSet,isEmpty,0,boolean] +++$+++  OP[assign] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.HashSet,isEmpty,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.HashSet,isEmpty,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.io.ByteArrayOutputStream,close,0,void] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.net.URLConnection,getInputStream,0,java.io.InputStream] +++$+++  RETURN NEW TYPE[InflaterInputStream] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Class] PARENTHESESEND
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[DOUBLE]] +++$+++  COMMA VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Map] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[formats.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Reader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.reflect.InvocationHandler]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Map,containsValue,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Throwable,getLocalizedMessage,0,java.lang.String] +++$+++  LEX[LOGGER.log] PARENTHESESSTART LEX[Level.INFO] COMMA
CALL[java.util.logging.Logger,warning,1,void] PARA[LIT[Stirng]] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Class]] +++$+++  TYPE[Class] VAR[java.lang.Class] PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,flush,0,void] +++$+++  COMMA VAR[java.io.OutputStream] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  OP[sub] PARENTHESESEND EOL RETURN
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  RETURN EOL ELSE RETURN
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.geoserver.security.auth.AuthenticationCacheKey]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND RETURN
CALL[java.io.OutputStreamWriter,flush,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.io.BufferedWriter,flush,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.zip.ZipEntry,getName,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[qualifiedName.substring] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.logging.Logger,fine,1,void] PARA[LIT[Stirng]] +++$+++  LEX[Level.FINE] PARENTHESESEND PARENTHESESEND CURLYSTART
