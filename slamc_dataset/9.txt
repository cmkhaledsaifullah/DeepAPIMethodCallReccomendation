CALL[java.util.Vector,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.Integer,intValue,0,int] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  LEX[Debug.enabled] PARENTHESESEND LEX[Debug.println] PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Vector,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Vector,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,lastIndexOf]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Vector,get,1,E] PARA[VAR[INT]] +++$+++  OP[sum] OP[assign] VAR[java.lang.String] OP[sum]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART OP[not] LEX[Character.isDigit] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.net.Socket,close,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.awt.image.BufferedImage,getGraphics,0,java.awt.Graphics] +++$+++  OP[assign] PARENTHESESSTART TYPE[Graphics2D] PARENTHESESEND
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,length,0,long] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[GregorianCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.Hashtable,values,0,java.util.Collection<V>] +++$+++  OP[assign] NEW TYPE[Vector] PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[h.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[h.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.util.Hashtable,get]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.SortedSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.SortedSet,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.SortedSet,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.util.Hashtable,get,1,V] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  EOL LEX[Debug.println] PARENTHESESSTART OP[sum]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.OutputStream,close,0,void] +++$+++  LEX[in.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,getName,0,java.lang.String] +++$+++  PARENTHESESEND EOL RETURN OP[sum]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[RFE] PARENTHESESEND
CALL[java.util.Hashtable,size,0,int] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Hashtable,put,2,V] PARA[CALL[org.hnrw.report.Report_Diagnosis.Diagnosis,getEncounterUid]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[genj.geo.Country]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[File] ARRAYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JPanel]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createRigidArea]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,replace,3,java.lang.StringBuffer] PARA[LIT[Integer]] PARA[CALL[java.lang.StringBuffer,length]] PARA[CALL[java.text.DecimalFormat,format]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.geom.PathIterator,currentSegment,1,int] PARA[VAR[DOUBLE]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getScaleInstance]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  PARENTHESESEND PARENTHESESEND COMMA PARENTHESESSTART
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  RETURN NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getTranslateInstance]] +++$+++  PARENTHESESSTART VAR[java.awt.Shape] PARENTHESESEND EOL
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[aEnd.getX] PARENTHESESSTART PARENTHESESEND OP[multiply]
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  LEX[aStart.getY] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Math.abs] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[p1.getY] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.awt.geom.Rectangle2D,getMinY,0,double] +++$+++  LEX[canvas.getMinY] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[javax.swing.JCheckBox,addActionListener,1,void] PARA[VAR[genj.tree.TreeViewSettings.Commit]] +++$+++  PARENTHESESSTART VAR[genj.tree.TreeViewSettings.Commit] PARENTHESESEND EOL
CALL[java.io.InputStream,read,0,int] +++$+++  OP[sum] OP[sum] EOL RETURN
CALL[java.awt.Graphics2D,getFontMetrics,0,java.awt.FontMetrics] +++$+++  CURLYSTART TYPE[FontMetrics] VAR[java.awt.FontMetrics] OP[assign]
CALL[java.awt.geom.Rectangle2D,getX,0,double] +++$+++  VAR[DOUBLE] OP[assign] LEX[Math.max] PARENTHESESSTART
CALL[java.awt.font.LineMetrics,getDescent,0,float] +++$+++  VAR[DOUBLE] OP[sum] VAR[FLOAT] OP[sub]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART VAR[java.awt.event.ActionListener] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[javax.swing.ComboBoxEditor,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  LEX[Math.ceil] PARENTHESESSTART LEX[Math.sqrt] PARENTHESESSTART
CALL[javax.swing.JComponent,removeMouseListener,1,void] PARA[VAR[java.awt.event.MouseListener]] +++$+++  LEX[MouseListener] VAR[java.awt.event.MouseListener] PARENTHESESEND CURLYSTART
CALL[java.awt.Rectangle,getHeight,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[sum] VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[genj.util.Registry]] +++$+++  ARRAYSTART ARRAYEND PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  OP[sum] VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.FileInputStream]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuffer] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[genj.util.ReferenceSet.KEY]] PARA[VAR[java.util.Set]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,add,1,boolean] PARA[VAR[genj.util.ReferenceSet.REF]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,addActionListener,1,void] PARA[VAR[genj.timeline.TimelineViewSettings.Commit]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JSpinner,addChangeListener,1,void] PARA[VAR[genj.timeline.TimelineViewSettings.Commit]] +++$+++  PARENTHESESSTART VAR[javax.swing.JSpinner.NumberEditor] PARENTHESESEND EOL
CALL[java.util.List,remove,1,boolean] PARA[VAR[genj.common.PathTreeWidget.Listener]] +++$+++  LEX[Listener] VAR[genj.common.PathTreeWidget.Listener] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableColumn,setPreferredWidth,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.LinkedList,add,2,void] PARA[VAR[INT]] PARA[VAR[java.awt.geom.Point2D.Float]] +++$+++  VAR[FLOAT] COMMA PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.io.BufferedWriter,write,1,void] PARA[LIT[Character]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Collection,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[Property] ARRAYSTART
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.net.ServerSocket,accept,0,java.net.Socket] +++$+++  CURLYSTART TYPE[Socket] VAR[java.net.Socket] OP[assign]
CALL[java.net.Socket,getInputStream,0,java.io.InputStream] +++$+++  EOL RETURN LEX[IPCHelper.read] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] PARENTHESESEND
CALL[java.util.regex.Matcher,start,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[string.substring] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,getBoolean,2,boolean] PARA[VAR[java.lang.String]] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.prefs.Preferences,put,2,void] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  COMMA PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTable,setRowHeight,1,void] PARA[CALL[null,max]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTree,getFont,0,java.awt.Font] +++$+++  VAR[java.awt.FontMetrics] OP[assign] LEX[tree.getFontMetrics] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JProgressBar,setString,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] OP[greaterThan]
CALL[javax.swing.JButton,setRolloverEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JButton,setSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  COMMA FIELD[height,java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[t.start] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  OP[assign] OP[not] VAR[BOOLEAN] EOL
CALL[javax.swing.JDialog,isVisible,0,boolean] +++$+++  NULL PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JCheckBox,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.event.FocusEvent,isTemporary,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.DefaultListModel,getSize,0,int] +++$+++  TYPE[ArrayList] OP[lessThan] OP[greaterThan] PARENTHESESSTART
CALL[javax.swing.JPopupMenu,addSeparator,0,void] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[CreationException] PARENTHESESSTART
CALL[javax.swing.JDialog,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.awt.event.MouseEvent,getComponent,0,java.awt.Component] +++$+++  PARENTHESESEND CURLYSTART LEX[popup.show] PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  LEX[e.getComponent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Optional,get,0,T] +++$+++  LEX[entry.getRefMarkName] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.CardLayout,show,2,void] PARA[VAR[javax.swing.JPanel]] PARA[CALL[null,valueOf]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JRadioButton,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] LEX[GroupHierarchyType.REFINING] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[LOGGER.debug] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[comp.setText] PARENTHESESSTART
CALL[javax.swing.event.ListDataEvent,getIndex0,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JScrollPane,getVerticalScrollBar,0,javax.swing.JScrollBar] +++$+++  CURLYSTART TYPE[JScrollBar] VAR[javax.swing.JScrollBar] OP[assign]
CALL[java.awt.Color,getRed,0,int] +++$+++  NEW TYPE[Color] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.table.TableColumn,getModelIndex,0,int] +++$+++  LEX[mainTableColumn] OP[assign] LEX[tableFormat.getTableColumn] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[prefs.put] PARENTHESESSTART LEX[JabRefPreferences.DEFAULT_ENCODING] COMMA
CALL[java.util.prefs.Preferences,keys,0,java.lang.String[]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.Optional,isPresent,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Optional,get,0,T] +++$+++  CURLYSTART RETURN LEX[Collections.singletonList] PARENTHESESSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.io.File]] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.io.PushbackReader,read,0,int] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] OP[assign] EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  LEX[map.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Optional,isPresent,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Optional,get,0,T] +++$+++  LEX[entry.setField] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Boolean] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESSTART CHAR VAR[CHAR] OP[ternaryFalse]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[result.add] PARENTHESESSTART
CALL[java.util.Map,getOrDefault,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Vector,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.awt.event.MouseEvent,getClickCount,0,int] +++$+++  OP[assign] LEX[MouseEvent.BUTTON1] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.awt.event.MouseEvent,isAltDown,0,boolean] +++$+++  OP[assign] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[javax.swing.table.JTableHeader,addMouseListener,1,void] PARA[VAR[java.awt.event.MouseAdapter]] +++$+++  CURLYEND CURLYEND CURLYEND EOL
CALL[java.util.HashSet,remove,1,boolean] PARA[VAR[weka.gui.explorer.Explorer.CapabilitiesFilterChangeListener]] +++$+++  VAR[weka.gui.explorer.Explorer.CapabilitiesFilterChangeListener] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND ARRAYEND EOL
CALL[java.util.HashSet,remove,1,boolean] PARA[VAR[java.awt.Container]] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[BeanConnection] PARENTHESESEND
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[sourceL.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[javax.swing.JComponent,paint,1,void] PARA[VAR[java.awt.Graphics2D]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Rectangle,contains,1,boolean] PARA[VAR[java.awt.Point]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.JTable,setPreferredScrollableViewportSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  LEX[Dimension] VAR[java.awt.Dimension] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[m_Exp] OP[assign] LEX[exp] EOL
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  RETURN EOL IF PARENTHESESSTART
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  PARENTHESESEND EOL LEX[rsrp.setRandomizeData] PARENTHESESSTART
CALL[javax.swing.JTextPane,setText,1,void] PARA[LIT[Stirng]] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.DefaultListModel,elementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART TYPE[String] PARENTHESESEND PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[JTextComponent] PARENTHESESEND
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Color,getBlue,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[java.awt.event.WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.awt.Image,getGraphics,0,java.awt.Graphics] +++$+++  EOL TYPE[Graphics] VAR[java.awt.Graphics] OP[assign]
CALL[java.awt.Graphics,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[m_osi.getGraphics] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.event.KeyEvent,getSource,0,java.lang.Object] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[javax.swing.JList,requestFocus,0,void] +++$+++  LEX[setFocus] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.HashSet,remove,1,boolean] PARA[VAR[javax.swing.event.TableModelListener]] +++$+++  LEX[TableModelListener] VAR[javax.swing.event.TableModelListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.io.StreamTokenizer,slashSlashComments,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,whitespaceChars,2,void] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  LEX[m_st.quoteChar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.Graphics2D,setPaintMode,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,getColor,0,java.awt.Color] +++$+++  NULL OP[ternaryTrue] VAR[java.awt.Color] OP[ternaryFalse]
CALL[java.awt.Graphics2D,create,0,java.awt.Graphics] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[Graphics2D] PARENTHESESEND
CALL[java.awt.Graphics2D,draw3DRect,5,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawChars,5,void] PARA[VAR[CHAR]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawImage,5,boolean] PARA[VAR[java.awt.Image]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[java.awt.Color]] PARA[VAR[java.awt.image.ImageObserver]] +++$+++  VAR[java.awt.image.ImageObserver] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,setComposite,1,void] PARA[VAR[java.awt.Composite]] +++$+++  LEX[Composite] VAR[java.awt.Composite] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,setTransform,1,void] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  LEX[AffineTransform] VAR[java.awt.geom.AffineTransform] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JRadioButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.awt.Dimension,getWidth,0,double] +++$+++  LEX[size.getWidth] PARENTHESESSTART PARENTHESESEND OP[greaterThan]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Stack,pop,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART RETURN VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataInput,readBoolean,0,boolean] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.DataInput,readUnsignedByte,0,int] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.awt.FontMetrics,charWidth,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  CURLYSTART VAR[INT] OP[sum] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  EOL TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTable,rowAtPoint,1,int] PARA[CALL[java.awt.event.MouseEvent,getPoint]] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.DefaultCellEditor,isCellEditable,1,boolean] PARA[VAR[java.util.EventObject]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[javax.swing.AbstractButton,setBorderPainted,1,void] PARA[LIT[Boolean]] +++$+++  LEX[MouseEvent] LEX[arg0] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,addChoosableFileFilter,1,void] PARA[FIELD[ImporterFactory]] +++$+++  PARENTHESESSTART LEX[ImporterFactory.txtFilter] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[copyFromBeginDate.setEnabled] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JComboBox,setSelectedIndex,1,void] PARA[LIT[Integer]] +++$+++  FIELD[length,java.lang.Object] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextArea,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Color,darker,0,java.awt.Color] +++$+++  VAR[javax.swing.border.Border] OP[assign] LEX[BorderFactory.createLineBorder] PARENTHESESSTART
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  COMMA LEX[BorderLayout.CENTER] PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Window,pack,0,void] +++$+++  LEX[windowAncestor.invalidate] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.image.RenderedImage,copyData,1,java.awt.image.WritableRaster] PARA[CALL[java.awt.image.BufferedImage,getRaster]] +++$+++  COMMA LEX[BufferedImage.TYPE_INT_RGB] PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getGraphics,0,java.awt.Graphics] +++$+++  EOL TYPE[Graphics] VAR[java.awt.Graphics] OP[assign]
CALL[javax.swing.TransferHandler.TransferSupport,setShowDropLocation,1,void] PARA[LIT[Boolean]] +++$+++  RETURN LEX[false] EOL CURLYEND
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[record.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Rectangle] VAR[biz.ganttproject.core.chart.canvas.Canvas.Rectangle] OP[assign]
CALL[java.awt.Font,getSize,0,int] +++$+++  EOL LEX[float] VAR[FLOAT] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[biz.ganttproject.core.chart.render.Style]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  CURLYEND TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Collection,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[org.argouml.model.mdr.Registry.T]] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,addAll,1,boolean] PARA[CALL[java.util.Map,get]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] NEW TYPE[ToolButton] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL VAR[BOOLEAN] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,toArray,1,T[]] PARA[VAR[org.argouml.cognitive.ListSet.toArray(A[]).A]] +++$+++  VAR[org.argouml.cognitive.ListSet.toArray(A[]).A] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Runnable]] +++$+++  LEX[Runnable] VAR[java.lang.Runnable] PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenuItem,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[sum] EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.Action]] +++$+++  LEX[Event.CTRL_MASK] PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.Action,putValue,2,void] PARA[LIT[Stirng]] PARA[CALL[null,getKeyStroke]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.Action]] +++$+++  LEX[Event.CTRL_MASK] PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JLabel,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.Rectangle,getY,0,double] +++$+++  PARENTHESESEND CURLYSTART VAR[DOUBLE] OP[assign]
CALL[java.util.Vector,add,1,boolean] PARA[CALL[javax.swing.ListModel,getElementAt]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.io.File,delete,0,boolean] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.util.Hashtable,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.Integer] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.Action,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[name.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,clear,0,void] +++$+++  LEX[clearLocalVariableDeclarations] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.ClassLoader,loadClass,1,java.lang.Class<? extends java.lang.Object>] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART LEX[classes.add] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[assign] LEX[ConvertUtils.toInt] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getType,0,int] +++$+++  OP[multiply] VAR[FLOAT] PARENTHESESEND COMMA
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[dimg.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.Integer,intValue,0,int] +++$+++  VAR[java.awt.image.BufferedImage] OP[assign] LEX[p2i.getImageForPage] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[jmemorize.util.RecentItems.RecentItemsObserver]] +++$+++  LEX[RecentItemsObserver] VAR[jmemorize.util.RecentItems.RecentItemsObserver] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[description.substring] PARENTHESESSTART
CALL[java.util.prefs.Preferences,getInt,2,int] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.JFrame,getSize,0,java.awt.Dimension] +++$+++  LEX[Settings.storeFrameSize] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  TYPE[SessionSummary] PARENTHESESEND LEX[m_summaries.get] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[SessionSummary] PARENTHESESEND
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTextPane,setEditable,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextPane,validate,0,void] +++$+++  LEX[m_imagePanel.validate] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[javax.swing.JRadioButton,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  LEX[updateCategoryOrderButtons] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[jmemorize.gui.swing.panels.CardPanel.CardPanelObserver]] +++$+++  LEX[CardPanelObserver] VAR[jmemorize.gui.swing.panels.CardPanel.CardPanelObserver] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.zip.ZipOutputStream,putNextEntry,1,void] PARA[VAR[java.util.zip.ZipEntry]] +++$+++  LEX[zipEntry.setTime] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.zip.ZipFile,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESSTART OP[sum] LEX[stringTools.sourced] PARENTHESESSTART
CALL[java.awt.geom.GeneralPath,moveTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[Path2D.WIND_EVEN_ODD] COMMA PARENTHESESEND EOL
CALL[java.awt.geom.Point2D,setLocation,2,void] PARA[CALL[java.awt.geom.Point2D,getX]] PARA[CALL[java.awt.geom.Point2D,getY]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[src.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isDigit] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.JProgressBar,setIndeterminate,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.File,mkdirs,0,boolean] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.io.BufferedReader,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.awt.event.ComponentEvent,getComponent,0,java.awt.Component] +++$+++  LEX[settings.setComponentAreaProperty] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[weightx,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[WindowEvent] LEX[event] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[WindowEvent] LEX[event] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[WindowEvent] LEX[event] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[done] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESSTART LEX[Commands.DUMMY_GO_TO_URI] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  OP[not] OP[assign] NULL EOL
CALL[javax.swing.ListSelectionModel,setLeadSelectionIndex,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.ListSelectionModel,getValueIsAdjusting,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JScrollBar,getValue,0,int] +++$+++  PARENTHESESEND EOL LEX[scrollBar.setValue] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[command.substring] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[findTextField.setEnabled] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenuItem] PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,addSeparator,0,void] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenuItem] PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  LEX[opMenu.addSeparator] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  LEX[opMenu.addSeparator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[LONG] OP[multiply] PARENTHESESEND
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[LONG] OP[multiply] PARENTHESESEND
CALL[java.io.FilterInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.MenuItem,setActionCommand,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.CheckboxMenuItem,setActionCommand,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  COMMA PARENTHESESEND EOL RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Association] PARENTHESESEND
CALL[java.util.LinkedList,removeFirst,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,subList,2,java.util.List<E>] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[properties.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Properties,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.util.ResourceBundle,getString]] +++$+++  LEX[keys.nextElement] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[bundle.getKeys] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  EOL TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Integer]] +++$+++  PARENTHESESEND OP[sum] PARENTHESESEND EOL
CALL[java.lang.Object,wait,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode,getUserObject,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[HasDependencies] PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[PertLayoutTreeNode] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[current.children] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[TaskReference] PARENTHESESEND
CALL[java.util.LinkedList,listIterator,0,java.util.ListIterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.util.LinkedList,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.util.Vector,size,0,int] +++$+++  OP[greaterThan] OP[assign] OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.text.ParsePosition,getIndex]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[javax.swing.filechooser.FileFilter,accept,1,boolean] PARA[VAR[java.io.File]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.util.Calendar,setTimeInMillis,1,void] PARA[VAR[LONG]] +++$+++  LONG VAR[LONG] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[VAR[INT]] +++$+++  LEX[pw.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[pw.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[ternaryFalse] LEX[m_columns] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.Integer]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.io.OutputStreamWriter,write,1,void] PARA[LIT[Stirng]] +++$+++  LEX[m_writer.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Deque,pop,0,E] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.io.FileOutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.TimeZone,getDSTSavings,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  CURLYSTART TYPE[DateFormat] VAR[java.text.DateFormat] OP[assign]
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.Date,equals,1,boolean] PARA[FIELD[net.sf.mpxj.TimephasedItem]] +++$+++  VAR[java.lang.Object] EOL VAR[BOOLEAN] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  VAR[java.lang.Integer] OP[assign] LEX[m_taskNumbers.get] PARENTHESESSTART
CALL[java.lang.Number,doubleValue,0,double] +++$+++  NULL OP[ternaryFalse] LEX[NumberHelper.getDouble] PARENTHESESSTART
CALL[java.lang.Number,doubleValue,0,double] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] OP[assign] EOL CURLYEND
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.Integer]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.io.PrintWriter,close,0,void] +++$+++  LEX[pw.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[sum] OP[assign] PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.Integer,compareTo,1,int] PARA[VAR[java.lang.Integer]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.util.ArrayList,get,1,E] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sf.mpxj.GenericCriteria]] +++$+++  LEX[GenericCriteria] VAR[net.sf.mpxj.GenericCriteria] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[assign] VAR[CHAR] EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[CHAR] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[Field] PARENTHESESEND
CALL[com.projity.pm.graphic.spreadsheet.renderer.NameCellComponent,getFont,0,java.awt.Font] +++$+++  PARENTHESESEND EOL VAR[java.awt.Font] OP[assign]
CALL[javax.swing.table.TableCellEditor,addCellEditorListener,1,void] PARA[VAR[javax.swing.event.CellEditorListener]] +++$+++  LEX[CellEditorListener] VAR[javax.swing.event.CellEditorListener] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,remove,1,V] PARA[CALL[com.projity.pm.graphic.pert.DependencyGraph.Node,getValue]] +++$+++  LEX[suc.isolated] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  LEX[line] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,clear,0,void] +++$+++  LEX[removeAllVisibleElements] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,listIterator,1,java.util.ListIterator<E>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[nodeEvents.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JViewport,setViewPosition,1,void] PARA[VAR[java.awt.Point]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JViewport,revalidate,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.Point] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.AbstractAction]] +++$+++  COMMA VAR[javax.swing.AbstractAction] PARENTHESESEND EOL
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.awt.FontMetrics,stringWidth,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Color,getBlue,0,int] +++$+++  LEX[color.getGreen] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Color,getRed,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.Color,getGreen,0,int] +++$+++  VAR[DOUBLE] OP[multiply] PARENTHESESSTART OP[sub]
CALL[java.awt.Color,getBlue,0,int] +++$+++  VAR[DOUBLE] OP[multiply] PARENTHESESSTART OP[sub]
CALL[java.awt.image.BufferedImage,getRaster,0,java.awt.image.WritableRaster] +++$+++  CURLYSTART TYPE[WritableRaster] VAR[java.awt.image.WritableRaster] OP[assign]
CALL[java.awt.image.WritableRaster,setDataElements,5,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[img.getRaster] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.event.ChangeEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[AbstractCommandButton] PARENTHESESEND
CALL[java.util.Collection,size,0,int] +++$+++  OP[assign] NEW TYPE[ArrayList] PARENTHESESSTART
CALL[java.util.Collection,size,0,int] +++$+++  OP[assign] NEW TYPE[ArrayList] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[objs.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.io.ObjectOutputStream,writeObject,1,void] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.io.ObjectOutputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,close,0,void] +++$+++  LEX[out.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.zip.ZipInputStream,getNextEntry,0,java.util.zip.ZipEntry] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayInputStream] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.net.Socket,getLocalAddress,0,java.net.InetAddress] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.net.URL,getPort,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  STRING LEX[line] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.StringBuffer,insert,2,java.lang.StringBuffer] PARA[LIT[Integer]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[CALL[null,toString]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,getModel,0,javax.swing.table.TableModel] +++$+++  EOL TYPE[TableModel] VAR[javax.swing.table.TableModel] OP[assign]
CALL[javax.swing.table.TableModel,getRowCount,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.table.TableColumn,setMinWidth,1,void] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JTextField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JTextField]] +++$+++  PARENTHESESSTART VAR[javax.swing.JPasswordField] PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] PARENTHESESSTART
CALL[javax.swing.JPasswordField,getPassword,0,char[]] +++$+++  OP[assign] NEW TYPE[String] PARENTHESESSTART
CALL[javax.swing.JTextArea,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[sum] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[assign] LEX[in.substring] PARENTHESESSTART
CALL[java.util.Set,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  LEX[IllegalAccessException] CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[ActionEvent] LEX[arg0] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] COMMA LEX[Class.forName] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[javax.swing.JLabel,setToolTipText,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] OP[sum] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Class] VAR[java.lang.Class] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[vl.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  LEX[JButton] VAR[javax.swing.JButton] PARENTHESESEND CURLYSTART
CALL[java.util.Collection,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,remove,1,V] PARA[VAR[jasdl.bridge.mapping.MappingManager.Y]] +++$+++  PARENTHESESSTART VAR[jasdl.bridge.mapping.MappingManager.X] PARENTHESESEND EOL
CALL[java.util.HashMap,remove,1,V] PARA[VAR[jasdl.bridge.mapping.MappingManager.Y]] +++$+++  CURLYSTART TYPE[X] VAR[jasdl.bridge.mapping.MappingManager.X] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.Stack,pop,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Character] PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[lessThan] PARENTHESESEND
CALL[javax.swing.Timer,isRunning,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[javax.swing.JComponent,getHeight,0,int] +++$+++  LEX[c.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Color,getGreen,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[multiply] OP[sum]
CALL[java.lang.String,hashCode,0,int] +++$+++  LEX[keys.get] PARENTHESESSTART LEX[Math.abs] PARENTHESESSTART
CALL[javax.swing.JComponent,getBackground,0,java.awt.Color] +++$+++  ELSE CURLYSTART LEX[g.setColor] PARENTHESESSTART
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  VAR[DOUBLE] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JMenuItem,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[action] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getQuadrantRotateInstance]] +++$+++  EOL CASE VAR[net.sf.freecol.client.gui.panel.Flag.UnionPosition] OP[ternaryFalse]
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getScaleInstance]] +++$+++  EOL CASE VAR[net.sf.freecol.client.gui.panel.Flag.UnionPosition] OP[ternaryFalse]
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[DOUBLE]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[LIT[Integer]] PARA[VAR[DOUBLE]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  VAR[DOUBLE] COMMA PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[DOUBLE]] +++$+++  VAR[INT] COMMA PARENTHESESEND EOL
CALL[javax.swing.JTextPane,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[javax.swing.text.DefaultStyledDocument] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.appendToMapList(java.util.Map<K, java.util.List<T>>, K, T).K]] +++$+++  TYPE[T] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.rotate(java.util.List<T>, int).T]] +++$+++  LEX[list.remove] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESSTART OP[not] LEX[Utils.equals] PARENTHESESSTART
CALL[java.lang.StringBuilder,setLength,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] VAR[INT] PARENTHESESEND
CALL[java.lang.StringBuilder,length,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.ObjectOutputStream,writeObject,1,void] PARA[VAR[java.util.Random]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Number] VAR[java.lang.Number] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND PARENTHESESEND
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.logging.Logger,finest,1,void] PARA[LIT[Stirng]] +++$+++  LEX[getResources] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  ARRAYEND OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Map,putAll,1,void] PARA[FIELD[net.sf.freecol.common.model.TypeCountMap]] +++$+++  OP[greaterThan] VAR[net.sf.freecol.common.model.TypeCountMap] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Entry] VAR[net.sf.freecol.server.ai.ProductionCache.Entry] OP[assign]
CALL[java.util.Iterator,remove,0,void] +++$+++  PARENTHESESSTART VAR[net.sf.freecol.server.ai.ProductionCache.Entry] PARENTHESESEND EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  OP[bitwiseAnd] PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] OP[assign] LEX[dateStr.substring] PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,lastIndexOf]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.PropertyResourceBundle,getKeys,0,java.util.Enumeration<java.lang.String>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setClip,1,void] PARA[VAR[java.awt.Shape]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.awt.Graphics2D,setClip,1,void] PARA[VAR[java.awt.Shape]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.SecurityException,getMessage,0,java.lang.String] +++$+++  LEX[Logger.info] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.awt.event.MouseEvent,isControlDown,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.Runnable,run,0,void] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  LEX[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] LEX[line.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,indexOf,2,int] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  COMMA PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Integer,compareTo,1,int] PARA[VAR[java.lang.Integer]] +++$+++  OP[ternaryTrue] OP[ternaryFalse] PARENTHESESEND OP[multiply]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] COMMA
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.Runnable,run,0,void] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] OP[assign] LEX[uri.substring] PARENTHESESSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND COMMA LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.concurrent.Semaphore,acquire,0,void] +++$+++  PARENTHESESEND THROWS LEX[InterruptedException] CURLYSTART
CALL[java.util.concurrent.Semaphore,release,0,void] +++$+++  LEX[releasePermit] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.Thread,getPriority,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[not] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  PARENTHESESEND PARENTHESESEND OP[ternaryTrue] PARENTHESESSTART
CALL[java.nio.ByteBuffer,reset,0,java.nio.Buffer] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[sum] OP[sum] EOL
CALL[java.io.File,isDirectory,0,boolean] +++$+++  TYPE[IOException] CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,toPath,0,java.nio.file.Path] +++$+++  ELSE CURLYSTART LEX[Files.delete] PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[CALL[java.io.File,getName]] +++$+++  PARENTHESESEND PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.File,toPath,0,java.nio.file.Path] +++$+++  CURLYSTART RETURN LEX[Files.readAllBytes] PARENTHESESSTART
CALL[java.io.InputStream,reset,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.util.regex.Matcher,start,0,int] +++$+++  RETURN LEX[name.substring] PARENTHESESSTART COMMA
CALL[java.nio.file.Path,getFileName,0,java.nio.file.Path] +++$+++  CURLYSTART RETURN LEX[files.contains] PARENTHESESSTART
CALL[javax.swing.SingleSelectionModel,isSelected,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,get,1,E] PARA[CALL[javax.swing.SingleSelectionModel,getSelectedIndex]] +++$+++  RETURN NULL EOL RETURN
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JComponent]] PARA[LIT[Stirng]] +++$+++  LEX[JComponent] VAR[javax.swing.JComponent] PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics,create,0,java.awt.Graphics] +++$+++  OP[assign] PARENTHESESSTART TYPE[Graphics2D] PARENTHESESEND
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.RectangularShape,getMaxY,0,double] +++$+++  LEX[shape.getCenterX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.RectangularShape,getMaxX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[javax.swing.Icon,getIconHeight,0,int] +++$+++  LEX[icon.getIconWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[TemporaryFolder] VAR[net.filebot.util.TemporaryFolder] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.CharSequence]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.File,isAbsolute,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[net.filebot.ui.rename.OriginalOrder.T]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JButton,setBorderPainted,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Set,size,0,int] +++$+++  VAR[java.util.Set] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPanel,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTable,setFillsViewportHeight,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.io.InputStream,read,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.InputStream,reset,0,void] +++$+++  OP[lessThan] PARENTHESESEND RETURN EOL
CALL[java.util.regex.Pattern,split,2,java.lang.String[]] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.zip.ZipInputStream,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.util.concurrent.ExecutorService,shutdownNow,0,java.util.List<java.lang.Runnable>] +++$+++  LEX[commitTimer.cancel] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.concurrent.ExecutorService,shutdownNow,0,java.util.List<java.lang.Runnable>] +++$+++  LEX[processor.shutdownNow] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Collection,toArray,0,java.lang.Object[]] +++$+++  VAR[java.util.List] OP[assign] LEX[FileUtilities.asFileList] PARENTHESESSTART
CALL[javax.swing.Action,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[org.jcandle.http.Chunk.E]] +++$+++  VAR[org.jcandle.http.Chunk.E] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Float,floatValue,0,float] +++$+++  CURLYSTART RETURN LEX[Float.valueOf] PARENTHESESSTART
CALL[javax.swing.Icon,getIconHeight,0,int] +++$+++  LEX[m_icon1.getIconHeight] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JButton,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  DEFAULT OP[ternaryFalse] LEX[sb.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.ObjectOutputStream,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sreturn.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.GregorianCalendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[GregorianCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[timer.isRunning] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[timer.start] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JDialog,setOpacity,1,void] PARA[LIT[Integer]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  CURLYSTART RETURN LEX[Base64.decodeBase64] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[not] OP[assign]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  RETURN NEW TYPE[EnumerationIter] PARENTHESESSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[TreeNode] PARENTHESESEND
CALL[javax.swing.Timer,start,0,void] +++$+++  CURLYSTART VAR[INT] OP[assign] EOL
CALL[java.awt.Font,getTransform,0,java.awt.geom.AffineTransform] +++$+++  PARENTHESESEND EOL LEX[a.preConcatenate] PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.StringBuffer,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.CharSequence,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.LinkedList,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.event.TextListener,textValueChanged,1,void] PARA[VAR[java.awt.event.TextEvent]] +++$+++  VAR[java.awt.event.TextListener] OP[ternaryFalse] VAR[java.util.LinkedList] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[org.gjt.sp.util.StringList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] OP[ternaryFalse] VAR[java.util.Collection] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.Font,getFamily,0,java.lang.String] +++$+++  LEX[SyntaxUtilities.parseStyle] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.awt.Color,getGreen,0,int] +++$+++  PARENTHESESEND EOL LEX[cs.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.Set,add,1,boolean] PARA[VAR[INT]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gjt.sp.jedit.textarea.DisplayManager]] +++$+++  FIELD[inUse,org.gjt.sp.jedit.textarea.DisplayManager] OP[assign] LEX[true] EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[java.lang.StringBuilder] PARENTHESESEND EOL RETURN
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND EOL VAR[LONG] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[not] OP[assign] PARENTHESESEND RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Vector,addElement,1,void] PARA[VAR[org.gjt.sp.jedit.JEditActionContext.E]] +++$+++  VAR[java.lang.String] OP[assign] NULL EOL
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[ternaryFalse] VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[org.gjt.sp.jedit.JEditActionContext.E]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Vector,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  NULL EOL VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART NEW TYPE[JLabel] PARENTHESESSTART
CALL[javax.swing.UIDefaults,put,2,java.lang.Object] PARA[LIT[Stirng]] PARA[VAR[java.awt.Insets]] +++$+++  COMMA VAR[java.awt.Insets] PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[org.gjt.sp.jedit.ServiceManager.Descriptor]] PARA[VAR[org.gjt.sp.jedit.ServiceManager.Descriptor]] +++$+++  LEX[Descriptor] VAR[org.gjt.sp.jedit.ServiceManager.Descriptor] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Listener] VAR[org.gjt.sp.jedit.buffer.JEditBuffer.Listener] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND DEFAULT OP[ternaryFalse]
CALL[java.util.SortedMap,get,1,V] PARA[VAR[org.gjt.sp.jedit.buffer.PositionManager.PosBottomHalf]] +++$+++  EOL TYPE[PosBottomHalf] VAR[org.gjt.sp.jedit.buffer.PositionManager.PosBottomHalf] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[path.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[INT] OP[assign] LEX[Math.max] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.io.BufferedInputStream,mark,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  RETURN EOL WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.util.Properties]] +++$+++  LEX[Properties] VAR[java.util.Properties] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[SearchAndReplace]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.SplashScreen,isVisible,0,boolean] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Component,getPreferredSize,0,java.awt.Dimension] +++$+++  EOL TYPE[Dimension] VAR[java.awt.Dimension] OP[assign]
CALL[java.awt.Component,getPreferredSize,0,java.awt.Dimension] +++$+++  EOL TYPE[Dimension] VAR[java.awt.Dimension] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[INT]] +++$+++  EOL TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.util.Stack,removeAllElements,0,void] +++$+++  LEX[nodes.removeAllElements] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] COMMA
CALL[java.lang.Class,isArray,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JMenuItem,getText,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[StandardUtilities.compareStrings] PARENTHESESSTART
CALL[java.awt.print.PrinterJob,defaultPage,0,java.awt.print.PageFormat] +++$+++  PARENTHESESEND EOL VAR[java.awt.print.PageFormat] OP[assign]
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  VAR[DOUBLE] OP[sum] VAR[DOUBLE] OP[sub]
CALL[java.io.ObjectInputStream,readObject,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[HashPrintRequestAttributeSet] PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Set,clear,0,void] +++$+++  LEX[clearExpansionState] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButtonMenuItem]] +++$+++  PARENTHESESSTART VAR[org.gjt.sp.jedit.browser.BrowserCommandsMenu.ActionHandler] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.JRadioButtonMenuItem]] +++$+++  COMMA VAR[javax.swing.JRadioButtonMenuItem] PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JRadioButtonMenuItem]] +++$+++  OP[assign] VAR[javax.swing.JMenu] EOL CURLYEND
CALL[java.util.Set,size,0,int] +++$+++  LEX[theseRequireMe.size] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,mkdirs,0,boolean] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.InputStream,close,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.io.FileOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.ListIterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ReferenceEntry] PARENTHESESEND
CALL[java.util.ArrayList,listIterator,0,java.util.ListIterator<E>] +++$+++  PARENTHESESSTART TYPE[ListIterator] VAR[java.util.ListIterator] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isDigit] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  ARRAYEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[token.charAt] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL WHILE PARENTHESESSTART OP[not]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  OP[assign] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  OP[sum] OP[sum] EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.BufferedReader,read,3,int] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.Set,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[CHAR] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[edu.umd.cs.findbugs.util.MergeMap.K]] +++$+++  VAR[edu.umd.cs.findbugs.util.MergeMap.K] PARENTHESESEND CURLYSTART RETURN
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  TYPE[ProcessBuilder] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.io.InputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.Iterable,iterator,0,java.util.Iterator<T>] +++$+++  TYPE[E] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART ASSERT
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[Double] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K1]] +++$+++  TYPE[V] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.concurrent.CountDownLatch,getCount,0,long] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND EOL LEX[xmlOutput.writeText] PARENTHESESSTART
CALL[java.util.ResourceBundle,getKeys,0,java.util.Enumeration<java.lang.String>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.ProjectPackagePrefixes.incrementCount(java.util.Map<T, java.lang.Integer>, T, int).T]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,close,0,void] +++$+++  LEX[i.read] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.reflect.Method,invoke,1,java.lang.Object] PARA[VAR[java.lang.Object]] +++$+++  RETURN PARENTHESESSTART TYPE[Long] PARENTHESESEND
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  LEX[String.format] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[buf.append] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Boolean]] +++$+++  LEX[factory.isDefaultEnabled] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.AnalysisError]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.List,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Object,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.BitSet,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PushbackReader,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  CURLYSTART TYPE[WarningProperty] LEX[prop] OP[assign]
CALL[java.util.IdentityHashMap,put,2,V] PARA[VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType]] PARA[VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType]] +++$+++  PARENTHESESSTART VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType] PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[EdgeType] VAR[edu.umd.cs.findbugs.graph.MergeVertices.EdgeType] OP[assign]
CALL[java.util.SortedMap,lastKey,0,K] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.zip.ZipEntry,setTime,1,void] PARA[CALL[java.util.zip.ZipEntry,getTime]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.PrintStream,print,1,void] PARA[CALL[edu.umd.cs.findbugs.workflow.MineBugHistory.Version,get]] +++$+++  LEX[out.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Character]] +++$+++  LEX[width--] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.BugCategory]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.util.Map,toString,0,java.lang.String] +++$+++  RETURN LEX[annotationClass] OP[sum] OP[sum]
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  NEW TYPE[URL] PARENTHESESSTART OP[sum]
CALL[java.util.Locale,getCountry,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  PARENTHESESSTART LEX[MainFrame.GUI2_DEBUG] PARENTHESESEND CURLYSTART
CALL[java.io.File,exists,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setBorderPainted,1,void] PARA[LIT[Boolean]] +++$+++  TYPE[JButton] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,remove,1,boolean] PARA[VAR[javax.swing.event.TreeModelListener]] +++$+++  LEX[TreeModelListener] VAR[javax.swing.event.TreeModelListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalStrut]] +++$+++  PARENTHESESSTART VAR[javax.swing.JButton] PARENTHESESEND EOL
CALL[javax.swing.JMenuItem,setMnemonic,1,void] PARA[VAR[INT]] +++$+++  COMMA LEX[false] PARENTHESESEND EOL
CALL[javax.swing.AbstractButton,setText,1,void] PARA[CALL[edu.umd.cs.findbugs.gui.AnnotatedString,toString]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,toString,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ConversionSpecification] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,getLiteral]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[CHAR]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readInt,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  PARENTHESESEND EOL VAR[SHORT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  PARENTHESESEND EOL CURLYEND ELSE
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.io.RandomAccessFile,read,3,int] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.nio.IntBuffer,get,1,int] PARA[LIT[Integer]] +++$+++  VAR[java.nio.IntBuffer] PARENTHESESEND EOL RETURN
CALL[java.awt.Container,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextField] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.io.FileOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] OP[bitwiseAnd] LEX[xFF] EOL
CALL[java.io.FileOutputStream,write,1,void] PARA[CALL[java.lang.String,getBytes]] +++$+++  PARENTHESESEND THROWS LEX[Exception] CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] OP[lessThan] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  LEX[s.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.event.ListSelectionEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[JList] PARENTHESESEND
CALL[javax.swing.ListSelectionModel,getMinSelectionIndex,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  VAR[org.h2.jaqu.QueryWhere.selectFirst(Z).Z] PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[sum] VAR[java.lang.String] OP[sum]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART OP[not] LEX[Character.isSpaceChar] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.io.FileOutputStream,write,1,void] PARA[CALL[java.lang.String,getBytes]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.FileOutputStream,close,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[INT] OP[lessThan] OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.lang.String,indexOf,2,int] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  ELSE CURLYSTART VAR[java.lang.Character] OP[assign]
CALL[java.lang.Character,charValue,0,char] +++$+++  EOL CURLYEND LEX[buff.append] PARENTHESESSTART
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.zip.Deflater,setInput,1,void] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART LEX[Deflater.HUFFMAN_ONLY] PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.TreeSet,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.TreeSet,remove,1,boolean] PARA[VAR[org.h2.dev.fs.ArchiveTool.ChunkStream]] +++$+++  LEX[segmentIn.first] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.ArrayList,subList,2,java.util.List<E>] PARA[LIT[Integer]] PARA[CALL[null,min]] +++$+++  VAR[java.util.Comparator] PARENTHESESEND EOL RETURN
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  LEX[name.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,charAt,1,char] PARA[CALL[java.lang.String,length]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[lessThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  LEX[fileName.length] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[java.math.BigDecimal,toString,0,java.lang.String] +++$+++  FINAL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,insert,2,java.lang.StringBuilder] PARA[LIT[Integer]] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[org.h2.util.ToDateParser.ConfigParam,name,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[greaterThan] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  THIS COMMA PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  CURLYSTART TYPE[Calendar] VAR[java.util.Calendar] OP[assign]
CALL[java.util.Calendar,clear,0,void] +++$+++  VAR[java.util.Calendar] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.management.ThreadInfo,getThreadId,0,long] +++$+++  PARENTHESESEND OP[sum] OP[sum] OP[sum]
CALL[java.lang.management.ThreadInfo,isInNative,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Class]] +++$+++  CURLYSTART TYPE[AtomicBoolean] VAR[java.util.concurrent.atomic.AtomicBoolean] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  CURLYEND CURLYEND VAR[BOOLEAN] OP[assign]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.util.Set,clear,0,void] +++$+++  LEX[lockOrdering.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  OP[ternaryFalse] VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  OP[ternaryFalse] VAR[INT] OP[sum] EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.reflect.Method,invoke,1,java.lang.Object] PARA[VAR[java.sql.Date]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.net.Socket,getInetAddress,0,java.net.InetAddress] +++$+++  CURLYSTART TYPE[InetAddress] VAR[java.net.InetAddress] OP[assign]
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.Reader,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[org.h2.util.SortedProperties,put,2,V] PARA[CALL[java.lang.String,substring]] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.Runtime,totalMemory,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  OP[lessThan] PARENTHESESEND OP[sum] PARENTHESESSTART
CALL[java.nio.charset.CharsetEncoder,encode,3,java.nio.charset.CoderResult] PARA[VAR[java.nio.CharBuffer]] PARA[VAR[java.nio.ByteBuffer]] PARA[VAR[BOOLEAN]] +++$+++  VAR[LONG] OP[assign] OP[assign] EOL
CALL[java.nio.CharBuffer,limit,0,int] +++$+++  PARENTHESESEND EOL LEX[charBuffer.position] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  LEX[name.indexOf] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.nio.channels.FileChannel,position,0,long] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[lessThan] PARENTHESESEND OP[sum] PARENTHESESSTART
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  VAR[INT] EOL VAR[INT] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.ArrayList,addAll,1,boolean] PARA[CALL[org.h2.mvstore.cache.CacheLongKeyLIRS.Segment,keys]] +++$+++  OP[ternaryFalse] VAR[org.h2.mvstore.cache.CacheLongKeyLIRS.Segment] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.nio.ByteBuffer,flip,0,java.nio.Buffer] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.concurrent.atomic.AtomicLong,getAndIncrement,0,long] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.nio.channels.FileLock,release,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.nio.channels.FileChannel,close,0,void] +++$+++  OP[assign] NULL EOL CURLYEND
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.io.DataOutputStream,flush,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  COMMA TYPE[Object] OP[greaterThan] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  LEX[false] EOL VAR[java.lang.String] OP[assign]
CALL[java.io.DataOutputStream,writeFloat,1,void] PARA[VAR[FLOAT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,toString,0,java.lang.String] +++$+++  EOL CURLYEND RETURN OP[sum]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  VAR[BYTE] ARRAYSTART ARRAYEND OP[assign]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[value.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[value.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] LEX[value.substring] PARENTHESESSTART COMMA
CALL[javax.swing.JTree,treeDidChange,0,void] +++$+++  LEX[TreeSelectionEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[not] LEX[Character.isDigit] PARENTHESESSTART
CALL[java.awt.FontMetrics,getWidths,0,int[]] +++$+++  PARENTHESESSTART INT VAR[INT] OP[ternaryFalse]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  FINAL TYPE[ComboBoxItemPair] VAR[net.pms.util.KeyedComboBoxModel.ComboBoxItemPair] OP[assign]
CALL[java.lang.Object,equals,1,boolean] PARA[CALL[net.pms.util.KeyedComboBoxModel.ComboBoxItemPair,getValue]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.regex.Matcher,start,0,int] +++$+++  LEX[matcher.find] PARENTHESESSTART PARENTHESESEND OP[ternaryTrue]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[StringBuilder] VAR[java.lang.StringBuilder] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[FileUtil.renameForSorting] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.StringReader]] +++$+++  LEX[properties.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.text.Document,getLength,0,int] +++$+++  PARENTHESESSTART LEX[document.getText] PARENTHESESSTART COMMA
CALL[java.util.regex.Matcher,find,1,boolean] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[BOOLEAN] OP[assign]
CALL[java.util.regex.Matcher,start,0,int] +++$+++  PARENTHESESEND EOL LEX[jList.setCaretPosition] PARENTHESESSTART
CALL[java.util.regex.Matcher,end,0,int] +++$+++  PARENTHESESEND EOL LEX[jList.moveCaretPosition] PARENTHESESSTART
CALL[java.util.zip.ZipOutputStream,closeEntry,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHideExtensions] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.debug] PARENTHESESSTART OP[sum]
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHideNewMediaFolder] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHideRecentlyPlayedFolder] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JTable,getValueAt,2,java.lang.Object] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART BOOLEAN PARENTHESESEND
CALL[javax.swing.JTable,getRowCount,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.debug] PARENTHESESSTART OP[sum]
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setGPUAcceleration] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setAssOutline] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setAssShadow] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setAssMargin] PARENTHESESSTART
CALL[javax.swing.JCheckBox,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.BoundedRangeModel,getMaximum,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JTextField,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  OP[sum] VAR[INT] OP[sum] OP[sum]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART LEX[protocols.add] PARENTHESESSTART
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,matches,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[false] EOL CURLYEND RETURN
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[IP_FILTER_RULE_CHAR.indexOf] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  RETURN LEX[String.format] PARENTHESESSTART COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[SubtitleType] VAR[net.pms.formats.v2.SubtitleType] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.net.InetAddress,isLoopbackAddress,0,boolean] +++$+++  INSTANCEOF TYPE[Inet6Address] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  TYPE[ArrayList] OP[lessThan] OP[greaterThan] PARENTHESESSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[sum] PARENTHESESEND OP[lessThan]
CALL[java.util.Map,put,2,V] PARA[CALL[java.sql.ResultSetMetaData,getColumnLabel]] PARA[CALL[java.sql.ResultSet,getObject]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  COMMA LEX[description.lastIndexOf] PARENTHESESSTART OP[sum]
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[java.util.Map,remove,1,V] PARA[LIT[Stirng]] +++$+++  LEX[properties.remove] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.CharSequence,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[buffer.addJsonEscapedString] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Map,clear,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[javax.swing.table.TableModel,setValueAt,3,void] PARA[VAR[java.lang.Object]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[groovy.model.DefaultTableModel.MyTableColumnModel,getColumnCount,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[column.setModelIndex] PARENTHESESSTART
CALL[javax.swing.ButtonGroup,getElements,0,java.util.Enumeration<javax.swing.AbstractButton>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[javax.swing.MutableComboBoxModel,getSize,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[index] OP[lessThan]
CALL[javax.swing.table.DefaultTableModel,getColumnCount,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.tree.MutableTreeNode,insert,2,void] PARA[VAR[javax.swing.tree.MutableTreeNode]] PARA[CALL[javax.swing.tree.MutableTreeNode,getChildCount]] +++$+++  LEX[MutableTreeNode] VAR[javax.swing.tree.MutableTreeNode] PARENTHESESEND CURLYSTART
CALL[javax.swing.tree.DefaultMutableTreeNode,removeAllChildren,0,void] +++$+++  LEX[DefaultMutableTreeNode] VAR[javax.swing.tree.DefaultMutableTreeNode] PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenuBar,getSubElements,0,javax.swing.MenuElement[]] +++$+++  CURLYSTART RETURN LEX[DefaultGroovyMethods.iterator] PARENTHESESSTART
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.Action]] +++$+++  LEX[Action] VAR[javax.swing.Action] PARENTHESESEND CURLYSTART
CALL[java.util.List,toArray,1,T[]] PARA[VAR[groovy.swing.impl.ListWrapperListModel.toArray(T[]).T]] +++$+++  VAR[groovy.swing.impl.ListWrapperListModel.toArray(T[]).T] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.text.JTextComponent,removeFocusListener,1,void] PARA[VAR[java.awt.event.FocusAdapter]] +++$+++  LEX[JTextComponent] VAR[javax.swing.text.JTextComponent] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  LEX[node] PARENTHESESEND EOL RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,toArray,1,T[]] PARA[VAR[groovy.util.ObservableSet.toArray(T[]).T]] +++$+++  TYPE[T] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[Class] ARRAYSTART
CALL[java.math.BigInteger,equals,1,boolean] PARA[VAR[java.math.BigInteger]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.Writer,write,1,void] PARA[VAR[CHAR]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART VAR[groovy.util.GroovyCollections.subsequences(java.util.List<T>).T] PARENTHESESEND EOL
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  TYPE[NodeList] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[groovy.util.Node]] +++$+++  LEX[childNode.depthFirstRest] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[answer.add] PARENTHESESSTART
CALL[groovy.util.NodeList,addAll,1,boolean] PARA[VAR[groovy.util.NodeList]] +++$+++  PARENTHESESSTART LEX[name] PARENTHESESEND EOL
CALL[java.util.Map,containsValue,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,containsValue,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  TYPE[Class] OP[greaterThan] VAR[java.util.Collection] OP[assign]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND RETURN EOL RETURN
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[groovy.lang.ListWithDefault.T]] +++$+++  LEX[T] VAR[groovy.lang.ListWithDefault.T] PARENTHESESEND CURLYSTART
CALL[java.util.List,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  FIELD[length,java.lang.String] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.net.ServerSocket,accept,0,java.net.Socket] +++$+++  LEX[script] COMMA VAR[BOOLEAN] COMMA
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.prefs.Preferences,getBoolean,2,boolean] PARA[VAR[java.lang.String]] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.prefs.Preferences,clear,0,void] +++$+++  PARENTHESESEND THROWS LEX[BackingStoreException] CURLYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  LEX[flush] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  LEX[in.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,size,0,int] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.lang.String,toString,0,java.lang.String] +++$+++  OP[assign] NULL PARENTHESESEND RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.logging.Logger,info,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.ThreadLocal,set,1,void] PARA[VAR[java.util.regex.Matcher]] +++$+++  LEX[Matcher] VAR[java.util.regex.Matcher] PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getClassLoader,0,java.lang.ClassLoader] +++$+++  PARENTHESESEND COMMA LEX[true] COMMA
CALL[java.lang.Throwable,getStackTrace,0,java.lang.StackTraceElement[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.StackTraceElement] OP[assign]
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Throwable] OP[assign]
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  VAR[java.lang.Throwable] OP[assign] LEX[StackTraceUtils.sanitize] PARENTHESESSTART
CALL[java.lang.reflect.Method,getModifiers,0,int] +++$+++  LEX[Modifier.STATIC] EOL RETURN PARENTHESESSTART
CALL[java.lang.Object,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  NULL OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Long.class] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[StringGroovyMethods.bitwiseNegate] PARENTHESESSTART
CALL[java.lang.Object,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  CURLYSTART RETURN LEX[InvokerHelper.getMetaClass] PARENTHESESSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  LEX[Enum.valueOf] PARENTHESESSTART VAR[java.lang.Class] COMMA
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Class,getComponentType,0,java.lang.Class<? extends java.lang.Object>] +++$+++  CURLYSTART TYPE[Class] VAR[java.lang.Class] OP[assign]
CALL[java.io.Closeable,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Collection,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[CALL[java.util.Map.Entry,getValue]] PARA[CALL[java.util.Map.Entry,getKey]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[CALL[java.lang.Class,getName]] PARA[VAR[java.lang.Class]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,setLevel,1,void] PARA[VAR[java.util.logging.Level]] +++$+++  VAR[java.util.logging.Handler] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.JList,getSelectedValue,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ElementWrapper] PARENTHESESEND
CALL[java.lang.Class,getSuperclass,0,java.lang.Class<? super T>] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Class] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART RETURN LEX[text.substring] PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.IllegalAccessException,printStackTrace,0,void] +++$+++  TYPE[IllegalAccessException] VAR[java.lang.IllegalAccessException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.tree.DefaultMutableTreeNode,getChildCount,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[INT]] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.RuntimeException,getCause,0,java.lang.Throwable] +++$+++  EOL TYPE[Throwable] VAR[java.lang.Throwable] OP[assign]
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  LEX[instance] PARENTHESESSTART PARENTHESESEND OP[ternaryFalse]
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART EOL VAR[INT] OP[lessThan]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,clear,0,void] +++$+++  OP[greaterThan] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.awt.Color,getGreen,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.awt.Color,getBlue,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.awt.Color,getRGB,0,int] +++$+++  VAR[INT] COMMA VAR[INT] COMMA
CALL[javax.swing.JButton,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[sb.append] PARENTHESESSTART
CALL[java.io.PrintStream,print,1,void] PARA[FIELD[net.sf.hale.util.SaveFileHeader]] +++$+++  LEX[pout.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[id.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.FileReader,close,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.Thread,getThreadGroup,0,java.lang.ThreadGroup] +++$+++  EOL TYPE[ThreadGroup] VAR[java.lang.ThreadGroup] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  ARRAYSTART PARENTHESESSTART VAR[INT] OP[multiply]
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Character]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.TreeSet,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  LEX[scriptable.executeFunction] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Map,put,2,V] PARA[VAR[INT]] PARA[VAR[java.util.List]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.List] PARENTHESESEND EOL CURLYEND
CALL[java.util.Random,nextInt,1,int] PARA[VAR[INT]] +++$+++  VAR[INT] OP[sum] EOL RETURN
CALL[java.util.Random,nextInt,1,int] PARA[VAR[INT]] +++$+++  VAR[INT] OP[sum] OP[assign] PARENTHESESSTART
CALL[java.io.File,isFile,0,boolean] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.io.PrintWriter,write,3,void] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESEND BREAK EOL
CALL[java.io.Reader,skip,1,long] PARA[VAR[LONG]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.StringBuilder,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[not] OP[assign] PARENTHESESEND
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Set,toString,0,java.lang.String] +++$+++  LEX[typeForURI.getHeading] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.Long,hashCode,0,int] +++$+++  OP[assign] OP[multiply] VAR[INT] OP[sum]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL LEX[authorsForRelated.add] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL LEX[authorsForRelated.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  OP[sub] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.net.URI]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.Long,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] NULL OP[ternaryFalse]
CALL[java.util.HashMap,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Integer]] +++$+++  LEX[Integer] VAR[java.lang.Integer] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.image.Raster,getWidth,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[_model.setAllSelected] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[_buttonOK.setEnabled] PARENTHESESSTART
CALL[javax.swing.JProgressBar,setStringPainted,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Container,add,2,void] PARA[VAR[javax.swing.JProgressBar]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  FIELD[gridwidth,java.awt.GridBagConstraints] OP[assign] LEX[GridBagConstraints.RELATIVE] EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JPanel]] PARA[LIT[Stirng]] +++$+++  VAR[javax.swing.JPanel] COMMA PARENTHESESEND EOL
CALL[java.io.File,isFile,0,boolean] +++$+++  OP[assign] LEX[JFileChooser.DIRECTORIES_ONLY] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JPanel]] PARA[VAR[java.lang.String]] +++$+++  LEX[cc0Button] COMMA PARENTHESESEND EOL
CALL[javax.swing.JSlider,setValue,1,void] PARA[CALL[null,max]] +++$+++  INT PARENTHESESEND PARENTHESESSTART VAR[FLOAT]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,canRead,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.synth.SynthContext,getComponent,0,javax.swing.JComponent] +++$+++  OP[assign] NEW TYPE[SynthContext] PARENTHESESSTART
CALL[java.awt.geom.Path2D,moveTo,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  LEX[path.reset] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,moveTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[path.reset] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART CASE VAR[com.frostwire.gui.theme.ShapeGenerator.CornerStyle] OP[ternaryFalse]
CALL[javax.swing.JComponent,getFont,0,java.awt.Font] +++$+++  EOL TYPE[Font] VAR[java.awt.Font] OP[assign]
CALL[javax.swing.JComponent,getFontMetrics,1,java.awt.FontMetrics] PARA[VAR[java.awt.Font]] +++$+++  EOL TYPE[FontMetrics] VAR[java.awt.FontMetrics] OP[assign]
CALL[javax.swing.text.JTextComponent,getClientProperty,1,java.lang.Object] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.border.Border,isBorderOpaque,0,boolean] +++$+++  LEX[false] EOL CURLYEND RETURN
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  LEX[ChangeListener] VAR[javax.swing.event.ChangeListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.plaf.TextUI,getRootView,1,javax.swing.text.View] PARA[VAR[javax.swing.text.JTextComponent]] +++$+++  VAR[javax.swing.text.JTextComponent] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.TextUI,getToolTipText,2,java.lang.String] PARA[VAR[javax.swing.text.JTextComponent]] PARA[VAR[java.awt.Point]] +++$+++  VAR[java.awt.Point] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.TextUI,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextField,getClientProperty,1,java.lang.Object] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN LEX[MAC_SEARCH_VARIANT.equals] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.event.KeyEvent,isControlDown,0,boolean] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.io.PrintWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.PrintWriter,println,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JCheckBox,setSize,1,void] PARA[CALL[javax.swing.JCheckBox,getMinimumSize]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,getHeight,0,int] +++$+++  LEX[checkBox.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Image,getGraphics,0,java.awt.Graphics] +++$+++  EOL TYPE[Graphics] VAR[java.awt.Graphics] OP[assign]
CALL[javax.swing.JCheckBox,paint,1,void] PARA[VAR[java.awt.Graphics]] +++$+++  LEX[image.getGraphics] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,addFirst,1,void] PARA[VAR[java.io.File]] +++$+++  VAR[java.io.File] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.LinkedList,size,0,int] +++$+++  OP[assign] NEW TYPE[Object] ARRAYSTART
CALL[javax.swing.JCheckBox,setFont,1,void] PARA[CALL[null,getFont]] +++$+++  PARENTHESESSTART LEX[JCheckBox.LEFT] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  LEX[IOException] CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JProgressBar,setMaximum,1,void] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JOptionPane,getValue,0,java.lang.Object] +++$+++  EOL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.io.ObjectInputStream,defaultReadObject,0,void] +++$+++  LEX[ClassNotFoundException] COMMA LEX[IOException] CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[lessThan] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,size,0,int] +++$+++  TYPE[ArrayList] OP[lessThan] OP[greaterThan] PARENTHESESSTART
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.FileInputStream]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART NEW TYPE[File] PARENTHESESSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART NEW TYPE[File] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL ELSE VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  OP[sum] VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.Font,getSize,0,int] +++$+++  LEX[f.getStyle] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.concurrent.ExecutorService,submit,1,java.util.concurrent.Future<T>] PARA[VAR[java.util.concurrent.Callable]] +++$+++  VAR[java.util.concurrent.Callable] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[setting.setValue] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[javax.swing.JTree,setSelectionPath,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART VAR[javax.swing.tree.TreePath] PARENTHESESEND EOL
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[root.breadthFirstEnumeration] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.reflect.Field,get]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[javax.swing.Timer,start,0,void] +++$+++  LEX[startScroll] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JEditorPane,addHyperlinkListener,1,void] PARA[VAR[javax.swing.event.HyperlinkListener]] +++$+++  LEX[HyperlinkListener] VAR[javax.swing.event.HyperlinkListener] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.Icon]] +++$+++  VAR[javax.swing.Icon] PARENTHESESEND EOL ELSE
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[sum] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[com.limegroup.gnutella.gui.notify.AnimatedWindow,isVisible,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.JFrame,pack,0,void] +++$+++  PARENTHESESSTART VAR[javax.swing.JPanel] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,lineSeparator]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[com.limegroup.gnutella.gui.init.SetupManager.PreviousAction,isEnabled,0,boolean] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYEND PARENTHESESEND EOL RETURN
CALL[java.awt.dnd.DragGestureEvent,getComponent,0,java.awt.Component] +++$+++  OP[assign] PARENTHESESSTART TYPE[JComponent] PARENTHESESEND
CALL[java.net.NetworkInterface,isLoopback,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[javax.swing.JTable,getCellEditor,0,javax.swing.table.TableCellEditor] +++$+++  CURLYSTART TYPE[TableCellEditor] VAR[javax.swing.table.TableCellEditor] OP[assign]
CALL[javax.swing.table.TableCellEditor,cancelCellEditing,0,void] +++$+++  LEX[table.getCellEditor] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isEnabled,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JToggleButton,setText,1,void] PARA[LIT[Stirng]] +++$+++  OP[ternaryFalse] VAR[java.util.Collection] PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,getFont,0,java.awt.Font] +++$+++  VAR[java.awt.FontMetrics] OP[assign] LEX[c.getFontMetrics] PARENTHESESSTART
CALL[java.awt.event.ActionEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[Window] PARENTHESESEND
CALL[javax.swing.InputMap,remove,1,void] PARA[VAR[javax.swing.KeyStroke]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[sum] OP[sum] PARENTHESESEND
CALL[javax.swing.JPanel,setBorder,1,void] PARA[VAR[javax.swing.border.Border]] +++$+++  COMMA VAR[javax.swing.border.Border] PARENTHESESEND EOL
CALL[java.lang.ProcessBuilder,redirectErrorStream,1,java.lang.ProcessBuilder] PARA[LIT[Boolean]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.event.TreeModelListener]] +++$+++  LEX[TreeModelListener] VAR[javax.swing.event.TreeModelListener] PARENTHESESEND CURLYSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.event.TreeModelListener,treeStructureChanged,1,void] PARA[VAR[javax.swing.event.TreeModelEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[javax.swing.ListSelectionModel,getMinSelectionIndex,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.Color,brighter,0,java.awt.Color] +++$+++  PARENTHESESEND CURLYSTART VAR[java.awt.Color] OP[assign]
CALL[javax.swing.table.JTableHeader,getForeground,0,java.awt.Color] +++$+++  PARENTHESESEND EOL LEX[renderer.setForeground] PARENTHESESSTART
CALL[javax.swing.JLabel,setHorizontalAlignment,1,void] PARA[VAR[INT]] +++$+++  OP[assign] THIS PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,setAutoResizeMode,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[not] OP[assign] PARENTHESESEND
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART RETURN LEX[i18n.trn] PARENTHESESSTART
CALL[javax.swing.JTextArea,selectAll,0,void] +++$+++  LEX[FocusEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  LEX[ActionEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  OP[sum] EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.Float] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[UnitValue.MAX] EOL IF PARENTHESESSTART
CALL[java.util.TreeSet,add,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,setPriority,1,void] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[org.gudy.azureus2.core3.util.AEThread2.JoinLock,wait,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.concurrent.Semaphore,release,0,void] +++$+++  LEX[release] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART NEW TYPE[CopyOnWriteListIterator] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.SystemTime.TickConsumer]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.SystemTime.TickConsumer]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Stack,pop,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  ELSE CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] PARENTHESESEND VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[LONG] OP[lessThan] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,toString]] +++$+++  LEX[time.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  VAR[java.nio.CharBuffer] OP[assign] LEX[CharBuffer.wrap] PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.Closeable,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  LEX[true] EOL VAR[java.io.File] OP[assign]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,isFile,0,boolean] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[FilenameUtils.getExtension] PARENTHESESSTART
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  LEX[true] EOL WHILE PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[buf.append] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  COMMA LEX[true] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND LEX[tokens.add] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Collection,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  FINAL CHAR VAR[CHAR] OP[assign]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.nio.CharBuffer,toString,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Integer]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN VAR[java.lang.String] EOL RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[Browser.getHost] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[com.frostwire.search.SearchManager.SearchTask]] +++$+++  LEX[SearchTask] VAR[com.frostwire.search.SearchManager.SearchTask] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.RandomAccessFile,seek,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.nio.channels.ReadableByteChannel,isOpen,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,getShort,0,short] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.io.Closeable,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[FLOAT,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.lang.Double,doubleValue,0,double] +++$+++  NULL OP[ternaryTrue] VAR[DOUBLE] OP[ternaryFalse]
CALL[java.util.Comparator,compare,2,int] PARA[VAR[org.apache.commons.lang3.ArrayUtils.isSorted(T[], java.util.Comparator<T>).T]] PARA[VAR[org.apache.commons.lang3.ArrayUtils.isSorted(T[], java.util.Comparator<T>).T]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  COMMA COMMA LEX[Math.max] PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  FINAL CHAR VAR[CHAR] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[sum] EOL VAR[BYTE] OP[assign]
CALL[java.io.FileInputStream,getChannel,0,java.nio.channels.FileChannel] +++$+++  PARENTHESESEND EOL VAR[java.nio.channels.FileChannel] OP[assign]
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.nio.channels.Selector,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[VAR[CHAR]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[output.write] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART OP[not] VAR[BOOLEAN] COMMA
CALL[java.io.StringWriter,write,3,void] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.LinkedHashMap,values,0,java.util.Collection<V>] +++$+++  FINAL TYPE[Entry] VAR[com.andrew.apollo.cache.DiskLruCache.Entry] OP[ternaryFalse]
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  LEX[writer.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  PARENTHESESEND EOL LEX[sig.update] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  OP[ternaryFalse] PARENTHESESEND EOL RETURN
CALL[java.lang.Process,waitFor,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.Thread,start,0,void] +++$+++  VAR[java.io.InputStream] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.DataOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.SecurityException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[orderStack.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.InterruptedException,printStackTrace,0,void] +++$+++  TYPE[InterruptedException] VAR[java.lang.InterruptedException] PARENTHESESEND CURLYSTART
CALL[java.awt.Window,getHeight,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.FileOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.FileInputStream,close,0,void] +++$+++  VAR[BYTE] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JTextArea,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,showSaveDialog,1,int] PARA[VAR[java.awt.Component]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  EOL LEX[r.setSourceUID] PARENTHESESSTART OP[sum]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createGlue]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createGlue]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextField] PARENTHESESEND EOL
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART NEW TYPE[ByteArrayInputStream] PARENTHESESSTART
CALL[ca.spaz.cron.ExportWizard,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  TYPE[ExportWizard] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[CALL[ca.spaz.cron.foods.Measure,getDescription]] +++$+++  RETURN LEX[false] EOL RETURN
CALL[java.util.Vector,add,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  LEX[ChangeListener] VAR[javax.swing.event.ChangeListener] PARENTHESESEND CURLYSTART
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[biomarkers.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[FocusEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[Logger.log] PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.io.File,mkdir,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JFrame,setLocation,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[java.awt.Container,getInsets,0,java.awt.Insets] +++$+++  EOL TYPE[Insets] VAR[java.awt.Insets] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND LEX[comp.setEnabled] PARENTHESESSTART OP[not]
CALL[javax.swing.JComponent,setToolTipText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.Object,toString]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[AccountInformation] PARENTHESESEND
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[AccountInformation] PARENTHESESEND
CALL[javax.swing.JFileChooser,setDialogTitle,1,void] PARA[VAR[java.lang.String]] +++$+++  TYPE[JFileChooser] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[false] EOL IF PARENTHESESSTART
CALL[java.util.Iterator,remove,0,void] +++$+++  OP[assign] OP[assign] VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[BOOLEAN] EOL CURLYEND RETURN
CALL[java.lang.String,matches,1,boolean] PARA[CALL[java.util.Iterator,next]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  LEX[map.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Map] PARENTHESESEND
CALL[java.io.UnsupportedEncodingException,printStackTrace,0,void] +++$+++  TYPE[UnsupportedEncodingException] VAR[java.io.UnsupportedEncodingException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  RETURN PARENTHESESSTART LEX[Base32.encode] PARENTHESESSTART
CALL[java.io.File,delete,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND VAR[BOOLEAN] OP[assign]
CALL[java.util.List,remove,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.net.InetAddress,isLinkLocalAddress,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.net.InetAddress]] +++$+++  CURLYSTART RETURN EOL CURLYEND
CALL[java.net.URL,getPort,0,int] +++$+++  LEX[url.getDefaultPort] PARENTHESESSTART PARENTHESESEND OP[ternaryFalse]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Long] PARENTHESESEND
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  ARRAYEND OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Object] OP[assign]
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[com.aelitis.azureus.core.util.CopyOnWriteList.T]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART NEW TYPE[CopyOnWriteListIterator] PARENTHESESSTART
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART TYPE[Entry] VAR[com.aelitis.azureus.core.util.LinkFileMap.Entry] OP[ternaryFalse]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.io.ByteArrayOutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.LinkedList,isEmpty,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.LinkedList,clear,0,void] +++$+++  LEX[pub_download_infos1.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,getFirst,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND OP[assign] OP[assign]
CALL[java.util.Set,size,0,int] +++$+++  VAR[INT] OP[assign] LEX[Math.min] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.DataOutputStream,writeShort,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.io.DataOutputStream,writeByte,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.lang.Long,longValue,0,long] +++$+++  PARENTHESESSTART NEW LEX[templateInfo] PARENTHESESSTART
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[com.aelitis.azureus.core.download.StreamManager.SMDImpl]] +++$+++  PARENTHESESSTART LEX[StreamManager.this] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,clear,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  CURLYSTART BYTE VAR[BYTE] OP[assign]
CALL[java.net.InetSocketAddress,getPort,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART SHORT PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[ByteBuffer.allocate] PARENTHESESSTART OP[sum]
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[CALL[java.lang.String,getBytes]] +++$+++  BYTE PARENTHESESEND PARENTHESESEND EOL
CALL[java.nio.channels.SelectionKey,isValid,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[new_requests.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[ConnectionRequest] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.nio.ByteBuffer,put,3,java.nio.ByteBuffer] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[SHORT] PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,limit,1,java.nio.Buffer] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.nio.ByteBuffer] PARENTHESESEND EOL
CALL[java.util.ArrayList,contains,1,boolean] PARA[VAR[java.nio.channels.spi.AbstractSelectableChannel]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[com.aelitis.azureus.core.peermanager.utils.BTPeerIDByteDecoderDefinitions.ClientData]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[String] PARENTHESESEND LEX[az_style_code_map.get] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[SWTSkinTabSetListener] PARENTHESESEND
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  TRY CURLYSTART VAR[BYTE] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Runnable]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[com.aelitis.azureus.ui.common.table.impl.DataSourceCallBackUtil.addDataSourceCallback]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,trim]] +++$+++  NULL PARENTHESESEND RETURN EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL ELSE CURLYSTART
CALL[java.io.OutputStream,close,0,void] +++$+++  EOL CURLYEND TRY CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  PARENTHESESSTART VAR[java.io.PrintWriter] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW CHAR ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART OP[not] VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[BYTE] OP[assign] VAR[BYTE] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.io.File] OP[assign]
CALL[java.util.ArrayList,toArray,0,java.lang.Object[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[java.io.FileInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.File,getParent,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[fDialog.setFilterPath] PARENTHESESSTART
CALL[java.io.File,toString,0,java.lang.String] +++$+++  TYPE[String] ARRAYSTART ARRAYEND CURLYSTART
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.StringBuffer]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[java.lang.StringBuffer] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[INT] EOL IF PARENTHESESSTART
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[torrentDir.equals] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,getPriority,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[not] OP[assign]
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,isAlive,0,boolean] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.lang.Object,hashCode,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.Object,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[assign] OP[assign]
CALL[java.nio.ByteBuffer,clear,0,java.nio.Buffer] +++$+++  VAR[LONG] OP[assign] VAR[LONG] EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[InputStream] PARENTHESESEND
CALL[java.util.jar.JarOutputStream,putNextEntry,1,void] PARA[VAR[java.util.jar.JarEntry]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.Exception,getStackTrace,0,java.lang.StackTraceElement[]] +++$+++  VAR[java.lang.StackTraceElement] ARRAYSTART ARRAYEND OP[assign]
CALL[java.lang.Throwable,printStackTrace,1,void] PARA[VAR[java.io.PrintWriter]] +++$+++  VAR[java.io.ByteArrayOutputStream] PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,listFiles,0,java.io.File[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.io.File] OP[assign]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Formatter] VAR[org.gudy.azureus2.core3.util.DisplayFormatters.Formatter] OP[assign]
CALL[java.util.concurrent.Semaphore,release,0,void] +++$+++  LEX[release] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,close,0,void] +++$+++  EOL CURLYEND TRY CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.net.URL,toExternalForm,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.net.URL,getRef]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.concurrent.locks.ReentrantLock,isHeldByCurrentThread,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.zip.ZipInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART LEX[threadPoolWorker] PARENTHESESEND
CALL[java.util.Set,contains,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.S]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.TreeMap,put,2,V] PARA[VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.S]] PARA[VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.T]] +++$+++  OP[assign] NULL EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.File,length,0,long] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,delete,0,boolean] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[platform.performRecoverableFileDelete] PARENTHESESSTART
CALL[java.io.File,mkdirs,0,boolean] +++$+++  CURLYEND CURLYEND CURLYEND RETURN
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[VAR[INT]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.io.FileInputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.StringBuffer,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.SystemTime.TickConsumer]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Stack,pop,0,E] +++$+++  OP[assign] THIS PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[org.gudy.azureus2.core3.internat.MessageText.MessageTextListener]] +++$+++  LEX[MessageTextListener] VAR[org.gudy.azureus2.core3.internat.MessageText.MessageTextListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,store,2,void] PARA[VAR[java.io.FileOutputStream]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.util.Map,size,0,int] +++$+++  OP[assign] NEW TYPE[LightHashMap] PARENTHESESSTART
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  COMMA VAR[java.lang.Throwable] PARENTHESESEND EOL
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  VAR[java.io.InputStream] EOL TRY CURLYSTART
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYSTART VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[Math.random] PARENTHESESSTART PARENTHESESEND OP[multiply]
CALL[java.util.List,toArray,1,T[]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND ARRAYEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  CURLYSTART VAR[java.lang.String] OP[assign] OP[sum]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[LogAlert] PARENTHESESEND
CALL[java.util.jar.JarOutputStream,putNextEntry,1,void] PARA[VAR[java.util.jar.JarEntry]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.jar.JarOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] PARENTHESESSTART TYPE[RPObject] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.math.BigInteger,shiftLeft,1,java.math.BigInteger] PARA[VAR[INT]] +++$+++  RETURN NEW TYPE[SimpleBigDecimal] PARENTHESESSTART
CALL[java.math.BigInteger,subtract,1,java.math.BigInteger] PARA[CALL[java.math.BigInteger,shiftLeft]] +++$+++  RETURN NEW TYPE[SimpleBigDecimal] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  LEX[c] PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART NEW TYPE[BigInteger] PARENTHESESSTART
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.Vector,addElement,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.Vector,addElement,1,void] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[ASN1Sequence] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  COMMA PARENTHESESSTART TYPE[DEREncodable] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  LEX[Character.isDigit] PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[INT] OP[not] OP[assign] OP[ternaryTrue]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.Object,wait,0,void] +++$+++  OP[bitwiseAnd] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,getBorder,0,javax.swing.border.Border] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Window,dispose,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,setBorder,1,void] PARA[VAR[javax.swing.border.Border]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[Float.parseFloat] PARENTHESESSTART
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[AspectRatio] PARENTHESESEND
CALL[javax.swing.JComponent,getWidth,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART LEX[float] PARENTHESESEND
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.awt.geom.GeneralPath,reset,0,void] +++$+++  VAR[java.awt.geom.GeneralPath] PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JToolBar,repaint,0,void] +++$+++  LEX[WindowEvent] LEX[ev] PARENTHESESEND CURLYSTART
CALL[java.awt.Component,getBackground,0,java.awt.Color] +++$+++  CURLYSTART TYPE[Color] VAR[java.awt.Color] OP[assign]
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.io.DataInputStream,readShort,0,short] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.io.DataInputStream,readLong,0,long] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  OP[assign] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] OP[assign] EOL CURLYEND
CALL[java.util.logging.Logger,addHandler,1,void] PARA[VAR[java.util.logging.FileHandler]] +++$+++  ARRAYEND PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[net.sf.latexdraw.installer.Installer.InstallerListener] PARENTHESESEND EOL
CALL[java.io.BufferedOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.Color,getRed,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[Integer.toHexString] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,clear,0,void] +++$+++  LEX[createNameColourHashTable] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[lessThan] OP[sub]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[buf.append] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.util.ArrayList,get]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  VAR[CHAR] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[lessThan] LEX[parts.length-1] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.Dimension,getHeight,0,double] +++$+++  OP[assign] PARENTHESESSTART INT PARENTHESESEND
CALL[java.awt.Rectangle,getY,0,double] +++$+++  OP[assign] PARENTHESESSTART INT PARENTHESESEND
CALL[java.awt.Rectangle,getWidth,0,double] +++$+++  OP[assign] PARENTHESESSTART INT PARENTHESESEND
CALL[java.io.StringWriter,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[CHAR]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  OP[sum] OP[assign] VAR[java.lang.String] OP[sum]
CALL[javax.swing.JComponent,getBounds,0,java.awt.Rectangle] +++$+++  PARENTHESESEND EOL VAR[java.awt.Rectangle] OP[assign]
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.tree.DefaultMutableTreeNode,add,1,void] PARA[VAR[javax.swing.tree.DefaultMutableTreeNode]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  OP[assign] VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.awt.Point,equals,1,boolean] PARA[VAR[java.awt.Point]] +++$+++  OP[bitwiseAnd] LEX[false] OP[assign] OP[assign]
CALL[java.awt.Graphics,setColor,1,void] PARA[CALL[javax.swing.JComponent,getForeground]] +++$+++  LEX[g.getColor] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[fi.setIsItalic] PARENTHESESSTART
CALL[javax.swing.JInternalFrame,setIcon,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.Component,getParent,0,java.awt.Container] +++$+++  PARENTHESESEND EOL VAR[java.awt.Component] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Throwable,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[java.awt.event.ActionListener] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[java.awt.event.ActionListener] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setIcon,1,void] PARA[VAR[javax.swing.ImageIcon]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  PARENTHESESSTART LEX[s_stringMgr.getString] PARENTHESESSTART COMMA
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Point,equals,1,boolean] PARA[VAR[java.awt.Point]] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[javax.swing.JButton,doClick,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  CURLYSTART VAR[INT] OP[assign] EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESEND OP[sub] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.concurrent.Future,get,0,V] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JCheckBox]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART LEX[i18n.REMOVE_ML_COMMENT_LABEL_TT] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics,fillRect,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createEtchedBorder]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  TYPE[ButtonGroup] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JComboBox]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  TYPE[JComboBox] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART LEX[FormatSqlPanel.KeywordBehaviour] PARENTHESESEND
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[proxySettings.setSocksProxyServer] PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JPasswordField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  OP[sum] OP[sum] FIELD[gridy,java.awt.GridBagConstraints] EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JTextField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  OP[sum] OP[sum] FIELD[gridy,java.awt.GridBagConstraints] EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JCheckBox]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JTabbedPane,getTabCount,0,int] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.awt.Rectangle,contains,1,boolean] PARA[VAR[java.awt.Point]] +++$+++  OP[sub] FIELD[height,java.awt.Rectangle] IF PARENTHESESSTART
CALL[javax.swing.JTabbedPane,getTabCount,0,int] +++$+++  VAR[java.awt.Rectangle] OP[assign] LEX[tabbedPane.getBoundsAt] PARENTHESESSTART
CALL[javax.swing.JTabbedPane,getTabPlacement,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.datatransfer.Transferable,getTransferDataFlavors,0,java.awt.datatransfer.DataFlavor[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.awt.datatransfer.DataFlavor] OP[assign]
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenu]] +++$+++  CASE LEX[IMenuIDs.PLUGINS_MENU] OP[ternaryFalse] CURLYSTART
CALL[javax.swing.JMenu,add,1,java.awt.Component] PARA[VAR[java.awt.Component]] +++$+++  CASE LEX[IMenuIDs.PLUGINS_MENU] OP[ternaryFalse] CURLYSTART
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART LEX[false] OP[assign] OP[assign]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART LEX[Color.red] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,validate,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBackground,1,void] PARA[VAR[java.awt.Color]] +++$+++  VAR[java.awt.Color] OP[assign] VAR[java.awt.Color] EOL
CALL[javax.swing.JPanel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JLabel,setIcon,1,void] PARA[VAR[javax.swing.Icon]] +++$+++  LEX[Icon] VAR[javax.swing.Icon] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL LEX[ret.setSelectionEnd] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART OP[greaterThan] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  FOR PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.event.ActionEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] VAR[java.awt.event.ActionEvent] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JCheckBox,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.SortedSet,toArray,0,java.lang.Object[]] +++$+++  EOL CURLYEND LEX[useColsList.setListData] PARENTHESESSTART
CALL[javax.swing.JList,getModel,0,javax.swing.ListModel<E>] +++$+++  EOL TYPE[ListModel] VAR[javax.swing.ListModel] OP[assign]
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND WHILE PARENTHESESSTART
CALL[javax.swing.MutableComboBoxModel,getSize,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.MutableComboBoxModel,removeListDataListener,1,void] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTabbedPane,getComponentAt,1,java.awt.Component] PARA[VAR[java.lang.Integer]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[_lazyResultTabControllerFactory.isMatchingPanel] PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[Action] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[javax.swing.JPopupMenu,show,3,void] PARA[CALL[java.awt.event.MouseEvent,getComponent]] PARA[CALL[java.awt.event.MouseEvent,getX]] PARA[CALL[java.awt.event.MouseEvent,getY]] +++$+++  VAR[javax.swing.JButton] OP[assign] VAR[javax.swing.JButton] EOL
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.text.JTextComponent,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.lang.management.ThreadInfo,getThreadId,0,long] +++$+++  EOL LEX[pw.println] PARENTHESESSTART OP[sum]
CALL[java.lang.management.ThreadInfo,getThreadState,0,java.lang.Thread.State] +++$+++  EOL LEX[pw.println] PARENTHESESSTART OP[sum]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESEND PARENTHESESEND EOL
CALL[java.net.DatagramSocket,close,0,void] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[UnknownHostException] CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.util.prefs.Preferences,put,2,void] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.util.prefs.Preferences,putBoolean,2,void] PARA[LIT[Stirng]] PARA[VAR[BOOLEAN]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[newList.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,concat,1,java.lang.String] PARA[CALL[java.lang.String,substring]] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[original.substring] PARENTHESESSTART COMMA
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getSimpleName,0,java.lang.String] +++$+++  VAR[java.lang.Class] PARENTHESESEND CURLYSTART RETURN
CALL[org.python.modules._threading.Mutex.Sync,hasQueuedThreads,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.concurrent.TimeUnit,toNanos,1,long] PARA[VAR[LONG]] +++$+++  RETURN LEX[sync.tryAcquireNanos] PARENTHESESSTART COMMA
CALL[java.util.List,isEmpty,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.HashSet,clear,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  RETURN NEW TYPE[PyString] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  COMMA PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[sub] VAR[CHAR] OP[greaterThan] PARENTHESESEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  RETURN NEW TYPE[PyString] PARENTHESESSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[name.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  EOL CURLYEND LEX[buf.position] PARENTHESESSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[org.python.util.Generic.set(U...).U]] +++$+++  OP[ternaryFalse] VAR[org.python.util.Generic.set(U...).U] PARENTHESESEND CURLYSTART
CALL[java.lang.Long,longValue,0,long] +++$+++  VAR[LONG] EOL CURLYEND RETURN
CALL[org.python.core.ParserFacade.ExpectedEncodingBufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.Class,getClassLoader,0,java.lang.ClassLoader] +++$+++  CURLYSTART TYPE[ClassLoader] VAR[java.lang.ClassLoader] OP[assign]
CALL[java.util.ArrayList,add,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[assign] VAR[INT] OP[sum] EOL
CALL[java.lang.String,length,0,int] +++$+++  RETURN LEX[s.codePointCount] PARENTHESESSTART COMMA
CALL[java.util.Collection,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.io.File,getName,0,java.lang.String] +++$+++  OP[assign] LEX[filename.regionMatches] PARENTHESESSTART COMMA
CALL[java.util.List,add,1,boolean] PARA[FIELD[org.python.core.JavaProxyList.KV]] +++$+++  OP[ternaryFalse] VAR[java.util.ArrayList] PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  CURLYSTART VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.lang.reflect.Method,getModifiers,0,int] +++$+++  EOL RETURN LEX[Modifier.isStatic] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.File,isFile,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  TYPE[File] PARENTHESESSTART VAR[java.io.File] COMMA
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[className.substring] PARENTHESESSTART COMMA
CALL[java.io.BufferedReader,close,0,void] +++$+++  NULL PARENTHESESEND TRY CURLYSTART
CALL[java.io.PipedOutputStream,close,0,void] +++$+++  LEX[_questionReceiverStream.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] PARENTHESESEND OP[greaterThan] OP[assign]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.io.File,canWrite,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.pandoragames.util.i18n.LocalizableText]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[javax.swing.JTextArea,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[dataModel.setSearchStringContent] PARENTHESESSTART
CALL[javax.swing.JRadioButton,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] LEX[ItemEvent.SELECTED] PARENTHESESEND CURLYSTART
CALL[javax.swing.text.JTextComponent,setText,1,void] PARA[LIT[Stirng]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,getSelectedRowCount,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[javax.swing.JTable,getSelectedRow,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[javax.swing.plaf.basic.BasicComboBoxEditor,removeActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.io.File,equals,1,boolean] PARA[FIELD[net.pandoragames.far.ui.swing.dialog.FormListEntry]] +++$+++  FIELD[label,net.pandoragames.far.ui.swing.dialog.FormListEntry] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,hashCode,0,int] +++$+++  LEX[label.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.lang.Runnable] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[greaterThan] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  RETURN NULL EOL RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,mkdirs,0,boolean] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART OP[not]
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setPrintMatches] PARENTHESESSTART LEX[Boolean.parseBoolean] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.nio.charset.Charset]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  EOL CURLYEND LEX[normalizedNames.put] PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYSTART RETURN OP[not] PARENTHESESSTART
CALL[java.util.concurrent.ExecutionException,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESEND CURLYSTART LEX[Throwables.propagateIfInstanceOf] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[CHAR] PARENTHESESEND OP[sum]
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.awt.Graphics2D,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  COMMA VAR[java.util.Map] PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[sub]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[img.getHeight] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.awt.Dimension,getHeight,0,double] +++$+++  LEX[Math.max] PARENTHESESSTART VAR[DOUBLE] COMMA
CALL[java.awt.Dimension,getHeight,0,double] +++$+++  LEX[Math.max] PARENTHESESSTART VAR[DOUBLE] COMMA
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.List,get]] +++$+++  LEX[buff.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.math.BigDecimal]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[buff.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,trim]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  OP[assign] LEX[buff.substring] PARENTHESESSTART COMMA
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  PARENTHESESSTART LEX[String.CASE_INSENSITIVE_ORDER] PARENTHESESEND EOL
CALL[java.util.Map,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  ARRAYEND ARRAYSTART ARRAYEND OP[assign]
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  ARRAYEND ARRAYSTART ARRAYEND OP[assign]
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,flush,0,void] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.io.File,delete,0,boolean] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.zip.ZipInputStream,getNextEntry,0,java.util.zip.ZipEntry] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.util.zip.ZipEntry] OP[assign]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  OP[sum] EOL VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.geoserver.platform.Service]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,equals,1,boolean] PARA[FIELD[org.geoserver.platform.Service]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.ClassNotFoundException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  EOL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.Boolean] OP[assign] LEX[Converters.convert] PARENTHESESSTART
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  LEX[entry.getKey] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN LEX[filterFactory.literal] PARENTHESESSTART
CALL[java.io.InputStream,read,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Map,clear,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.Reader,mark,1,void] PARA[VAR[INT]] +++$+++  VAR[java.io.Reader] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[CALL[java.util.Map.Entry,getKey]] PARA[CALL[java.util.Map.Entry,getValue]] +++$+++  PARENTHESESEND PARENTHESESEND EOL ELSE
CALL[java.lang.Double,equals,1,boolean] PARA[VAR[java.lang.Double]] +++$+++  VAR[java.lang.Object] EOL IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  FINAL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Iterator,remove,0,void] +++$+++  VAR[java.util.Date] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  OP[greaterThan] VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.util.Map,clear,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.Number,doubleValue,0,double] +++$+++  LEX[Math.abs] PARENTHESESSTART VAR[DOUBLE] OP[sub]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.concurrent.ScheduledExecutorService,shutdownNow,0,java.util.List<java.lang.Runnable>] +++$+++  LEX[shutdown] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Integer,equals,1,boolean] PARA[VAR[java.lang.Integer]] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[buf.append] PARENTHESESSTART
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  EOL CURLYEND VAR[java.lang.Throwable] OP[assign]
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.xml.namespace.QName]] +++$+++  COMMA PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[ternaryTrue] LEX[casUrlPrefix.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.net.URLConnection,setRequestProperty,2,void] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  INSTANCEOF TYPE[HttpURLConnection] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,subSequence,2,java.lang.CharSequence] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  TRY CURLYSTART LEX[writer.write] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[CALL[org.vfny.geoserver.Request,getService]] +++$+++  OP[assign] NULL PARENTHESESEND OP[ternaryFalse]
CALL[java.io.Reader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[DOUBLE]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[Boolean] PARENTHESESEND
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA LEX[false] PARENTHESESEND EOL
CALL[java.lang.reflect.Method,invoke,2,java.lang.Object] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  THROWS LEX[Throwable] CURLYSTART RETURN
CALL[java.io.ByteArrayOutputStream,toString,0,java.lang.String] +++$+++  VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL RETURN
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.logging.Logger,warning,1,void] PARA[LIT[Stirng]] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Class]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.Class] PARENTHESESEND EOL
CALL[java.util.logging.Logger,isLoggable,1,boolean] PARA[VAR[java.util.logging.Level]] +++$+++  CURLYSTART IF PARENTHESESSTART PARENTHESESSTART
CALL[java.util.logging.Level,intValue,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[lessThan] OP[assign]
CALL[java.io.BufferedOutputStream,close,0,void] +++$+++  LEX[out.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[ternaryFalse] VAR[java.util.Set] PARENTHESESEND CURLYSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,addAll,1,boolean] PARA[CALL[java.util.Map,keySet]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.nio.charset.Charset,encode,1,java.nio.ByteBuffer] PARA[CALL[null,wrap]] +++$+++  CURLYSTART TYPE[ByteBuffer] VAR[java.nio.ByteBuffer] OP[assign]
CALL[java.nio.charset.Charset,decode,1,java.nio.CharBuffer] PARA[CALL[null,wrap]] +++$+++  CURLYSTART TYPE[CharBuffer] VAR[java.nio.CharBuffer] OP[assign]
CALL[java.nio.CharBuffer,limit,0,int] +++$+++  OP[assign] NEW CHAR ARRAYSTART
CALL[java.lang.ThreadLocal,set,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.ThreadLocal,remove,0,void] +++$+++  LEX[abort] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[provided.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.zip.ZipInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.TreeSet,add,1,boolean] PARA[VAR[java.util.Date]] +++$+++  TYPE[Date] PARENTHESESEND VAR[java.lang.Object] EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
