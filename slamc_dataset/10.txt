CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  PARENTHESESSTART VAR[java.util.Date] PARENTHESESEND EOL
CALL[be.mxs.common.util.date.MedwanCalendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[MedwanCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[be.mxs.common.util.date.MedwanCalendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND EOL VAR[java.util.Date] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.sql.SQLException,printStackTrace,0,void] +++$+++  TYPE[SQLException] VAR[java.sql.SQLException] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  LEX[values.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isLowerCase] PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL VAR[BYTE] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  PARENTHESESEND COMMA LEX[Math.max] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[im1.getHeight] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND RETURN PARENTHESESSTART
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  COMMA LEX[BufferedImage.TYPE_INT_RGB] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[XWPFRun] PARENTHESESEND
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.FileInputStream]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.File,isFile,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[grantTables.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  DOUBLE ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.SortedSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[departmentIncome] EOL WHILE PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[departmentIncome] EOL WHILE PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[OutcomeStat] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  DOUBLE ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[greaterThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.sql.SQLException,printStackTrace,0,void] +++$+++  TYPE[SQLException] VAR[java.sql.SQLException] PARENTHESESEND CURLYSTART
CALL[java.io.File,mkdirs,0,boolean] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,mkdirs,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[sUDI.substring] PARENTHESESSTART COMMA
CALL[java.util.Hashtable,put,2,V] PARA[CALL[org.hnrw.report.Report_RFE.RFE,getEncounterUid]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[RFE] PARENTHESESEND
CALL[java.util.Hashtable,size,0,int] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Diagnosis] PARENTHESESEND
CALL[java.io.Writer,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalGlue]] +++$+++  LEX[BoxLayout.X_AXIS] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[DOUBLE] ELSE IF PARENTHESESSTART
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  LEX[theMap.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.awt.geom.Rectangle2D,getCenterX,0,double] +++$+++  RETURN NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  RETURN NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  RETURN NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  OP[sum] LEX[b.getX] PARENTHESESSTART PARENTHESESEND
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  EOL DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Integer] OP[assign]
CALL[javax.swing.JSplitPane,setDividerLocation,1,void] PARA[LIT[Double]] +++$+++  LEX[result.setDividerSize] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JComponent]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.awt.geom.Rectangle2D,getMinX,0,double] +++$+++  LEX[canvas.getMinX] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.awt.geom.Rectangle2D,getWidth,0,double] +++$+++  PARENTHESESEND COMMA VAR[DOUBLE] OP[assign]
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  PARENTHESESEND COMMA VAR[DOUBLE] OP[assign]
CALL[javax.swing.JSpinner,addChangeListener,1,void] PARA[VAR[genj.tree.TreeViewSettings.Commit]] +++$+++  LEX[result.addChangeListener] PARENTHESESSTART VAR[genj.tree.TreeViewSettings.Commit] PARENTHESESEND
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  PARENTHESESSTART VAR[java.util.Collection] PARENTHESESEND EOL
CALL[java.awt.geom.Rectangle2D,getMinX,0,double] +++$+++  PARENTHESESEND CURLYSTART LEX[r.setRect] PARENTHESESSTART
CALL[java.awt.Component,getParent,0,java.awt.Container] +++$+++  CURLYSTART TYPE[Component] VAR[java.awt.Component] OP[assign]
CALL[java.awt.Graphics2D,getClip,0,java.awt.Shape] +++$+++  CURLYEND TYPE[Shape] VAR[java.awt.Shape] OP[assign]
CALL[java.awt.FontMetrics,getStringBounds,2,java.awt.geom.Rectangle2D] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Graphics2D]] +++$+++  EOL TYPE[Rectangle2D] VAR[java.awt.geom.Rectangle2D] OP[assign]
CALL[java.awt.geom.Rectangle2D,getWidth,0,double] +++$+++  OP[assign] PARENTHESESSTART LEX[float] PARENTHESESEND
CALL[javax.swing.JPopupMenu,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[cancelPopup] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Container,getHeight,0,int] +++$+++  PARENTHESESEND OP[sub] LEX[insets.left-insets.right] COMMA
CALL[javax.swing.JList,removeMouseListener,1,void] PARA[VAR[java.awt.event.MouseListener]] +++$+++  LEX[MouseListener] VAR[java.awt.event.MouseListener] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseOr] OP[bitwiseOr] VAR[INT] OP[greaterThan]
CALL[javax.swing.ComboBoxEditor,selectAll,0,void] +++$+++  LEX[selectAll] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.ComboBoxEditor,getEditorComponent,0,java.awt.Component] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,newInstance,0,T] +++$+++  PARENTHESESSTART TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JComponent,removeMouseMotionListener,1,void] PARA[VAR[java.awt.event.MouseMotionListener]] +++$+++  LEX[MouseMotionListener] VAR[java.awt.event.MouseMotionListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,getPreferredSize,0,java.awt.Dimension] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,getTransform,0,java.awt.geom.AffineTransform] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART DEFAULT
CALL[java.util.Properties,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND PARENTHESESEND
CALL[java.util.Properties,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL ELSE
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[assign]
CALL[java.util.List,clear,0,void] +++$+++  LEX[removeAllChangeListeners] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.event.ChangeListener,stateChanged,1,void] PARA[VAR[javax.swing.event.ChangeEvent]] +++$+++  VAR[javax.swing.event.ChangeListener] OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] COMMA VAR[INT] OP[assign]
CALL[java.awt.geom.Dimension2D,getWidth,0,double] +++$+++  INT PARENTHESESEND LEX[Math.ceil] PARENTHESESSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[genj.util.DefaultValueMap.Key]] PARA[VAR[genj.util.DefaultValueMap.Value]] +++$+++  VAR[genj.util.DefaultValueMap.Value] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND PARENTHESESEND
CALL[java.io.BufferedReader,close,0,void] +++$+++  EOL LEX[bout.close] PARENTHESESSTART PARENTHESESEND
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  OP[not] OP[assign] LEX[ItemEvent.SELECTED] PARENTHESESEND
CALL[javax.swing.JFileChooser,showDialog,2,int] PARA[VAR[java.awt.Component]] PARA[VAR[java.lang.String]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[genj.gedcom.Property]] +++$+++  OP[assign] OP[assign] NULL PARENTHESESEND
CALL[java.util.List,isEmpty,0,boolean] +++$+++  VAR[BOOLEAN] OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] NULL PARENTHESESEND
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND CURLYEND RETURN
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA LEX[model.createResource] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.net.Socket,setSoTimeout,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.net.Socket,getOutputStream,0,java.io.OutputStream] +++$+++  PARENTHESESEND EOL LEX[IPCHelper.write] PARENTHESESSTART
CALL[java.net.Socket,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,getProperty]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  RETURN LEX[false] EOL RETURN
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.prefs.Preferences,exportSubtree,1,void] PARA[VAR[java.io.OutputStream]] +++$+++  VAR[java.io.File] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JTree,getFontMetrics,1,java.awt.FontMetrics] PARA[CALL[javax.swing.JTree,getFont]] +++$+++  CURLYSTART TYPE[FontMetrics] VAR[java.awt.FontMetrics] OP[assign]
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[java.awt.Component]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  LEX[Box.createVerticalStrut] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[sub] OP[greaterThan] CURLYSTART
CALL[javax.swing.JButton,setMinimumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.Timer,stop,0,void] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[JabRefDesktop.openExternalFileAnyFormat] PARENTHESESSTART LEX[databaseContext] COMMA
CALL[javax.swing.JButton,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.event.MouseEvent,getComponent,0,java.awt.Component] +++$+++  PARENTHESESEND CURLYSTART LEX[popup.show] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART LEX[Math.max] PARENTHESESSTART COMMA
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[TMarkedStoreItem] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[javax.swing.text.StyledDocument,setCharacterAttributes,4,void] PARA[CALL[net.sf.jabref.gui.plaintextimport.TagToMarkedTextStore.TMarkedStoreItem,getStart]] PARA[CALL[net.sf.jabref.gui.plaintextimport.TagToMarkedTextStore.TMarkedStoreItem,getLength]] PARA[CALL[javax.swing.text.StyledDocument,getStyle]] PARA[LIT[Boolean]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JList,setSelectedIndex,1,void] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  INSTANCEOF TYPE[JTextComponent] PARENTHESESEND CURLYSTART
CALL[java.awt.datatransfer.DataFlavor,getHumanPresentableName,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.debug] PARENTHESESSTART OP[sum]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[CreationException] PARENTHESESSTART
CALL[java.awt.CardLayout,show,2,void] PARA[VAR[javax.swing.JPanel]] PARA[CALL[null,valueOf]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.StringBuilder,delete,2,java.lang.StringBuilder] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Color,getRed,0,int] +++$+++  LEX[one.getRed] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[Thread.MIN_PRIORITY] PARENTHESESEND EOL
CALL[java.net.URI,getScheme,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[URI] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[assign] OP[assign]
CALL[java.nio.file.Path,getFileName,0,java.nio.file.Path] +++$+++  CURLYSTART TYPE[Path] VAR[java.nio.file.Path] OP[assign]
CALL[java.nio.file.Path,resolveSibling,1,java.nio.file.Path] PARA[VAR[java.lang.String]] +++$+++  LEX[Files.move] PARENTHESESSTART VAR[java.nio.file.Path] COMMA
CALL[java.io.PushbackReader,unread,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[null,singletonList]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.io.ByteArrayOutputStream,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.io.File,toPath,0,java.nio.file.Path] +++$+++  PARENTHESESSTART OP[not] LEX[FileBasedLock.waitForFileLock] PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[parts.add] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND LEX[parts.add] PARENTHESESSTART
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,toUpperCase]] +++$+++  EOL CASE VAR[net.sf.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE] OP[ternaryFalse]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Boolean] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Boolean] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.util.Set,add,1,boolean] PARA[VAR[net.sf.jabref.model.entry.BibtexSingleField.Flag]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.List,get]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[CALL[java.util.Map.Entry,getKey]] PARA[CALL[java.util.Map.Entry,getValue]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  CURLYSTART RETURN LEX[Arrays.asList] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[result.add] PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESSTART LEX[Arrays.asList] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.FontMetrics,getHeight,0,int] +++$+++  OP[assign] PARENTHESESSTART FIELD[height,java.awt.Rectangle] OP[sub]
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  LEX[ChangeListener] VAR[javax.swing.event.ChangeListener] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  VAR[INT] OP[assign] LEX[columnModel.getColumnIndexAtX] PARENTHESESSTART
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[weka.gui.explorer.Explorer.CapabilitiesFilterChangeListener]] +++$+++  LEX[CapabilitiesFilterChangeListener] VAR[weka.gui.explorer.Explorer.CapabilitiesFilterChangeListener] PARENTHESESEND CURLYSTART
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Container,getParent,0,java.awt.Container] +++$+++  ELSE CURLYSTART VAR[java.awt.Container] OP[assign]
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[java.awt.Container]] +++$+++  LEX[Container] VAR[java.awt.Container] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,addElement,1,void] PARA[VAR[java.lang.String]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[javax.swing.JRadioButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[m_Exp] PARENTHESESEND EOL
CALL[javax.swing.JRadioButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JComboBox,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,removeAllElements,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,addElement,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[StringBuffer] VAR[java.lang.StringBuffer] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.StringBuffer]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Hashtable,clear,0,void] +++$+++  LEX[clearResults] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.DefaultListModel,elementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART TYPE[String] PARENTHESESEND PARENTHESESSTART
CALL[javax.swing.DefaultListModel,elementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART TYPE[String] PARENTHESESEND PARENTHESESSTART
CALL[java.util.Vector,addElement,1,void] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  LEX[tk.hasMoreTokens] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[javax.swing.JPanel,repaint,0,void] +++$+++  VAR[INT] OP[assign] VAR[INT] EOL
CALL[weka.gui.boundaryvisualizer.BoundaryPanel.PlotPanel,getGraphics,0,java.awt.Graphics] +++$+++  CURLYSTART TYPE[Graphics] VAR[java.awt.Graphics] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] OP[assign] LEX[classifierName.substring] PARENTHESESSTART
CALL[java.util.Vector,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.Vector,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.io.StreamTokenizer,ordinaryChar,1,void] PARA[LIT[Character]] +++$+++  OP[sum] COMMA PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,ordinaryChar,1,void] PARA[LIT[Character]] +++$+++  LEX[m_st.ordinaryChar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,ordinaryChar,1,void] PARA[LIT[Character]] +++$+++  LEX[m_st.ordinaryChar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,slashSlashComments,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYEND CURLYEND LEX[m_lines.addElement] PARENTHESESSTART
CALL[java.util.Vector,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[Edge] PARENTHESESEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[m_lines.addElement] PARENTHESESSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART OP[not] LEX[set.contains] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JList,setSelectedIndex,1,void] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.JList,setSelectedIndices,1,void] PARA[VAR[INT]] +++$+++  ARRAYEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[java.awt.CardLayout,show,2,void] PARA[VAR[javax.swing.JPanel]] PARA[VAR[java.lang.String]] +++$+++  LEX[ActionEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,addRenderingHints,1,void] PARA[VAR[java.util.Map]] +++$+++  LEX[Map] VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawGlyphVector,3,void] PARA[VAR[java.awt.font.GlyphVector]] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  LEX[float] VAR[FLOAT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawLine,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawPolyline,3,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawString,3,void] PARA[VAR[java.text.AttributedCharacterIterator]] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  LEX[float] VAR[FLOAT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawString,3,void] PARA[VAR[java.text.AttributedCharacterIterator]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,getFontMetrics,1,java.awt.FontMetrics] PARA[VAR[java.awt.Font]] +++$+++  VAR[java.awt.Font] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,hit,3,boolean] PARA[VAR[java.awt.Rectangle]] PARA[VAR[java.awt.Shape]] PARA[VAR[BOOLEAN]] +++$+++  VAR[BOOLEAN] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,translate,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  TYPE[ButtonGroup] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART LEX[formatter.applyPattern] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[KeepClassSpecification] ARRAYSTART
CALL[java.awt.Dimension,getWidth,0,double] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] LEX[ClassConstants.TYPE_LONG] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[externalClassName.lastIndexOf] PARENTHESESSTART LEX[JavaConstants.PACKAGE_SEPARATOR] COMMA
CALL[java.io.DataOutput,writeDouble,1,void] PARA[VAR[DOUBLE]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataInput,readFully,3,void] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataInput,readShort,0,short] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL EOL CURLYEND RETURN
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[CHAR]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.io.File,createNewFile,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,getBorder,0,javax.swing.border.Border] +++$+++  EOL CURLYEND LEX[result.setBorder] PARENTHESESSTART
CALL[javax.swing.DefaultCellEditor,addCellEditorListener,1,void] PARA[VAR[javax.swing.event.CellEditorListener]] +++$+++  LEX[CellEditorListener] VAR[javax.swing.event.CellEditorListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.AbstractButton,setBorderPainted,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.logging.Logger]] +++$+++  PARENTHESESSTART VAR[java.util.logging.Handler] PARENTHESESEND EOL
CALL[java.lang.SecurityException,printStackTrace,0,void] +++$+++  TYPE[SecurityException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,removeHandler,1,void] PARA[VAR[java.util.logging.Handler]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.logging.Logger,addHandler,1,void] PARA[VAR[java.util.logging.Handler]] +++$+++  PARENTHESESSTART VAR[java.util.logging.Handler] PARENTHESESEND EOL
CALL[java.util.logging.Handler,flush,0,void] +++$+++  LEX[close] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,getSelectedRow,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createRigidArea]] +++$+++  LEX[JPanel] VAR[javax.swing.JPanel] PARENTHESESEND CURLYSTART
CALL[javax.swing.SpringLayout,getConstraints,1,javax.swing.SpringLayout.Constraints] PARA[VAR[java.awt.Component]] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.util.concurrent.atomic.AtomicReference,set,1,void] PARA[VAR[java.lang.Runnable]] +++$+++  LEX[Runnable] VAR[java.lang.Runnable] PARENTHESESEND CURLYSTART
CALL[javax.swing.Box,add,1,java.awt.Component] PARA[CALL[null,createHorizontalStrut]] +++$+++  PARENTHESESSTART LEX[label] PARENTHESESEND EOL
CALL[javax.swing.Box,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JComponent]] +++$+++  LEX[myList.getActionsComponent] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  VAR[net.sourceforge.ganttproject.gui.zoom.ZoomManager.ZoomState] OP[assign] LEX[myZoomStates.get] PARENTHESESSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[biz.ganttproject.core.chart.canvas.Canvas.Text]] +++$+++  COMMA LEX[myTextIndex] PARENTHESESEND EOL
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Rectangle] VAR[biz.ganttproject.core.chart.canvas.Canvas.Text] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Style] VAR[biz.ganttproject.core.chart.render.Style] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  OP[sum] PARENTHESESEND EOL RETURN
CALL[java.util.Date,equals,1,boolean] PARA[FIELD[biz.ganttproject.core.chart.grid.Offset]] +++$+++  OP[assign] FIELD[myOffsetPixels,biz.ganttproject.core.chart.grid.Offset] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  NULL OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Collection,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.awt.Container,getComponentCount,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  FIELD[length,java.lang.String] OP[sub] PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[org.argouml.cognitive.ListSet.T]] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[org.argouml.application.events.ArgoEventPump.Pair]] +++$+++  OP[assign] LEX[listener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[CALL[null,valueOf]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[CALL[null,valueOf]] +++$+++  VAR[BOOLEAN] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.Action]] +++$+++  LEX[Event.CTRL_MASK] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  OP[assign] EOL CURLYEND RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Locale,equals,1,boolean] PARA[CALL[org.argouml.ui.MyLocale,getLocale]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[CALL[null,valueOf]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Rectangle,getY,0,double] +++$+++  PARENTHESESEND CURLYSTART VAR[DOUBLE] OP[assign]
CALL[java.awt.Point,getX,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.awt.Point,getX,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.event.FocusEvent,getSource,0,java.lang.Object] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[path.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  LEX[resetText] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  RETURN LEX[s.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,length,0,int] +++$+++  RETURN LEX[s.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[result.add] PARENTHESESSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[tfOcspUrl.setEnabled] PARENTHESESSTART
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  DO CURLYSTART VAR[INT] OP[assign]
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  ARRAYEND OP[assign] LEX[Float.parseFloat] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  ARRAYEND OP[assign] LEX[Float.parseFloat] PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,remove,1,boolean] PARA[VAR[jmemorize.util.RecentItems.RecentItemsObserver]] +++$+++  LEX[RecentItemsObserver] VAR[jmemorize.util.RecentItems.RecentItemsObserver] PARENTHESESEND CURLYSTART
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] OP[ternaryFalse] VAR[java.util.Set] PARENTHESESEND
CALL[javax.swing.ImageIcon,getDescription,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.JFrame,setSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.awt.Dimension,getHeight,0,double] +++$+++  OP[sum] PARENTHESESSTART INT PARENTHESESEND
CALL[javax.swing.ImageIcon,getIconWidth,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.text.AttributeSet,getAttribute,1,java.lang.Object] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Boolean] PARENTHESESEND
CALL[java.util.zip.ZipEntry,getName,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  EOL RETURN LEX[m_summaries.subList] PARENTHESESSTART
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  TYPE[SessionSummary] PARENTHESESEND LEX[m_summaries.get] PARENTHESESSTART
CALL[java.util.List,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[jmemorize.core.learn.LearnSettings.SchedulePreset,ordinal,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JTextPane,requestFocus,0,void] +++$+++  COMMA LEX[BorderLayout.CENTER] PARENTHESESEND EOL
CALL[javax.swing.JPanel,repaint,0,void] +++$+++  LEX[m_contentPanel.validate] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL EOL ASSERT OP[not]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  PARENTHESESSTART NEW LEX[Rectangle2D.Double] PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ZipEntry] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.Character]] +++$+++  VAR[java.lang.Character] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[text.substring] PARENTHESESSTART
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ProgressChangeListener] PARENTHESESEND
CALL[java.io.OutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,delete,0,boolean] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuffer,delete,2,java.lang.StringBuffer] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[sum] OP[assign] EOL CURLYEND
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.awt.Graphics2D,draw,1,void] PARA[VAR[java.awt.geom.Ellipse2D.Double]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridx,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  RETURN NEW TYPE[File] PARENTHESESSTART
CALL[javax.swing.JFileChooser,setApproveButtonText,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[localeTools.getMessage] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JButton,setActionCommand,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[sum] VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESSTART LEX[KeyEvent.VK_T] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[UIStates.EMPTY] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  VAR[BOOLEAN] OP[assign] LEX[baseFilter.accept] PARENTHESESSTART
CALL[javax.swing.ListSelectionModel,getMaxSelectionIndex,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ListSelectionModel,getMaxSelectionIndex,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ListSelectionModel,isSelectedIndex,1,boolean] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ListSelectionModel,removeListSelectionListener,1,void] PARA[VAR[javax.swing.event.ListSelectionListener]] +++$+++  OP[not] OP[assign] NULL EOL
CALL[javax.swing.JCheckBox,addActionListener,1,void] PARA[THIS[null]] +++$+++  OP[sum] VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JFormattedTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JList,getSelectedIndex,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[LIT[Integer]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JLabel,setText,1,void] PARA[LIT[Stirng]] +++$+++  LEX[setMoveOperation] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  COMMA PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[listener.all] PARENTHESESSTART
CALL[javax.swing.JMenuItem,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.Graphics,drawString,3,void] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  LEX[ogf.triggerShow] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.MenuItem,addActionListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.CheckboxMenuItem,addItemListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART INT VAR[INT] OP[assign]
CALL[java.awt.Checkbox,setState,1,void] PARA[LIT[Boolean]] +++$+++  LEX[stopElm] OP[assign] LEX[ce] EOL
CALL[java.awt.Scrollbar,getValue,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Vector,size,0,int] +++$+++  PARENTHESESEND EOL LEX[undoItem.setEnabled] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  VAR[java.lang.Class] PARENTHESESEND EOL RETURN
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Double]] +++$+++  OP[assign] VAR[java.lang.String] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Double,longValue,0,long] +++$+++  RETURN NEW TYPE[Long] PARENTHESESSTART
CALL[java.lang.Double,doubleValue,0,double] +++$+++  RETURN NEW TYPE[Boolean] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Calendar,setTimeInMillis,1,void] PARA[VAR[LONG]] +++$+++  LEX[DateTime.calendarInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.GregorianCalendar,getTimeInMillis,0,long] +++$+++  COMMA PARENTHESESEND EOL RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[list.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,listIterator,1,java.util.ListIterator<E>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.concurrent.locks.Lock,unlock,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.util.ResourceBundle,getKeys,0,java.util.Enumeration<java.lang.String>] +++$+++  PARENTHESESSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.Object,notify,0,void] +++$+++  LEX[criticalSectionOwner] OP[assign] NULL EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND PARENTHESESEND LEX[toRemove.add] PARENTHESESSTART
CALL[java.util.Collection,add,1,boolean] PARA[CALL[java.util.Iterator,next]] +++$+++  LEX[i.hasNext] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  LEX[Collection] VAR[java.util.Collection] PARENTHESESEND CURLYSTART
CALL[java.io.ObjectInputStream,readLong,0,long] +++$+++  PARENTHESESEND EOL LEX[t.setFinish] PARENTHESESSTART
CALL[java.util.Iterator,remove,0,void] +++$+++  OP[assign] LEX[task] PARENTHESESEND CURLYSTART
CALL[java.util.Calendar,setTimeInMillis,1,void] PARA[LIT[Integer]] +++$+++  LEX[DateTime.calendarInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.awt.BasicStroke]] +++$+++  LEX[initialize] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.ListIterator,previousIndex,0,int] +++$+++  LEX[true] EOL VAR[INT] OP[assign]
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  OP[greaterThan] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[FormulaClass] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  FIELD[length,java.lang.Object] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  ARRAYEND PARENTHESESEND EOL CURLYEND
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  RETURN PARENTHESESSTART TYPE[Node] PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  LEX[st.hasMoreTokens] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[javax.swing.filechooser.FileFilter,accept,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Date,before,1,boolean] PARA[VAR[java.util.Date]] +++$+++  VAR[java.util.Date] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Calendar,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Calendar,clear,0,void] +++$+++  OP[assign] OP[sum] VAR[INT] EOL
CALL[java.util.Calendar,add,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[Calendar] VAR[java.util.Calendar] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[BOOLEAN]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  CURLYEND CASE OP[ternaryFalse] CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  EOL CURLYEND CURLYEND CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.io.OutputStreamWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[m_writer.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND RETURN PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Integer]] PARA[VAR[java.lang.String]] +++$+++  LEX[row.getString] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,length,0,int] +++$+++  VAR[java.lang.StringBuilder] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Integer]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[sum] VAR[INT] EOL CURLYEND
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[gc] PARENTHESESEND EOL CURLYEND
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[gi] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[CHAR] PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[null,valueOf]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.text.DecimalFormat,format]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[true] EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[net.sf.mpxj.mpp.FieldMap.FieldItem]] +++$+++  LEX[pw.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[BYTE]] +++$+++  OP[sum] OP[assign] EOL CURLYEND
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.Integer]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.util.ArrayList,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND CURLYEND CURLYEND
CALL[java.util.Calendar,add,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.event.EventListenerList,getListenerList,0,java.lang.Object[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[javax.swing.JComponent,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  BOOLEAN LEX[hasFocus] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableCellEditor,removeCellEditorListener,1,void] PARA[VAR[javax.swing.event.CellEditorListener]] +++$+++  LEX[CellEditorListener] VAR[javax.swing.event.CellEditorListener] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[edgeEvents.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,clear,0,void] +++$+++  LEX[resetForms] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JViewport,setViewPosition,1,void] PARA[VAR[java.awt.Point]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JFormattedTextField,setValue,1,void] PARA[VAR[DOUBLE]] +++$+++  VAR[DOUBLE] ARRAYSTART ARRAYEND EOL
CALL[javax.swing.JFormattedTextField,setValue,1,void] PARA[VAR[DOUBLE]] +++$+++  PARENTHESESSTART VAR[DOUBLE] PARENTHESESEND EOL
CALL[org.pushingpixels.flamingo.api.common.RichToolTipManager.JTrackableComponent,removeMouseListener,1,void] PARA[THIS[null]] +++$+++  LEX[JTrackableComponent] VAR[org.pushingpixels.flamingo.api.common.RichToolTipManager.JTrackableComponent] PARENTHESESEND CURLYSTART
CALL[java.awt.Font,getSize,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[multiply] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getColorModel,0,java.awt.image.ColorModel] +++$+++  PARENTHESESEND CURLYSTART VAR[java.awt.image.ColorModel] OP[assign]
CALL[javax.swing.AbstractButton,putClientProperty,2,void] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART NULL PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.AbstractButton]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getGraphics,0,java.awt.Graphics] +++$+++  PARENTHESESEND EOL LEX[renderer.paint] PARENTHESESSTART
CALL[java.awt.event.FocusEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[AbstractCommandButton] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  LEX[Math.floor] PARENTHESESSTART LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  LEX[Math.floor] PARENTHESESSTART LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.awt.Graphics,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.awt.Point,getX,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.io.DataInputStream,readLine,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.awt.event.ActionEvent,getSource,0,java.lang.Object] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Vector,elements,0,java.util.Enumeration<E>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[Thread.MIN_PRIORITY] PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[CALL[java.util.ResourceBundle,getString]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  LEX[out.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  STRING LEX[line] PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL IF PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[assign] LEX[file.substring] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,lastIndexOf]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,lastIndexOf]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[javax.swing.table.TableColumn,setPreferredWidth,1,void] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,setDialogTitle,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JTextField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[weightx,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  PARENTHESESSTART VAR[javax.swing.JLabel] PARENTHESESEND EOL
CALL[javax.swing.JList,getSelectedIndex,0,int] +++$+++  TYPE[FtpHost] PARENTHESESEND LEX[hostListModel.elementAt] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  EOL CURLYEND LEX[selectedHostInfo.hostname] OP[assign]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[selectedHostInfo.username] OP[assign]
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[in.substring] PARENTHESESSTART COMMA
CALL[javax.swing.JProgressBar,setString,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JTextField,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.ExecutorService,shutdownNow,0,java.util.List<java.lang.Runnable>] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Graphics,getFontMetrics,0,java.awt.FontMetrics] +++$+++  EOL TYPE[FontMetrics] VAR[java.awt.FontMetrics] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.util.logging.Logger,warning,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.util.concurrent.atomic.AtomicInteger,incrementAndGet,0,int] +++$+++  OP[assign] VAR[java.lang.String] OP[sum] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[i.hasNext] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.Iterator,next]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Class]] +++$+++  LEX[Class] VAR[java.lang.Class] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART OP[sum] LEX[s.substring] PARENTHESESSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[Error] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] COMMA
CALL[java.util.Collection,size,0,int] +++$+++  OP[assign] VAR[DOUBLE] VAR[DOUBLE] OP[assign]
CALL[java.io.File,listFiles,0,java.io.File[]] +++$+++  PARENTHESESSTART TYPE[File] VAR[java.io.File] OP[ternaryFalse]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  EOL BREAK EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Stack,isEmpty,0,boolean] +++$+++  EOL WHILE PARENTHESESSTART OP[not]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[result.put] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[CALL[java.lang.String,substring]] PARA[CALL[java.lang.String,substring]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[net.sf.freecol.tools.FlagTest,pack,0,void] +++$+++  TYPE[FlagTest] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.logging.Logger,info,1,void] PARA[LIT[Stirng]] +++$+++  TYPE[ClientOptions] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Graphics2D,getComposite,0,java.awt.Composite] +++$+++  EOL TYPE[Composite] VAR[java.awt.Composite] OP[assign]
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESSTART VAR[java.awt.Composite] PARENTHESESEND EOL
CALL[javax.swing.AbstractButton,getSize,0,java.awt.Dimension] +++$+++  EOL TYPE[Dimension] VAR[java.awt.Dimension] OP[assign]
CALL[javax.swing.JComponent,getHeight,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.Graphics2D,setPaint,1,void] PARA[VAR[java.awt.TexturePaint]] +++$+++  COMMA VAR[java.awt.Rectangle] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.lang.Runnable,run,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  OP[assign] PARENTHESESSTART VAR[INT] OP[sub]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  PARENTHESESEND PARENTHESESSTART VAR[INT] OP[sub]
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getScaleInstance]] +++$+++  OP[assign] LEX[Decoration.BEND] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getTranslateInstance]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[sub] VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  VAR[DOUBLE] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.text.StyleContext,getStyle,1,javax.swing.text.Style] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL LEX[textPane.setLogicalStyle] PARENTHESESSTART
CALL[javax.swing.JTextPane,setLogicalStyle,1,void] PARA[CALL[javax.swing.text.StyleContext,getStyle]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.appendToMapList(java.util.Map<K, java.util.List<T>>, K, T).T]] +++$+++  VAR[net.sf.freecol.common.util.CollectionUtils.appendToMapList(java.util.Map<K, java.util.List<T>>, K, T).T] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND OP[ternaryTrue]
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  OP[assign] NEW TYPE[StringTokenizer] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  ARRAYEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[Integer.parseInt] PARENTHESESSTART LEX[uid.substring] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[net.sf.freecol.common.model.TypeCountMap.T]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[net.sf.freecol.common.model.TypeCountMap.T]] +++$+++  VAR[net.sf.freecol.common.model.TypeCountMap.T] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[Change] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.jar.JarFile,getInputStream,1,java.io.InputStream] PARA[VAR[java.util.zip.ZipEntry]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND LEX[logger.info] PARENTHESESSTART
CALL[java.util.Properties,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[JLabel] PARENTHESESSTART
CALL[javax.swing.JComponent,setOpaque,1,void] PARA[VAR[BOOLEAN]] +++$+++  VAR[BOOLEAN] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JTree,setSelectionRow,1,void] PARA[LIT[Integer]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.IllegalAccessException,getMessage,0,java.lang.String] +++$+++  LEX[Logger.info] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.reflect.InvocationTargetException,getMessage,0,java.lang.String] +++$+++  LEX[Logger.info] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.reflect.InvocationTargetException,getMessage,0,java.lang.String] +++$+++  LEX[Logger.info] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.awt.event.MouseEvent,isControlDown,0,boolean] +++$+++  VAR[java.awt.event.MouseEvent] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JTextField,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,exists,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[response.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.reflect.Method,getName,0,java.lang.String] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[proxySignature.equals] PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[INT] EOL VAR[INT] OP[assign]
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[Logger.error] PARENTHESESSTART
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  PARENTHESESEND CURLYSTART LEX[desktop.openURL] PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.util.zip.GZIPOutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  VAR[java.io.ByteArrayOutputStream] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.net.URL,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  LEX[adapter.get] PARENTHESESSTART VAR[java.util.prefs.Preferences] COMMA
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  LEX[IOException] CURLYSTART RETURN PARENTHESESSTART
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  LEX[buffer.position] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  OP[bitwiseOr] OP[bitwiseOr] LEX[WIN_THUMBNAIL_STORE.equalsIgnoreCase] PARENTHESESSTART
CALL[java.io.FileFilter,accept,1,boolean] PARA[VAR[java.io.File]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.nio.file.Path,getRoot,0,java.nio.file.Path] +++$+++  OP[assign] OP[assign] VAR[INT] OP[ternaryTrue]
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.RectangularShape,getCenterX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.RectangularShape,getMaxY,0,double] +++$+++  LEX[shape.getCenterX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Color,getBlue,0,int] +++$+++  LEX[c.getGreen] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.function.Consumer,accept,1,void] PARA[VAR[java.awt.event.MouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART RETURN LEX[Character.isDigit] PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[K] OP[greaterThan] LEX[keySeq] OP[assign]
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,contains,1,boolean] PARA[VAR[net.filebot.similarity.SeasonEpisodeMatcher.SxE]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[net.filebot.similarity.SeasonEpisodeMatcher.SxE]] +++$+++  VAR[net.filebot.similarity.SeasonEpisodeMatcher.SxE] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,node,1,java.util.prefs.Preferences] PARA[VAR[java.lang.String]] +++$+++  RETURN NEW TYPE[Settings] PARENTHESESSTART
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Throwable] OP[assign]
CALL[java.lang.Iterable,iterator,0,java.util.Iterator<T>] +++$+++  OP[ternaryTrue] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  INT VAR[INT] OP[assign] EOL
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JLabel,getIcon,0,javax.swing.Icon] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JButton,getPreferredSize,0,java.awt.Dimension] +++$+++  PARENTHESESEND EOL LEX[button.setMaximumSize] PARENTHESESSTART
CALL[javax.swing.TransferHandler.TransferSupport,isDrop,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.TransferHandler.TransferSupport,getDropAction,0,int] +++$+++  CURLYSTART RETURN LEX[TransferAction.fromDnDConstant] PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicInteger,get,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JSpinner]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND COMMA PARENTHESESEND EOL
CALL[java.io.File,getName,0,java.lang.String] +++$+++  LEX[file.getParent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.io.PrintWriter,printf,2,java.io.PrintWriter] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  TYPE[File] PARENTHESESSTART VAR[java.io.File] COMMA
CALL[javax.swing.Action,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[done] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Color,getRed,0,int] +++$+++  LEX[org.eclipse.swt.graphics.Color] PARENTHESESSTART LEX[display] COMMA
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[javax.swing.Icon,getIconHeight,0,int] +++$+++  CURLYSTART RETURN LEX[Math.max] PARENTHESESSTART
CALL[javax.swing.Icon,getIconWidth,0,int] +++$+++  LEX[m_icon1.getIconWidth] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[javax.swing.Icon,getIconWidth,0,int] +++$+++  VAR[java.awt.Graphics] COMMA VAR[INT] OP[sum]
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  NULL PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  ARRAYEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sent.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sent.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[CALL[null,getBundle]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[com.openbravo.beans.JNumberDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  COMMA VAR[javax.swing.Icon] PARENTHESESEND EOL
CALL[java.util.GregorianCalendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[GregorianCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,clear,0,void] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.Timer,setRepeats,1,void] PARA[LIT[Boolean]] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  PARENTHESESEND EOL VAR[java.awt.Graphics2D] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,indexOf,1,int] PARA[VAR[javax.swing.tree.TreeNode]] +++$+++  VAR[javax.swing.tree.TreeNode] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[PaymentsLine] VAR[com.openbravo.pos.panels.PaymentsModel.PaymentsLine] OP[assign]
CALL[java.awt.geom.AffineTransform,preConcatenate,1,void] PARA[CALL[java.awt.Font,getTransform]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Font,deriveFont,1,java.awt.Font] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  PARENTHESESEND EOL VAR[java.awt.Font] OP[assign]
CALL[java.awt.Font,getTransform,0,java.awt.geom.AffineTransform] +++$+++  PARENTHESESEND EOL LEX[a.preConcatenate] PARENTHESESSTART
CALL[java.io.OutputStream,close,0,void] +++$+++  LEX[m_out.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART NULL PARENTHESESEND EOL
CALL[java.util.Vector,addElement,1,void] PARA[VAR[java.util.Vector]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  CURLYSTART RETURN LEX[base.charAt] PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[CALL[java.lang.Object,toString]] +++$+++  RETURN NEW TYPE[StringList] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL ELSE CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[INT] OP[sum] VAR[INT] OP[lessThan]
CALL[java.lang.CharSequence,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[org.gjt.sp.jedit.textarea.ExtensionManager.Entry]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,remove,0,void] +++$+++  LEX[dmgr.dispose] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Box,remove,1,void] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[javax.swing.JScrollBar,getValue,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[javax.swing.JScrollBar,setValues,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JList,setVisibleRowCount,1,void] PARA[CALL[null,min]] +++$+++  PARENTHESESSTART VAR[javax.swing.DefaultListModel] PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.io.File,mkdirs,0,boolean] +++$+++  LEX[dir.exists] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  COMMA LEX[MiscUtilities.class] COMMA OP[sum]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.io.Reader,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[CHAR] PARENTHESESEND PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[assign] FIELD[length,CHAR] OP[sub] PARENTHESESEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Hashtable,put,2,V] PARA[CALL[java.lang.String,substring]] PARA[CALL[java.lang.String,substring]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.UIDefaults,get,1,java.lang.Object] PARA[LIT[Stirng]] +++$+++  EOL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[sum] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[sel] INSTANCEOF LEX[Selection.Range] PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.util.Properties]] +++$+++  LEX[Properties] VAR[java.util.Properties] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] EOL CURLYEND RETURN
CALL[java.io.Reader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[CALL[null,getProperty]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[DefaultMutableTreeNode] PARENTHESESEND
CALL[javax.swing.Timer,stop,0,void] +++$+++  VAR[BOOLEAN] OP[assign] VAR[BOOLEAN] EOL
CALL[javax.swing.Timer,setInitialDelay,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[javax.swing.JWindow,dispose,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[org.gjt.sp.jedit.gui.GrabKeyDialog.KeyBinding] EOL IF PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESSTART CHAR VAR[CHAR] OP[ternaryFalse]
CALL[java.util.Vector,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[javax.swing.table.DefaultTableModel,getValueAt,2,java.lang.Object] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[javax.swing.DefaultListModel,addElement,1,void] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,remove,1,void] PARA[VAR[javax.swing.JLabel]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.Reader,read,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Class] PARENTHESESEND EOL ELSE
CALL[java.lang.Error,toString,0,java.lang.String] +++$+++  OP[sum] VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART OP[sum] LEX[s.substring] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.reflect.Method,getModifiers,0,int] +++$+++  CURLYSTART RETURN LEX[Modifier.isPublic] PARENTHESESSTART
CALL[java.lang.Class,isPrimitive,0,boolean] +++$+++  NULL PARENTHESESEND RETURN OP[not]
CALL[java.lang.Class,isPrimitive,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND LEX[v.addElement] PARENTHESESSTART
CALL[java.util.Vector,addElement,1,void] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  LEX[st.hasMoreTokens] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JMenuItem,getText,0,java.lang.String] +++$+++  LEX[obj1.getText] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Graphics2D,fill,1,void] PARA[VAR[java.awt.geom.Rectangle2D]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.awt.font.LineMetrics,getAscent,0,float] +++$+++  LEX[bounds.getHeight] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[javax.swing.JRadioButtonMenuItem,addActionListener,1,void] PARA[VAR[org.gjt.sp.jedit.browser.BrowserCommandsMenu.ActionHandler]] +++$+++  OP[sum] VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.JRadioButtonMenuItem]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButtonMenuItem] PARENTHESESEND EOL
CALL[java.net.ServerSocket,getLocalPort,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESEND EOL LEX[System.arraycopy] PARENTHESESSTART
CALL[javax.swing.text.Position,getOffset,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.io.File,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  EOL RETURN PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYSTART LEX[Log.info] PARENTHESESSTART COMMA
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[CALL[java.text.DateFormat,format]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] LEX[Math.min] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuffer,length,0,int] +++$+++  PARENTHESESEND EOL LEX[sb.delete] PARENTHESESSTART
CALL[java.util.HashMap,putAll,1,void] PARA[CALL[net.sourceforge.texlipse.viewer.ViewerAttributeRegistry,asMap]] +++$+++  LEX[ViewerAttributeRegistry] VAR[net.sourceforge.texlipse.viewer.ViewerAttributeRegistry] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[false] EOL CURLYEND RETURN
CALL[java.util.HashMap,putAll,1,void] PARA[VAR[java.util.HashMap]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESEND CURLYSTART CURLYEND CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART LEX[token.substring] PARENTHESESSTART COMMA
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[list.add] PARENTHESESSTART
CALL[java.lang.Process,destroy,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.Process,destroy,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  VAR[java.lang.InterruptedException] PARENTHESESEND EOL CURLYEND
CALL[java.util.ListIterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[TexProjectionAnnotation] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL IF PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  BREAK EOL IF PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[URL] ARRAYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.Multiset.K]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.util.Multiset.K]] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.BitSet,nextSetBit,1,int] PARA[LIT[Integer]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.Reader,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.IOException,initCause,1,java.lang.Throwable] PARA[VAR[java.lang.Throwable]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART ASSERT
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[name.substring] PARENTHESESSTART COMMA
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.util.FractionalMultiset.K]] PARA[VAR[DOUBLE]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[edu.umd.cs.findbugs.util.MultiMap.K]] +++$+++  LEX[K] VAR[edu.umd.cs.findbugs.util.MultiMap.K] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.MultiMap.K]] +++$+++  TYPE[V] OP[greaterThan] VAR[java.util.Collection] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.ProjectPackagePrefixes.incrementCount(java.util.Map<T, java.lang.Integer>, T, int).T]] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  LEX[url.openStream] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,isDirectory,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.FindBugsMain]] +++$+++  FIELD[kind,edu.umd.cs.findbugs.FindBugsMain] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.net.URI,toASCIIString,0,java.lang.String] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.util.ArrayList,add,1,boolean] PARA[CALL[edu.umd.cs.findbugs.Plugin,getPluginId]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Properties,putAll,1,void] PARA[VAR[java.util.Properties]] +++$+++  LEX[System.getProperties] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.regex.Matcher,groupCount,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sub]
CALL[java.io.PrintStream,print,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[s.length] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[CHAR] PARENTHESESEND EOL RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  VAR[java.lang.String] OP[sum] VAR[INT] COMMA
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[buf.append] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.Class,newInstance,0,T] +++$+++  COMMA LEX[IllegalAccessException] CURLYSTART RETURN
CALL[javax.annotation.meta.TypeQualifierValidator,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  FINALLY CURLYSTART LEX[profiler.end] PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  COMMA PARENTHESESEND OP[sum] PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  LEX[methodName.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.BitSet,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.BitSet,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.ba.deref.UnconditionalValueDerefSet]] +++$+++  VAR[edu.umd.cs.findbugs.ba.deref.UnconditionalValueDerefSet] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.BitSet,set,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.BitSet,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[ternaryFalse] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PushbackReader,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.zip.ZipOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipOutputStream,closeEntry,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipEntry,getComment,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[ze2.setComment] PARENTHESESSTART
CALL[java.util.zip.ZipEntry,getExtra,0,byte[]] +++$+++  PARENTHESESEND EOL LEX[ze2.setExtra] PARENTHESESSTART
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Character]] +++$+++  LEX[appVersion.getTimestamp] PARENTHESESSTART PARENTHESESEND CURLYEND
CALL[java.util.logging.Logger,log,2,void] PARA[VAR[java.util.logging.Level]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,getLong,2,long] PARA[LIT[Stirng]] PARA[LIT[Integer]] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,isFile,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  RETURN NEW TYPE[URL] PARENTHESESSTART
CALL[java.io.File,toURL,0,java.net.URL] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.util.Locale,getLanguage,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[sum] PARENTHESESEND EOL
CALL[javax.swing.table.TableColumn,getWidth,0,int] +++$+++  CURLYSTART VAR[INT] OP[sum] OP[assign]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] NEW TYPE[FilterMatcher] ARRAYSTART
CALL[javax.swing.JFrame,pack,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  VAR[CHAR] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  VAR[INT] EOL CURLYEND CURLYEND
CALL[java.util.Vector,elements,0,java.util.Enumeration<E>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,getLiteral]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.io.RandomAccessFile,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[CHAR]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Vector,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,regionMatches,4,boolean] PARA[VAR[INT]] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN LEX[false] EOL RETURN
CALL[java.io.RandomAccessFile,writeBytes,1,void] PARA[LIT[Stirng]] +++$+++  CURLYSTART CURLYEND TRY CURLYSTART
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,writeInt,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[FLOAT] PARENTHESESEND EOL
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  VAR[SHORT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  VAR[SHORT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  VAR[SHORT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,writeShort,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[SHORT] PARENTHESESEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESEND EOL LEX[System.arraycopy] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL ELSE
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  RETURN OP[not] PARENTHESESSTART PARENTHESESSTART
CALL[java.io.RandomAccessFile,writeInt,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL ELSE
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.FileInputStream,available,0,int] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  LEX[Exception] CURLYSTART LEX[fileOutputStream.write] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[javax.swing.JList,getSelectedValue,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.JTable,getSelectedRow,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JTable,getSelectedRow,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[JLipSync,repaint,0,void] +++$+++  TYPE[JLipSync] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Throwable,toString,0,java.lang.String] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.util.IdentityHashMap,get,1,V] PARA[VAR[org.h2.jaqu.TableDefinition.getColumnName(A).A]] +++$+++  CURLYSTART TYPE[FieldDefinition] VAR[org.h2.jaqu.TableDefinition.FieldDefinition] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  RETURN NEW TYPE[String] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.OutputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.lang.reflect.InvocationTargetException,getCause,0,java.lang.Throwable] +++$+++  VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART THROW
CALL[java.io.RandomAccessFile,close,0,void] +++$+++  PARENTHESESSTART FIELD[length,BYTE] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,position,1,java.nio.Buffer] PARA[VAR[INT]] +++$+++  COMMA VAR[LONG] PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,getInt,0,int] +++$+++  OP[lessThan] PARENTHESESEND OP[bitwiseOr] PARENTHESESSTART
CALL[java.io.RandomAccessFile,write,1,void] PARA[VAR[BYTE]] +++$+++  VAR[java.io.File] COMMA PARENTHESESEND EOL
CALL[java.io.OutputStream,write,1,void] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.Writer,flush,0,void] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.util.zip.Deflater,end,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.zip.Inflater,inflate,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.File,isFile,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[name.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[lessThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[assign] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[inputStr.substring] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[formatStr.substring] PARENTHESESSTART
CALL[java.lang.ref.ReferenceQueue,poll,0,java.lang.ref.Reference<? extends T>] +++$+++  OP[assign] PARENTHESESSTART TYPE[CloseWatcher] PARENTHESESEND
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.management.ThreadInfo,getLockOwnerId,0,long] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.io.PrintWriter,println,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.lang.Object,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  VAR[java.util.concurrent.atomic.AtomicBoolean] OP[assign] LEX[DETECT.get] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND CURLYEND RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  RETURN LEX[s.substring] PARENTHESESSTART COMMA
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[sub] OP[assign]
CALL[java.lang.reflect.Method,invoke,1,java.lang.Object] PARA[VAR[java.sql.Time]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.reflect.Method,invoke,1,java.lang.Object] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.lang.Thread,interrupt,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CHAR VAR[CHAR] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[LONG]] +++$+++  LONG VAR[LONG] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] OP[assign] FIELD[key,org.h2.util.SoftHashMap.SoftValue] EOL
CALL[java.lang.Runtime,totalMemory,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.lang.Throwable,toString,0,java.lang.String] +++$+++  LEX[ErrorCode.SERIALIZATION_FAILED_1] COMMA VAR[java.lang.Throwable] COMMA
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  VAR[java.lang.Object] PARENTHESESEND EOL RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  ARRAYEND EOL VAR[CHAR] OP[assign]
CALL[java.nio.CharBuffer,array,0,char[]] +++$+++  VAR[INT] OP[assign] LEX[reader.read] PARENTHESESSTART
CALL[java.nio.CharBuffer,position,0,int] +++$+++  LEX[charBuffer.array] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.nio.CharBuffer,position,1,java.nio.Buffer] PARA[CALL[java.nio.CharBuffer,limit]] +++$+++  LEX[charBuffer.flip] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.InputStream,available,0,int] +++$+++  LEX[Math.min] PARENTHESESSTART VAR[LONG] COMMA
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[sum] VAR[java.lang.String] EOL
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.nio.ByteBuffer,rewind,0,java.nio.Buffer] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.nio.ByteBuffer,get,1,byte] PARA[LIT[Integer]] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.util.HashMap,put,2,V] PARA[VAR[org.h2.table.TableLinkConnection]] PARA[VAR[org.h2.table.TableLinkConnection]] +++$+++  LEX[t.open] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[lessThan] EOL VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  PARENTHESESEND OP[sum] PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  LEX[map.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.BitSet,nextClearBit,1,int] PARA[LIT[Integer]] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.util.concurrent.atomic.AtomicLong,get,0,long] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[meta.keyIterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  LEX[s.indexOf] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL LEX[info.url] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.ArrayList,remove,1,E] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESSTART LEX[Arrays.asList] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Class,toString,0,java.lang.String] +++$+++  THROW LEX[DbException.throwInternalError] PARENTHESESSTART OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[name.substring] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.sql.SQLException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.error] PARENTHESESSTART OP[sum]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.Map.Entry,getValue]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYEND CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.event.ListDataListener,contentsChanged,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  FINAL TYPE[ComboBoxItemPair] VAR[net.pms.util.KeyedComboBoxModel.ComboBoxItemPair] OP[assign]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  FINAL TYPE[ComboBoxItemPair] VAR[net.pms.util.KeyedComboBoxModel.ComboBoxItemPair] OP[assign]
CALL[java.lang.String,split,2,java.lang.String[]] PARA[LIT[Stirng]] PARA[LIT[Integer]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.pms.util.FullyPlayedAction]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.Object]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART CASE OP[ternaryFalse]
CALL[java.util.List,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.regex.Matcher,end,0,int] +++$+++  VAR[java.awt.Rectangle] OP[assign] LEX[jList.modelToView] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setUseMplayerForVideoThumbs] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setArchiveBrowsing] PARENTHESESSTART
CALL[javax.swing.JTable,isRowSelected,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTable,setValueAt,3,void] PARA[CALL[javax.swing.JTable,getValueAt]] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  OP[sum] COMMA PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setDisableTranscodeForExtensions] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setAutoUpdate] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JTextArea,setText,1,void] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.io.FileOutputStream,flush,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.debug] PARENTHESESSTART OP[sum]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JLabel,setText,1,void] PARA[CALL[java.text.DecimalFormat,format]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.event.AdjustmentEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[JScrollBar] PARENTHESESEND
CALL[javax.swing.JScrollBar,removeAdjustmentListener,1,void] PARA[THIS[null]] +++$+++  OP[assign] VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,setAcceptAllFileFilterUsed,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,addChoosableFileFilter,1,void] PARA[VAR[javax.swing.filechooser.FileNameExtensionFilter]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.OutputStream,close,0,void] +++$+++  CURLYEND CURLYEND TRY CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,delete,0,boolean] +++$+++  COMMA LEX[true] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[net.pms.configuration.IpFilter.Predicate]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,get,1,V] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[siteinfo.get] PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[CALL[java.net.URL,getHost]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  LEX[extractIndexAndSql.getIndexPropList] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.Double,isNaN,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.math.BigInteger,compareTo,1,int] PARA[VAR[java.math.BigInteger]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESEND VAR[INT] PARENTHESESEND EOL
CALL[java.util.concurrent.ConcurrentHashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  LEX[key.intern] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.io.Writer,append,3,java.io.Writer] PARA[VAR[java.lang.CharSequence]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[javax.swing.DefaultListModel,removeAllElements,0,void] +++$+++  LEX[DefaultListModel] VAR[javax.swing.DefaultListModel] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableModel,getValueAt,2,java.lang.Object] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[sum] OP[sum] ARRAYEND OP[assign]
CALL[javax.swing.table.TableColumnModel,addColumn,1,void] PARA[VAR[javax.swing.table.TableColumn]] +++$+++  LEX[TableColumn] VAR[javax.swing.table.TableColumn] PARENTHESESEND CURLYSTART
CALL[javax.swing.tree.TreeNode,children,0,java.util.Enumeration<E>] +++$+++  OP[greaterThan] PARENTHESESEND LEX[DefaultGroovyMethods.iterator] PARENTHESESSTART
CALL[javax.swing.tree.MutableTreeNode,getChildCount,0,int] +++$+++  LEX[self.insert] PARENTHESESSTART VAR[javax.swing.tree.MutableTreeNode] COMMA
CALL[javax.swing.JMenu,getMenuComponentCount,0,int] +++$+++  VAR[javax.swing.JMenu] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JMenuBar,getMenu,1,javax.swing.JMenu] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPopupMenu,getSubElements,0,javax.swing.MenuElement[]] +++$+++  CURLYSTART RETURN LEX[DefaultGroovyMethods.iterator] PARENTHESESSTART
CALL[javax.swing.JTabbedPane,removeAll,0,void] +++$+++  LEX[JTabbedPane] VAR[javax.swing.JTabbedPane] PARENTHESESEND CURLYSTART
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,containsAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,subList,2,java.util.List<E>] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,toArray,1,T[]] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[out.print] PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[assign] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[groovy.xml.QName]] +++$+++  RETURN LEX[false] EOL RETURN
CALL[java.util.List,subList,2,java.util.List<E>] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[lessThan] TYPE[T] OP[greaterThan] PARENTHESESSTART
CALL[java.util.Calendar,getTimeZone,0,java.util.TimeZone] +++$+++  VAR[java.util.Date] PARENTHESESEND EOL RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  TYPE[File] PARENTHESESSTART VAR[java.io.File] COMMA
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[ClassHelper.double_TYPE] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[ClassHelper.short_TYPE] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[ClassHelper.int_TYPE] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[ClassHelper.boolean_TYPE] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,getBoolean,2,boolean] PARA[VAR[java.lang.String]] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  RETURN NEW TYPE[Logger] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[org.codehaus.groovy.classgen.asm.MopWriter.MopKey]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,addAll,1,boolean] PARA[CALL[null,asList]] +++$+++  PARENTHESESSTART FIELD[length,java.lang.Object] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESSTART COMMA VAR[INT] OP[sub]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  TYPE[GString] PARENTHESESEND VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[LIT[Integer]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.ListIterator,hasPrevious,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ListIterator,previous,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  OP[ternaryFalse] VAR[java.util.Collection] PARENTHESESEND CURLYSTART
CALL[java.util.LinkedList,addAll,1,boolean] PARA[FIELD[org.codehaus.groovy.control.ErrorCollector]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  NEW TYPE[GroovyRuntimeException] PARENTHESESSTART OP[sum]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.PushbackReader,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.Reader,reset,0,void] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[V] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.util.Map,containsValue,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  VAR[java.lang.Class] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.logging.Logger,removeHandler,1,void] PARA[VAR[java.util.logging.Handler]] +++$+++  OP[ternaryFalse] VAR[java.util.logging.Handler] PARENTHESESEND CURLYSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.logging.Logger,fine,1,void] PARA[CALL[null,format]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  NEW TYPE[RuntimeException] PARENTHESESSTART OP[sum]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.tree.DefaultMutableTreeNode,getUserObject,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[PathElement] PARENTHESESEND
CALL[java.util.List,add,2,void] PARA[LIT[Integer]] PARA[VAR[net.sourceforge.pmd.lang.dfa.report.AbstractReportNode]] +++$+++  LEX[AbstractReportNode] VAR[net.sourceforge.pmd.lang.dfa.report.AbstractReportNode] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Class,getDeclaredConstructor,1,java.lang.reflect.Constructor<T>] PARA[VAR[java.lang.Class]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse] EOL
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[filtered.add] PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.HashMap,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.HashMap,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.awt.Canvas,getHeight,0,int] +++$+++  LEX[canvas.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYSTART CASE OP[ternaryFalse] RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,remove,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[object.keySet] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.BufferedInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.zip.ZipOutputStream,flush,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.io.File,length,0,long] +++$+++  ARRAYSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.io.FileWriter,write,1,void] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.FileWriter,close,0,void] +++$+++  LEX[in.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,getCanonicalFile,0,java.io.File] +++$+++  CURLYSTART TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  ARRAYSTART PARENTHESESSTART VAR[INT] OP[multiply]
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.util.List,remove,1,boolean] PARA[VAR[net.sf.hale.characterbuilder.PointAllocatorModel.Listener]] +++$+++  LEX[Listener] VAR[net.sf.hale.characterbuilder.PointAllocatorModel.Listener] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL ELSE CURLYSTART
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[VAR[java.lang.String]] +++$+++  LEX[out.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.TreeSet,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESEND LEX[data.put] PARENTHESESSTART COMMA
CALL[java.util.Set,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.io.File,createNewFile,0,boolean] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[LevelUpList] VAR[net.sf.hale.rules.Role.LevelUpList] OP[assign]
CALL[java.util.Random,nextGaussian,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART LEX[float] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Relationship] VAR[net.sf.hale.rules.Faction.Relationship] OP[assign]
CALL[java.io.Reader,read,1,int] PARA[VAR[CHAR]] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART OP[not] LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[true] EOL VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[JournalConfig] VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[BOOLEAN] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[ternaryFalse] VAR[java.lang.String] EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.Long,hashCode,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.net.URI]] +++$+++  VAR[java.net.URI] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Long,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.Long,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[retList.add] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] NULL OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[fileExt.substring] PARENTHESESSTART COMMA
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Byte]] +++$+++  LEX[Byte] VAR[java.lang.Byte] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Short]] +++$+++  LEX[Short] VAR[java.lang.Short] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Boolean]] +++$+++  LEX[Boolean] VAR[java.lang.Boolean] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.atomic.AtomicBoolean,get,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map.Entry] OP[assign]
CALL[java.awt.Container,add,2,void] PARA[VAR[javax.swing.JProgressBar]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.io.File,isFile,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  NULL EOL VAR[java.lang.String] OP[assign]
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[true] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[false] PARENTHESESEND EOL CURLYEND
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.awt.FontMetrics,getHeight,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[javax.swing.JTable,getCellRenderer,2,javax.swing.table.TableCellRenderer] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[TableCellRenderer] VAR[javax.swing.table.TableCellRenderer] OP[assign]
CALL[java.awt.geom.Path2D,moveTo,2,void] PARA[VAR[INT]] PARA[VAR[DOUBLE]] +++$+++  LEX[path.reset] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,quadTo,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[DOUBLE]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[sub] VAR[FLOAT] EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.text.JTextComponent,getDisabledTextColor,0,java.awt.Color] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.text.JTextComponent,repaint,0,void] +++$+++  LEX[textComponent.revalidate] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[javax.swing.JComponent]] +++$+++  VAR[javax.swing.JComponent] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  LEX[ChangeListener] VAR[javax.swing.event.ChangeListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.event.ChangeListener,stateChanged,1,void] PARA[VAR[javax.swing.event.ChangeEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[javax.swing.plaf.TextUI,uninstallUI,1,void] PARA[VAR[javax.swing.JComponent]] +++$+++  LEX[JComponent] VAR[javax.swing.JComponent] PARENTHESESEND CURLYSTART
CALL[javax.swing.plaf.TextUI,getNextVisualPositionFrom,5,int] PARA[VAR[javax.swing.text.JTextComponent]] PARA[VAR[INT]] PARA[VAR[javax.swing.text.Position.Bias]] PARA[VAR[INT]] PARA[VAR[javax.swing.text.Position.Bias]] +++$+++  THROWS LEX[BadLocationException] CURLYSTART RETURN
CALL[com.frostwire.gui.searchfield.BuddySupport.Position,toString,0,java.lang.String] +++$+++  LEX[textField.add] PARENTHESESSTART VAR[java.awt.Component] COMMA
CALL[java.lang.String,equals,1,boolean] PARA[CALL[javax.swing.JTextField,getClientProperty]] +++$+++  VAR[javax.swing.JTextField] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.io.File]] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  LEX[File] VAR[java.io.File] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  LEX[JCheckBox] VAR[javax.swing.JCheckBox] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,setFocusable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[javax.swing.JProgressBar,setMinimum,1,void] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.net.URL,openStream,0,java.io.InputStream] +++$+++  OP[assign] NEW TYPE[BufferedInputStream] PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[javax.swing.JPanel,getLayout,0,java.awt.LayoutManager] +++$+++  PARENTHESESSTART TYPE[CardLayout] PARENTHESESEND PARENTHESESSTART
CALL[javax.swing.JMenuItem,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[OptionsTreeNode] PARENTHESESEND
CALL[java.lang.Character,charValue,0,char] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTextField,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JButton,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.JComponent,getInsets,0,java.awt.Insets] +++$+++  CURLYSTART TYPE[Insets] VAR[java.awt.Insets] OP[assign]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[wipeButtonIconCache] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JFrame,setContentPane,1,void] PARA[VAR[javax.swing.JPanel]] +++$+++  TYPE[JFrame] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.CardLayout,show,2,void] PARA[THIS[null]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,lastIndexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[sum] OP[assign]
CALL[java.net.URI,getPath,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.datatransfer.Transferable,isDataFlavorSupported,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.datatransfer.Transferable,isDataFlavorSupported,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.awt.Font,canDisplayUpTo,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  TYPE[StringBuilder] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.lang.ProcessBuilder,start,0,java.lang.Process] +++$+++  CURLYSTART TYPE[Process] VAR[java.lang.Process] OP[assign]
CALL[javax.swing.JTextField,setText,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.tree.TreeModel,getChild,2,java.lang.Object] PARA[VAR[java.lang.Object]] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[visibleNodes.contains] PARENTHESESSTART
CALL[javax.swing.JProgressBar,getValue,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[BAR.setValue] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.awt.Color]] +++$+++  EOL TYPE[Border] VAR[javax.swing.border.Border] OP[assign]
CALL[javax.swing.JTable,getFont,0,java.awt.Font] +++$+++  CURLYSTART TYPE[Font] VAR[java.awt.Font] OP[assign]
CALL[javax.swing.ListSelectionModel,isSelectionEmpty,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Color,getRed,0,int] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[javax.swing.JLabel,setFont,1,void] PARA[CALL[javax.swing.table.JTableHeader,getFont]] +++$+++  TYPE[JLabel] PARENTHESESEND VAR[java.awt.Component] EOL
CALL[javax.swing.JLabel,setBackground,1,void] PARA[CALL[javax.swing.table.JTableHeader,getBackground]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART RETURN LEX[i18n.tr] PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  NULL EOL ELSE RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.TreeSet,add,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[FLOAT] PARENTHESESEND EOL RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.LinkedList,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,delete,0,boolean] +++$+++  OP[multiply] LEX[L] PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.Semaphore,acquireUninterruptibly,0,void] +++$+++  LEX[reserve] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[sum] VAR[BOOLEAN] OP[sum] OP[sum]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,remove,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.CopyOnWriteList.T]] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.SystemTime.ChangeListener]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  OP[assign] PARENTHESESSTART TYPE[Stack] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.Process,exitValue,0,int] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  BREAK EOL DEFAULT OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[LONG] OP[lessThan] PARENTHESESEND
CALL[java.nio.charset.CharsetEncoder,flush,1,java.nio.charset.CoderResult] PARA[VAR[java.nio.ByteBuffer]] +++$+++  COMMA LEX[true] PARENTHESESEND EOL
CALL[java.io.File,isDirectory,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,mkdirs,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,canWrite,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.io.InputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  LEX[amountToRead-] OP[assign] VAR[INT] EOL
CALL[java.nio.file.Path,toFile,0,java.io.File] +++$+++  PARENTHESESEND CURLYSTART LEX[files.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.nio.file.Path,toFile]] +++$+++  OP[ternaryFalse] VAR[java.nio.file.DirectoryStream] PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND LEX[tokens.add] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[str.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.Executor,execute,1,void] PARA[VAR[java.lang.Runnable]] +++$+++  LEX[Runnable] VAR[java.lang.Runnable] PARENTHESESEND CURLYSTART
CALL[org.limewire.collection.Comparators.naturalComparator(java.lang.Class<? extends T>).T,compareTo,1,int] PARA[VAR[org.limewire.collection.Comparators.naturalComparator(java.lang.Class<? extends T>).T]] +++$+++  VAR[org.limewire.collection.Comparators.naturalComparator(java.lang.Class<? extends T>).T] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,trimToSize,0,void] +++$+++  LEX[trim] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.File,setLastModified,1,boolean] PARA[VAR[LONG]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.logging.Logger,logp,5,void] PARA[FIELD[Level]] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Throwable]] +++$+++  LEX[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,logp,5,void] PARA[FIELD[Level]] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Throwable]] +++$+++  LEX[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,logp,5,void] PARA[FIELD[Level]] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Throwable]] +++$+++  LEX[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.nio.charset.Charset,newDecoder,0,java.nio.charset.CharsetDecoder] +++$+++  EOL TYPE[CharsetDecoder] VAR[java.nio.charset.CharsetDecoder] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[lessThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[VAR[java.lang.String]] +++$+++  RETURN NEW TYPE[String] PARENTHESESSTART
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOG.warn] PARENTHESESSTART OP[sum]
CALL[java.io.RandomAccessFile,getChannel,0,java.nio.channels.FileChannel] +++$+++  OP[assign] NEW TYPE[InputChannel] PARENTHESESSTART
CALL[java.nio.ByteBuffer,getLong,0,long] +++$+++  PARENTHESESEND EOL VAR[java.lang.Long] OP[assign]
CALL[java.lang.Short,shortValue,0,short] +++$+++  NULL OP[ternaryTrue] VAR[SHORT] OP[ternaryFalse]
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  FINAL CHAR VAR[CHAR] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  FINAL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[CharUtils.isAsciiPrintable] PARENTHESESSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND OP[not] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  LEX[prefix.length] PARENTHESESSTART PARENTHESESEND OP[greaterThan]
CALL[java.lang.CharSequence,length,0,int] +++$+++  LEX[suffix.length] PARENTHESESSTART PARENTHESESEND OP[greaterThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,3,java.lang.StringBuilder] PARA[VAR[java.lang.CharSequence]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  CURLYSTART TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.io.FileOutputStream,getChannel,0,java.nio.channels.FileChannel] +++$+++  PARENTHESESEND EOL VAR[java.nio.channels.FileChannel] OP[assign]
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.net.URLConnection,getInputStream,0,java.io.InputStream] +++$+++  CURLYSTART TYPE[InputStream] VAR[java.io.InputStream] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.Reader,read,1,int] PARA[VAR[CHAR]] +++$+++  OP[assign] PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[StatFs] PARENTHESESSTART
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[paths.add] PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  OP[bitwiseOr] OP[bitwiseOr] LEX[FilenameUtils.isExtension] PARENTHESESSTART
CALL[java.util.Stack,isEmpty,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,remove,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  LEX[sb.append] PARENTHESESSTART LEX[Character.isJavaIdentifierPart] PARENTHESESSTART
CALL[java.lang.Thread,join,0,void] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.io.DataOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.ClassNotFoundException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESEND CURLYSTART ASSERT PARENTHESESSTART
CALL[java.util.Map,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.util.zip.Inflater,finished,0,boolean] +++$+++  EOL WHILE PARENTHESESSTART OP[not]
CALL[java.io.DataInputStream,read,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.awt.Toolkit,getScreenSize,0,java.awt.Dimension] +++$+++  EOL TYPE[Dimension] VAR[java.awt.Dimension] OP[assign]
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Color,getRGB,0,int] +++$+++  CURLYSTART RETURN LEX[Integer.toHexString] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextArea,setWrapStyleWord,1,void] PARA[LIT[Boolean]] +++$+++  TYPE[JTextArea] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JPasswordField]] +++$+++  LEX[JLabel.RIGHT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[CALL[ca.spaz.cron.datasource.FoodProxy,getSourceID]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.awt.event.KeyEvent,getKeyCode,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  LEX[IOException] CURLYSTART IF PARENTHESESSTART
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  LEX[IOException] CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Record] PARENTHESESEND
CALL[java.awt.Color,getRed,0,int] +++$+++  PARENTHESESEND OP[multiply] VAR[DOUBLE] OP[sum]
CALL[java.awt.Color,getBlue,0,int] +++$+++  PARENTHESESEND OP[multiply] VAR[DOUBLE] OP[sum]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[javax.swing.JEditorPane,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  LEX[htmlPane.setContentType] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JEditorPane,getDocument,0,javax.swing.text.Document] +++$+++  CURLYSTART TYPE[Document] VAR[javax.swing.text.Document] OP[assign]
CALL[javax.swing.text.Document,remove,2,void] PARA[LIT[Integer]] PARA[CALL[javax.swing.text.Document,getLength]] +++$+++  LEX[htmlPane.getDocument] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.awt.Component]] +++$+++  RETURN PARENTHESESSTART TYPE[SpazPosition] PARENTHESESEND
CALL[java.awt.Container,getComponentCount,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.Container,getComponentCount,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.awt.Component]] +++$+++  OP[assign] PARENTHESESSTART TYPE[SpazPosition] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.Container,getInsets,0,java.awt.Insets] +++$+++  CURLYSTART TYPE[Insets] VAR[java.awt.Insets] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[FIELD[RiverLayout]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.awt.Component,getX,0,int] +++$+++  PARENTHESESEND EOL LEX[m.setLocation] PARENTHESESSTART
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART LEX[formatter.applyPattern] PARENTHESESSTART
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,read,0,int] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.util.HashMap,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,values,0,java.util.Collection<V>] +++$+++  RETURN NEW TYPE[ArrayList] PARENTHESESSTART
CALL[java.util.TreeSet,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JMenuItem,doClick,0,void] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.awt.event.KeyEvent,getKeyCode,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JFileChooser,getSelectedFile,0,java.io.File] +++$+++  EOL CURLYEND VAR[java.io.File] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Number] PARENTHESESEND
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[sum] EOL IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[sum] EOL IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.net.InetAddress,equals,1,boolean] PARA[VAR[java.net.InetAddress]] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.net.InetAddress,isAnyLocalAddress,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.Throwable,getLocalizedMessage,0,java.lang.String] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.IdentityHashMap,size,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.IdentityHashMap,remove,1,V] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.io.InputStream,available,0,int] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.Map]] +++$+++  TYPE[HashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[java.util.List,remove,1,boolean] PARA[VAR[com.aelitis.azureus.core.util.CopyOnWriteList.T]] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  THIS PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,2,int] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[com.aelitis.azureus.core.util.CopyOnWriteSet.T]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.LinkedList,clear,0,void] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.LinkedList,add,1,boolean] PARA[VAR[com.aelitis.azureus.core.content.RelatedContentManager.DownloadInfo]] +++$+++  PARENTHESESSTART VAR[com.aelitis.azureus.core.content.RelatedContentManager.DownloadInfo] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND WHILE PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[AzureusContentDirectory] ARRAYSTART
CALL[java.io.DataOutputStream,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.io.DataOutputStream] PARENTHESESEND EOL
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[ClientConnection] PARENTHESESEND
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Long] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[sum] OP[sum] PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  LEX[res.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[com.aelitis.azureus.core.networkmanager.impl.http.HTTPNetworkConnection.httpRequest,getTotalLength]] +++$+++  LEX[res.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[com.aelitis.azureus.core.networkmanager.impl.http.HTTPNetworkConnection.networkConnectionKey]] +++$+++  TYPE[HTTPNetworkConnection] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.util.Map,remove,1,V] PARA[VAR[com.aelitis.azureus.core.networkmanager.impl.http.HTTPNetworkConnection.networkConnectionKey]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  EOL BYTE VAR[BYTE] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[ByteBuffer] PARENTHESESEND
CALL[java.nio.ByteBuffer,hasRemaining,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[SWTSkinObjectTab] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[SWTSkinObjectTab] PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[UISkinnableSWTListener] ARRAYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[com.aelitis.azureus.ui.swt.views.skin.SkinViewManager.SkinViewManagerListener]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[com.aelitis.azureus.ui.swt.views.skin.SkinViewManager.SkinViewManagerListener]] +++$+++  VAR[com.aelitis.azureus.ui.swt.views.skin.SkinViewManager.SkinViewManagerListener] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[com.aelitis.azureus.ui.swt.views.skin.SkinViewManager.SkinViewManagerListener]] +++$+++  PARENTHESESSTART LEX[SkinViewManager.class] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DownloadManager] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Map] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[CALL[java.lang.String,trim]] +++$+++  NULL PARENTHESESEND RETURN EOL
CALL[java.util.List,addAll,1,boolean] PARA[FIELD[org.json.simple.ItemList]] +++$+++  LEX[ItemList] VAR[org.json.simple.ItemList] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[ternaryTrue] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.io.InputStream,close,0,void] +++$+++  EOL CURLYEND TRY CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] ARRAYSTART ARRAYEND OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  ARRAYSTART PARENTHESESSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[IOException] CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.io.InputStreamReader,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.reflect.Method,invoke,2,java.lang.Object] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  LEX[true] PARENTHESESEND EOL RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  ARRAYEND CURLYSTART VAR[java.lang.Object] COMMA
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.util.zip.ZipOutputStream,putNextEntry,1,void] PARA[VAR[java.util.zip.ZipEntry]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[IWizardPage] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuffer,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Map,remove,1,V] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[PrintStream] VAR[java.io.PrintStream] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  EOL CURLYEND LEX[TextWrap.printList] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,toString,0,java.lang.String] +++$+++  CURLYEND LEX[torrent.setAdditionalStringProperty] PARENTHESESSTART COMMA
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Set,add,1,boolean] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  COMMA TYPE[Object] OP[greaterThan] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Random,nextInt,1,int] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.security.SecureRandom,nextLong,0,long] +++$+++  VAR[LONG] OP[assign] LEX[Math.abs] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] LEX[Math.min] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.List] PARENTHESESEND EOL CURLYEND
CALL[java.net.Socket,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  CURLYSTART VAR[java.lang.String] OP[assign] OP[sum]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.net.URL,getPath]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.net.URL,getQuery]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.net.URL,getPath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[result.append] PARENTHESESSTART
CALL[java.util.zip.ZipInputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,mkdirs,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW BYTE ARRAYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.File,getParent,0,java.lang.String] +++$+++  VAR[java.util.regex.Matcher] OP[assign] LEX[pat.matcher] PARENTHESESSTART
CALL[java.io.File,length,0,long] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.InputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.Stack,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[LONG] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.azureus2.core3.internat.MessageText.MessageTextListener]] +++$+++  LEX[MessageTextListener] VAR[org.gudy.azureus2.core3.internat.MessageText.MessageTextListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYSTART VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.FileOutputStream,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYSTART VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.lang.Number,intValue,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.List,remove,1,boolean] PARA[CALL[null,currentThread]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.net.URL,getProtocol,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.jar.JarInputStream,getNextJarEntry,0,java.util.jar.JarEntry] +++$+++  CURLYSTART TYPE[JarEntry] VAR[java.util.jar.JarEntry] OP[assign]
CALL[java.util.jar.JarEntry,getName,0,java.lang.String] +++$+++  EOL CURLYEND LEX[patch_entries.put] PARENTHESESSTART
CALL[java.lang.Long,longValue,0,long] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.math.BigInteger,multiply,1,java.math.BigInteger] PARA[VAR[java.math.BigInteger]] +++$+++  EOL TYPE[BigInteger] VAR[java.math.BigInteger] OP[assign]
CALL[java.math.BigInteger,shiftLeft,1,java.math.BigInteger] PARA[LIT[Integer]] +++$+++  VAR[java.math.BigInteger] OP[assign] LEX[s.subtract] PARENTHESESSTART
CALL[java.math.BigInteger,shiftLeft,1,java.math.BigInteger] PARA[VAR[INT]] +++$+++  TYPE[SimpleBigDecimal] PARENTHESESSTART LEX[bigInt.subtract] PARENTHESESSTART
CALL[java.math.BigInteger,multiply,1,java.math.BigInteger] PARA[VAR[java.math.BigInteger]] +++$+++  RETURN NEW TYPE[SimpleBigDecimal] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL LEX[sig.update] PARENTHESESSTART
CALL[java.security.NoSuchAlgorithmException,toString,0,java.lang.String] +++$+++  NEW TYPE[SecurityException] PARENTHESESSTART OP[sum]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  NEW TYPE[CertificateException] PARENTHESESSTART OP[sum]
CALL[java.math.BigInteger,toByteArray,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.Exception,toString,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  THROW NEW TYPE[CRLException] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[BYTE] OP[assign] VAR[BYTE] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.math.BigInteger,toByteArray,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  OP[sum] EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW BYTE ARRAYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Vector,elements,0,java.util.Enumeration<E>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.math.BigInteger,equals,1,boolean] PARA[VAR[java.math.BigInteger]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Hashtable,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[javax.swing.JComponent,setBorder,1,void] PARA[VAR[javax.swing.border.Border]] +++$+++  OP[assign] VAR[javax.swing.border.Border] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.JSlider,getValue,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] COMMA
CALL[java.io.InputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  OP[assign] PARENTHESESSTART TYPE[Shape3D] PARENTHESESEND
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.geom.PathIterator,next,0,void] +++$+++  LEX[it.isDone] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,add,1,boolean] PARA[VAR[com.eteks.sweethome3d.j3d.PhotoRenderer.Triangle]] +++$+++  VAR[com.eteks.sweethome3d.j3d.PhotoRenderer.Triangle] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBoxMenuItem,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] VAR[javax.swing.JFrame] PARENTHESESEND CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  OP[greaterThan] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[map.remove] PARENTHESESSTART
CALL[java.util.Vector,addElement,1,void] PARA[CALL[java.util.Enumeration,nextElement]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.logging.FileHandler,setFormatter,1,void] PARA[VAR[java.util.logging.SimpleFormatter]] +++$+++  TYPE[SimpleFormatter] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JButton,addActionListener,1,void] PARA[VAR[net.sf.latexdraw.installer.Installer.InstallerListener]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JButton,setName,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND EOL VAR[BOOLEAN] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  LEX[colourHashtable.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  FINAL TYPE[Color] VAR[java.awt.Color] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Rectangle,contains,1,boolean] PARA[VAR[java.awt.geom.Rectangle2D]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.awt.Graphics2D,setStroke,1,void] PARA[VAR[java.awt.BasicStroke]] +++$+++  PARENTHESESEND PARENTHESESEND RETURN EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.awt.Color]] +++$+++  NULL PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.geom.Point2D.Float,setLocation,2,void] PARA[LIT[Double]] PARA[LIT[Double]] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.net.URL,toExternalForm,0,java.lang.String] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.awt.Dimension,getWidth,0,double] +++$+++  OP[assign] PARENTHESESSTART INT PARENTHESESEND
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  VAR[java.io.PrintWriter] PARENTHESESEND EOL RETURN
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  VAR[java.lang.Throwable] EOL VAR[java.lang.Throwable] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  OP[assign] NEW TYPE[ByteArrayInputStream] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[javax.swing.Timer,start,0,void] +++$+++  VAR[java.awt.event.FocusEvent] OP[assign] VAR[java.awt.event.FocusEvent] EOL
CALL[javax.swing.AbstractButton,setSelected,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  TYPE[ButtonGroup] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.prefs.Preferences,getBoolean,2,boolean] PARA[VAR[java.lang.String]] PARA[LIT[Boolean]] +++$+++  VAR[java.util.prefs.Preferences] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.tree.DefaultMutableTreeNode,getUserObject,0,java.lang.Object] +++$+++  PARENTHESESSTART LEX[false] OP[assign] OP[assign]
CALL[java.awt.Font,getFamily,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[fi.setIsBold] PARENTHESESSTART
CALL[javax.swing.JInternalFrame,moveToFront,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] LEX[Character.isJavaIdentifierStart] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  ARRAYEND VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[_btnHideFindPanel.doClick] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sub]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.HashMap]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.awt.print.PrinterJob,setPrintable,1,void] PARA[THIS[null]] +++$+++  LEX[PrinterJob.getPrinterJob] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART LEX[i18n.PROC_SEP_LABEL_TT] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[_prefs.setRemoveMultiLineComments] PARENTHESESSTART
CALL[javax.swing.JTextArea,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,toArray,0,java.lang.Object[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[java.awt.Graphics,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  OP[sub] FIELD[bottom,java.awt.Insets] OP[sub] EOL
CALL[javax.swing.JPasswordField,getPassword,0,char[]] +++$+++  OP[assign] NEW TYPE[String] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[proxySettings.setSocksUseProxy] PARENTHESESSTART
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JTextField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  OP[sum] OP[sum] FIELD[gridy,java.awt.GridBagConstraints] EOL
CALL[javax.swing.JTabbedPane,getTabPlacement,0,int] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JTabbedPane,getSelectedComponent,0,java.awt.Component] +++$+++  EOL TYPE[Component] VAR[java.awt.Component] OP[assign]
CALL[javax.swing.JComponent,getRootPane,0,javax.swing.JRootPane] +++$+++  FINAL TYPE[Component] VAR[java.awt.Component] OP[assign]
CALL[java.awt.event.MouseEvent,getY,0,int] +++$+++  LEX[evt.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  LEX[_recentFilesXmlBean.getMaxRecentFiles] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.Action]] +++$+++  CASE LEX[IMenuIDs.PLUGINS_MENU] OP[ternaryFalse] CURLYSTART
CALL[javax.swing.JMenu,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[secondsLabel.setEnabled] PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.awt.Color,getRGB,0,int] +++$+++  PARENTHESESEND EOL LEX[_props.setStatusBarBackgroundColorRgbValue] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JCheckBox,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.tree.DefaultMutableTreeNode,add,1,void] PARA[VAR[javax.swing.tree.DefaultMutableTreeNode]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JToggleButton,doClick,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JToggleButton,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[javax.swing.JPanel,getComponents,0,java.awt.Component[]] +++$+++  LEX[getExternalButtons] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[_statusBar.setText] PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.HashMap] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] EOL WHILE PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JCheckBox,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[javax.swing.JCheckBox,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[javax.swing.JList,getModel,0,javax.swing.ListModel<E>] +++$+++  CURLYSTART TYPE[ListModel] VAR[javax.swing.ListModel] OP[assign]
CALL[javax.swing.JList,getModel,0,javax.swing.ListModel<E>] +++$+++  EOL TYPE[ListModel] VAR[javax.swing.ListModel] OP[assign]
CALL[java.util.SortedSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND PARENTHESESEND
CALL[java.util.SortedSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL ELSE
CALL[javax.swing.JList,getModel,0,javax.swing.ListModel<E>] +++$+++  EOL TYPE[ListModel] VAR[javax.swing.ListModel] OP[assign]
CALL[java.util.HashSet,toArray,0,java.lang.Object[]] +++$+++  CURLYEND CURLYEND LEX[useColsList.setListData] PARENTHESESSTART
CALL[java.util.Date,getTime,0,long] +++$+++  CURLYSTART VAR[LONG] OP[assign] PARENTHESESSTART
CALL[javax.swing.JTextField,requestFocus,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.MutableComboBoxModel,insertElementAt,2,void] PARA[VAR[java.lang.Object]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.MutableComboBoxModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[SQLHistoryItem] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[pop.add] PARENTHESESSTART
CALL[javax.swing.JComboBox,setSelectedIndex,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[MouseEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  LEX[evt.getComponent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.text.JTextComponent,repaint,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[_workingString.charAt] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  LEX[false] EOL CURLYEND RETURN
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  LEX[Integer.MAX_VALUE] EOL VAR[INT] OP[assign]
CALL[java.lang.management.ThreadMXBean,getThreadInfo,2,java.lang.management.ThreadInfo[]] PARA[CALL[java.lang.management.ThreadMXBean,getAllThreadIds]] PARA[LIT[Integer]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.management.ThreadInfo] OP[assign]
CALL[java.io.PrintWriter,println,0,void] +++$+++  LEX[pw.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  EOL CURLYEND LEX[s_log.warn] PARENTHESESSTART
CALL[javax.swing.text.html.parser.ParserDelegator,parse,3,void] PARA[VAR[java.io.BufferedReader]] PARA[THIS[null]] PARA[LIT[Boolean]] +++$+++  TYPE[ParserDelegator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.net.MulticastSocket,close,0,void] +++$+++  LEX[close] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.net.InetAddress,getAddress,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Thread,getId,0,long] +++$+++  LEX[fetcher] OP[assign] LEX[currentFetchers.get] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.prefs.Preferences,put,2,void] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,1,java.lang.String] PARA[LIT[Stirng]] +++$+++  LEX[token.substring] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  LEX[original.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.io.Reader,read,1,int] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[org.python.modules._threading.Mutex.Sync,tryAcquireNanos,2,boolean] PARA[LIT[Integer]] PARA[CALL[java.util.concurrent.TimeUnit,toNanos]] +++$+++  THROWS LEX[InterruptedException] CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  OP[lessThan] OP[ternaryTrue] VAR[INT] OP[sum]
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.Runnable]] +++$+++  VAR[java.util.List] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,removeAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[lessThan] ARRAYEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.charset.Charset,encode,1,java.nio.ByteBuffer] PARA[VAR[java.lang.String]] +++$+++  FINAL TYPE[ByteBuffer] VAR[java.nio.ByteBuffer] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipFile,getEntry,1,java.util.zip.ZipEntry] PARA[LIT[Stirng]] +++$+++  EOL TYPE[ZipEntry] VAR[java.util.zip.ZipEntry] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.util.regex.Matcher,groupCount,0,int] +++$+++  PARENTHESESSTART VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  LEX[iter.next] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.Object,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.InputStream,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[java.lang.Class,getMethod,1,java.lang.reflect.Method] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Method] VAR[java.lang.reflect.Method] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  VAR[java.lang.String] COMMA VAR[java.util.List] COMMA
CALL[java.lang.OutOfMemoryError,printStackTrace,0,void] +++$+++  PARENTHESESSTART LEX[Options.showJavaExceptions] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[CALL[java.lang.String,length]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[java.nio.ByteBuffer] OP[assign] LEX[cs.encode] PARENTHESESSTART
CALL[java.nio.charset.Charset,encode,1,java.nio.ByteBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  EOL TYPE[ByteBuffer] VAR[java.nio.ByteBuffer] OP[assign]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  RETURN PARENTHESESSTART TYPE[Token] PARENTHESESEND
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.File,canRead,0,boolean] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.util.Set,remove,1,boolean] PARA[THIS[null]] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.FileReader,read,1,int] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.FileWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.io.FileWriter,close,0,void] +++$+++  LEX[writer.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.util.Map]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.io.File,isFile,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.nio.CharBuffer,remaining,0,int] +++$+++  LEX[in.remaining] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  LEX[out.remaining] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  LEX[CoderResult.OVERFLOW] EOL CURLYEND RETURN
CALL[java.nio.CharBuffer,get,0,char] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.BufferedWriter,write,1,void] PARA[CALL[java.lang.StringBuffer,toString]] +++$+++  PARENTHESESSTART VAR[java.lang.StringBuffer] PARENTHESESEND EOL
CALL[javax.swing.event.ListDataListener,intervalRemoved,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JTable,getSelectedRow,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[javax.swing.plaf.basic.BasicComboBoxEditor,focusGained,1,void] PARA[VAR[java.awt.event.FocusEvent]] +++$+++  LEX[FocusEvent] VAR[java.awt.event.FocusEvent] PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenu]] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenu] PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.event.ListDataListener,intervalAdded,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setRegexContentPattern] PARENTHESESSTART LEX[Boolean.parseBoolean] PARENTHESESSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setIgnoreCase] PARENTHESESSTART LEX[Boolean.parseBoolean] PARENTHESESSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setTrailingContext] PARENTHESESSTART LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.Integer,hashCode,0,int] +++$+++  OP[assign] NULL PARENTHESESEND OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL PARENTHESESEND OP[ternaryTrue]
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[org.geoserver.jdbcconfig.internal.PropertyType]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.logging.Logger,info,1,void] PARA[LIT[Stirng]] +++$+++  VAR[java.util.logging.Logger] PARENTHESESEND EOL CURLYEND
CALL[java.lang.Integer,intValue,0,int] +++$+++  LEX[Iterators.advance] PARENTHESESSTART LEX[iterator] COMMA
CALL[java.lang.Integer,intValue,0,int] +++$+++  LEX[CloseableIteratorAdapter.limit] PARENTHESESSTART LEX[iterator] COMMA
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  VAR[java.lang.String] EOL VAR[java.lang.String] OP[assign]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[FIELD[EoLayerType]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Properties,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[T] PARENTHESESEND
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  OP[assign] VAR[INT] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[IOException] CURLYSTART IF PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  LEX[img.getWidth] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  VAR[INT] OP[assign] LEX[Math.max] PARENTHESESSTART
CALL[java.awt.Dimension,getHeight,0,double] +++$+++  INT PARENTHESESEND LEX[Math.round] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.image.IndexColorModel,getTransferType,0,int] +++$+++  VAR[java.awt.image.WritableRaster] OP[assign] LEX[Raster.createInterleavedRaster] PARENTHESESSTART
CALL[java.io.IOException,getLocalizedMessage,0,java.lang.String] +++$+++  LEX[LOGGER.log] PARENTHESESSTART LEX[Level.SEVERE] COMMA
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  LEX[created.size] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.List,size,0,int] +++$+++  LEX[removed.size] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.io.InputStream,close,0,void] +++$+++  LEX[is.read] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,isAbsolute,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getDeclaredField,1,java.lang.reflect.Field] PARA[LIT[Stirng]] +++$+++  EOL TYPE[Field] VAR[java.lang.reflect.Field] OP[assign]
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Boolean] PARENTHESESEND
CALL[java.util.Map,put,2,V] PARA[CALL[java.util.Map.Entry,getKey]] PARA[CALL[java.util.Map.Entry,getValue]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,markSupported,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,read,0,int] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.io.Writer,write,1,void] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[assign] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  VAR[java.lang.Object] EOL IF PARENTHESESSTART
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  EOL ELSE LEX[options.put] PARENTHESESSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  PARENTHESESSTART TYPE[Object] VAR[java.lang.Object] OP[ternaryFalse]
CALL[java.util.UUID,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Iterator,remove,0,void] +++$+++  VAR[java.lang.Object] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,close,0,void] +++$+++  TYPE[ClientStreamAbortedException] CURLYSTART TRY CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.awt.geom.AffineTransform,getTranslateX,0,double] +++$+++  VAR[java.lang.String] OP[assign] LEX[Double.toString] PARENTHESESSTART
CALL[java.awt.geom.AffineTransform,getTranslateY,0,double] +++$+++  OP[sum] OP[sum] LEX[Double.toString] PARENTHESESSTART
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[GregorianCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  EOL CURLYEND LEX[sb.setLength] PARENTHESESSTART
CALL[java.util.Comparator,compare,2,int] PARA[VAR[org.geoserver.wps.CompositeComparator.T]] PARA[VAR[org.geoserver.wps.CompositeComparator.T]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[list.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.OutputStream,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.io.OutputStream] PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.ByteArrayOutputStream,reset,0,void] +++$+++  PARENTHESESSTART VAR[java.io.OutputStream] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.net.URLConnection,connect,0,void] +++$+++  COMMA PARENTHESESEND EOL CURLYEND
CALL[java.net.URLConnection,getInputStream,0,java.io.InputStream] +++$+++  RETURN NEW TYPE[GZIPInputStream] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[reader.getMetadataValue] PARENTHESESSTART
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Throwable,getLocalizedMessage,0,java.lang.String] +++$+++  LEX[LOGGER.log] PARENTHESESSTART LEX[Level.INFO] COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.Class,isPrimitive,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  LEX[Hex.encode] PARENTHESESSTART LEX[digest.digest] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.Number,longValue,0,long] +++$+++  CURLYEND RETURN LEX[BigInteger.valueOf] PARENTHESESSTART
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.logging.Logger,severe,1,void] PARA[CALL[java.lang.Exception,getLocalizedMessage]] +++$+++  PARENTHESESSTART LEX[Level.SEVERE] PARENTHESESEND PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[dataStores.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.FileOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,fine,1,void] PARA[LIT[Stirng]] +++$+++  LEX[Level.FINE] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
