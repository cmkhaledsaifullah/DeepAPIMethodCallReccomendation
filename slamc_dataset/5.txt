CALL[java.io.FileInputStream,close,0,void] +++$+++  LEX[inputStreamReader.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Vector,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Vector,remove,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Vector,size,0,int] +++$+++  OP[sum] EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Activity] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Date,getTime,0,long] +++$+++  CURLYEND LONG VAR[LONG] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  VAR[java.lang.String] EOL WHILE PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  TYPE[MedwanCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.io.FileInputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[java.io.FileInputStream] PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,indexOf]] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[sRow.substring] PARENTHESESSTART COMMA
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  COMMA PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART RETURN LEX[label.substring] PARENTHESESSTART
CALL[java.sql.SQLException,printStackTrace,0,void] +++$+++  TYPE[SQLException] VAR[java.sql.SQLException] PARENTHESESEND CURLYSTART
CALL[java.sql.SQLException,printStackTrace,0,void] +++$+++  TYPE[SQLException] VAR[java.sql.SQLException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isDigit] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[not] LEX[Character.isLetter] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  LEX[im1.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART LEX[Color.WHITE] PARENTHESESEND EOL
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.util.Date,getTime,0,long] +++$+++  VAR[INT] OP[ternaryFalse] VAR[LONG] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.io.FileInputStream,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  TYPE[ArrayList] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[grantTables.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,values,0,java.util.Collection<V>] +++$+++  OP[assign] NEW TYPE[Vector] PARENTHESESSTART
CALL[java.util.Hashtable,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Diagnosis] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.util.SortedSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[KeyValue] PARENTHESESEND
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,lastIndexOf]] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  ELSE CURLYSTART RETURN OP[sum]
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Hashtable,size,0,int] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.awt.geom.PathIterator,isDone,0,boolean] +++$+++  EOL WHILE PARENTHESESSTART OP[not]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  PARENTHESESEND OP[multiply] VAR[DOUBLE] COMMA
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  LEX[result.transform] PARENTHESESSTART LEX[AffineTransform.getTranslateInstance] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[aStart.getX] PARENTHESESSTART PARENTHESESEND OP[multiply]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  EOL DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  CURLYSTART RETURN LEX[Math.abs] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.util.Stack,size]] +++$+++  PARENTHESESEND CURLYSTART LEX[out.print] PARENTHESESSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JComponent]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  RETURN PARENTHESESSTART TYPE[GraphLayout] PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Set,clear,0,void] +++$+++  PARENTHESESSTART VAR[java.util.Collection] PARENTHESESEND EOL
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setClip,1,void] PARA[VAR[java.awt.Shape]] +++$+++  VAR[DOUBLE] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JList,removeListSelectionListener,1,void] PARA[VAR[javax.swing.event.ListSelectionListener]] +++$+++  LEX[ListSelectionListener] VAR[javax.swing.event.ListSelectionListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.ComboBoxEditor,setItem,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[autoComplete.disable] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.Rectangle2D,getMaxY,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.geom.AffineTransform,scale,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  PARENTHESESSTART VAR[java.awt.Shape] PARENTHESESEND EOL
CALL[java.awt.geom.AffineTransform,translate,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  PARENTHESESSTART VAR[java.awt.Shape] PARENTHESESEND EOL
CALL[java.util.Stack,push,1,E] PARA[CALL[java.awt.Graphics2D,getClip]] +++$+++ 
CALL[javax.swing.table.TableModel,getColumnClass,1,java.lang.Class<? extends java.lang.Object>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  LEX[in.length] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[genj.util.Registry] COMMA LEX[pckg.substring] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  TYPE[String] VAR[java.lang.String] OP[assign] OP[sum]
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESEND RETURN EOL RETURN
CALL[java.util.Set,isEmpty,0,boolean] +++$+++  LEX[size--] EOL IF PARENTHESESSTART
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[genj.fo.Format]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[File] ARRAYSTART
CALL[java.awt.geom.Point2D.Float,getX,0,double] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[Component] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  OP[lessThan] TYPE[Property] OP[greaterThan] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[LOG.info] PARENTHESESSTART
CALL[java.net.Socket,getInputStream,0,java.io.InputStream] +++$+++  VAR[java.lang.String] OP[assign] LEX[IPCHelper.read] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] PARENTHESESEND
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  RETURN EOL IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  RETURN EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[false] EOL IF PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.prefs.Preferences,clear,0,void] +++$+++  PARENTHESESEND THROWS LEX[BackingStoreException] CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[Optional.of] PARENTHESESSTART
CALL[javax.swing.tree.DefaultMutableTreeNode,getChildCount,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Entry] VAR[net.sf.jabref.collab.FileUpdateMonitor.Entry] OP[assign]
CALL[javax.swing.JRadioButton,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESEND EOL CURLYEND EOL
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESSTART NEW TYPE[Font] PARENTHESESSTART
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JTextField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[java.awt.Component]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[javax.swing.JButton,setPreferredSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JButton,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[fileLocationField.setEnabled] PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  LEX[e.getComponent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.event.MouseEvent,getY,0,int] +++$+++  LEX[e.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JComboBox,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getComponent,0,java.awt.Component] +++$+++  PARENTHESESEND CURLYSTART LEX[popMenu.show] PARENTHESESSTART
CALL[javax.swing.JComboBox,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.DefaultListModel,elements,0,java.util.Enumeration<E>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[res.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.Enumeration,nextElement]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[FIELD[TransferableBibtexEntry]] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND CURLYSTART RETURN
CALL[net.sf.jabref.gui.EntryTypeDialog.TypeButton,addActionListener,1,void] PARA[THIS[null]] +++$+++  COMMA LEX[entryType] PARENTHESESEND EOL
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[FIELD[GroupTreeNodeViewModel]] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.datatransfer.Clipboard,setContents,2,void] PARA[VAR[java.awt.datatransfer.StringSelection]] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JPopupMenu,setPopupSize,2,void] PARA[CALL[javax.swing.text.JTextComponent,getWidth]] PARA[LIT[Integer]] +++$+++  LEX[renderer.selectItem] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,isEmpty,0,boolean] +++$+++  EOL ASSERT PARENTHESESSTART OP[not]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[javax.swing.text.JTextComponent,getSelectionStart,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  COMMA LEX[sno.subSequence] PARENTHESESSTART COMMA
CALL[javax.swing.JTextArea,setColumns,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[cleanUpRenamePDFonlyRelativePaths.setEnabled] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.concurrent.Future,get,0,V] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.Thread] PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.nio.file.Path,getFileName,0,java.nio.file.Path] +++$+++  CURLYSTART RETURN LEX[file.resolveSibling] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  CURLYEND CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sf.jabref.logic.net.ProxyPreferences]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[null,singletonList]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Comparator,compare,2,int] PARA[VAR[net.sf.jabref.logic.bibtex.comparator.FieldComparatorStack.T]] PARA[VAR[net.sf.jabref.logic.bibtex.comparator.FieldComparatorStack.T]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  LEX[right.get] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[java.io.OutputStream,flush,0,void] +++$+++  LEX[out.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,toString,0,java.lang.String] +++$+++  NEW TYPE[ParseException] PARENTHESESSTART OP[sum]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  COMMA LEX[Boolean.FALSE] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.List,get]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[INT] EOL CURLYEND RETURN
CALL[java.util.Set,remove,1,boolean] PARA[VAR[net.sf.jabref.model.entry.BibtexSingleField.Flag]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,addAll,1,boolean] PARA[CALL[null,getAllPublicFieldNames]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND PARENTHESESEND OP[assign] OP[assign]
CALL[java.util.ArrayList,addAll,1,boolean] PARA[CALL[null,asList]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Collection,contains,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.List,set,2,E] PARA[VAR[INT]] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Optional,equals,1,boolean] PARA[VAR[java.util.Optional]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Set,size,0,int] +++$+++  RETURN PARENTHESESSTART DOUBLE PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[sum] OP[sum] VAR[INT] ARRAYSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sf.jabref.model.FieldChange]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTabbedPane,getTabCount,0,int] +++$+++  PARENTHESESEND EOL LEX[tabbedPane.setSelectedIndex] PARENTHESESSTART
CALL[javax.swing.table.TableModel,getRowCount,0,int] +++$+++  OP[assign] NEW INT ARRAYSTART
CALL[javax.swing.JTable,getTableHeader,0,javax.swing.table.JTableHeader] +++$+++  EOL TYPE[JTableHeader] VAR[javax.swing.table.JTableHeader] OP[assign]
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[BeanInstance] PARENTHESESEND
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JCheckBox,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  TYPE[RemoteExperiment] PARENTHESESEND LEX[exp] EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JComboBox,setMinimumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JButton,setMinimumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[removeNotesFrame] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL VAR[java.lang.Object] OP[assign]
CALL[javax.swing.JFrame,getTitle,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[m_FramedOutput.remove] PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[StringBuffer] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] OP[assign] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Random,nextDouble,0,double] +++$+++  EOL RETURN VAR[DOUBLE] OP[sum]
CALL[javax.swing.JTable,getParent,0,java.awt.Container] +++$+++  IF PARENTHESESSTART OP[not] PARENTHESESSTART
CALL[java.io.StreamTokenizer,resetSyntax,0,void] +++$+++  LEX[alterSyntax] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.StreamTokenizer,slashStarComments,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Vector,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYEND CURLYEND LEX[m_lines.addElement] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.PrintStream,close,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[Character.isJavaIdentifierPart] PARENTHESESSTART
CALL[javax.swing.JList,setSelectedIndices,1,void] PARA[VAR[INT]] +++$+++  OP[sum] VAR[INT] EOL CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.awt.Graphics2D,setXORMode,1,void] PARA[VAR[java.awt.Color]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawString,3,void] PARA[VAR[java.lang.String]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,getDeviceConfiguration,0,java.awt.GraphicsConfiguration] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,getFontMetrics,0,java.awt.FontMetrics] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,getFontRenderContext,0,java.awt.font.FontRenderContext] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,getRenderingHints,0,java.awt.RenderingHints] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,rotate,1,void] PARA[VAR[DOUBLE]] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JRadioButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[greaterThan] OP[assign] OP[ternaryTrue]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[greaterThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataOutput,writeChar,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.DataInput,readLong,0,long] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataInput,readUTF,0,java.lang.String] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[sum] OP[assign] LEX[fontMetrics.charWidth] PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.Runnable,run,0,void] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[javax.swing.DefaultCellEditor,removeCellEditorListener,1,void] PARA[VAR[javax.swing.event.CellEditorListener]] +++$+++  LEX[CellEditorListener] VAR[javax.swing.event.CellEditorListener] PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.logging.Logger,addHandler,1,void] PARA[VAR[java.util.logging.Handler]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.Action,actionPerformed,1,void] PARA[VAR[java.awt.event.ActionEvent]] +++$+++  LEX[ActionEvent] VAR[java.awt.event.ActionEvent] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTable,getEditingRow,0,int] +++$+++  LEX[predecessorTable.setValueAt] PARENTHESESSTART LEX[selectedItem] COMMA
CALL[javax.swing.JComponent,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  COMMA LEX[BorderLayout.CENTER] PARENTHESESEND EOL
CALL[javax.swing.JComponent,setBorder,1,void] PARA[CALL[null,createTitledBorder]] +++$+++  COMMA LEX[Color.BLACK] PARENTHESESEND EOL
CALL[javax.swing.JPanel,getLayout,0,java.awt.LayoutManager] +++$+++  OP[assign] PARENTHESESSTART TYPE[CardLayout] PARENTHESESEND
CALL[javax.swing.Box,add,1,java.awt.Component] PARA[CALL[null,createHorizontalStrut]] +++$+++  PARENTHESESSTART VAR[java.awt.Component] PARENTHESESEND EOL
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  CURLYSTART RETURN LEX[shortCurrentDateFormat.format] PARENTHESESSTART
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  CURLYSTART RETURN LEX[currentTimeFormat.format] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[result.add] PARENTHESESSTART
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  TYPE[Properties] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[thoseFields.add] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[biz.ganttproject.core.chart.canvas.Canvas.Text]] +++$+++  COMMA LEX[myTextIndex] PARENTHESESEND EOL
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Text] VAR[biz.ganttproject.core.chart.canvas.Canvas.Text] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[FontSubstitution] VAR[org.ganttproject.impex.htmlpdf.itext.FontSubstitutionModel.FontSubstitution] OP[assign]
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  CURLYSTART RETURN LEX[Collections.unmodifiableCollection] PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Collection,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.Collection,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Container,getTreeLock,0,java.lang.Object] +++$+++  PARENTHESESEND CURLYSTART SYNCHRONIZED PARENTHESESSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.reflect.Method,getName,0,java.lang.String] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[proxySignature.equals] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,containsAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,addAll,2,boolean] PARA[VAR[INT]] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[T] VAR[org.argouml.cognitive.ListSet.T] OP[assign]
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,listIterator,1,java.util.ListIterator<E>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.ResourceBundle]] +++$+++  EOL CURLYEND CURLYEND CURLYEND
CALL[java.awt.Component,getParent,0,java.awt.Container] +++$+++  EOL WHILE PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.RootPaneContainer,getGlassPane,0,java.awt.Component] +++$+++  RETURN PARENTHESESSTART TYPE[GlassPane] PARENTHESESEND
CALL[javax.swing.JMenuItem,setToolTipText,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[javax.swing.KeyStroke]] +++$+++  VAR[javax.swing.KeyStroke] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,contains,1,boolean] PARA[VAR[javax.swing.tree.TreeModel]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.tree.TreeModel]] +++$+++  CURLYSTART RETURN EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.tree.TreeModel]] +++$+++  LEX[TreeModel] VAR[javax.swing.tree.TreeModel] PARENTHESESEND CURLYSTART
CALL[javax.swing.JToolBar,isVisible,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.awt.Graphics2D,setClip,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.Composite] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.Graphics2D] PARENTHESESEND EOL
CALL[java.awt.Rectangle,getX,0,double] +++$+++  PARENTHESESEND CURLYSTART VAR[DOUBLE] OP[assign]
CALL[java.awt.Rectangle,getX,0,double] +++$+++  PARENTHESESEND CURLYSTART VAR[DOUBLE] OP[assign]
CALL[java.awt.Rectangle,getX,0,double] +++$+++  PARENTHESESEND CURLYSTART VAR[DOUBLE] OP[assign]
CALL[javax.swing.event.CaretEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[JTextComponent] PARENTHESESEND
CALL[java.awt.event.FocusEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[JTextComponent] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  LEX[filename.substring] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  TYPE[FigEdgeAssociationClass] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Hashtable,contains,1,boolean] PARA[VAR[java.lang.Integer]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.Action,getValue,1,java.lang.Object] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  RETURN LEX[s.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[org.argouml.language.java.reveng.classfile.ParserUtils.Token,getValue]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.Collection,remove,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.GregorianCalendar,getTime,0,java.util.Date] +++$+++  CURLYEND TYPE[Date] VAR[java.util.Date] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.Map]] +++$+++  PARENTHESESSTART LEX[String.CASE_INSENSITIVE_ORDER] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  LEX[dst.getTextContent] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[ConvertUtils.toBoolean] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  ARRAYEND OP[assign] LEX[Float.parseFloat] PARENTHESESSTART
CALL[java.awt.Component,getBackground,0,java.awt.Color] +++$+++  NULL OP[ternaryTrue] LEX[Color.GRAY] OP[ternaryFalse]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,put,2,void] PARA[VAR[java.lang.String]] PARA[CALL[java.lang.StringBuffer,toString]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  TYPE[Object] ARRAYSTART ARRAYEND CURLYSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  OP[lessThan] TYPE[String] OP[greaterThan] PARENTHESESSTART
CALL[java.util.Map,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Locale,getLanguage,0,java.lang.String] +++$+++  LEX[PREFS.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.prefs.Preferences,put,2,void] PARA[VAR[java.lang.String]] PARA[CALL[java.util.Locale,getLanguage]] +++$+++  LEX[Locale] VAR[java.util.Locale] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,put,2,void] PARA[VAR[java.lang.String]] PARA[CALL[java.util.Locale,getCountry]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[jmemorize.core.Settings.CardFontObserver]] +++$+++  LEX[CardFontObserver] VAR[jmemorize.core.Settings.CardFontObserver] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,putBoolean,2,void] PARA[VAR[java.lang.String]] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,putInt,2,void] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFrame,getLocation,0,java.awt.Point] +++$+++  LEX[Settings.storeFramePosition] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.List,equals,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.zip.ZipOutputStream,closeEntry,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,getParent,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextPane,requestFocus,0,void] +++$+++  LEX[requestFocus] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[jmemorize.gui.swing.panels.CardSidePanel.CardImageObserver]] +++$+++  PARENTHESESSTART VAR[jmemorize.gui.swing.panels.CardSidePanel.CardImageObserver] PARENTHESESEND PARENTHESESEND
CALL[javax.swing.JEditorPane,getEditorKit,0,javax.swing.text.EditorKit] +++$+++  OP[assign] PARENTHESESSTART TYPE[StyledEditorKit] PARENTHESESEND
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[javax.swing.JSpinner,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,getComponent,1,java.awt.Component] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,remove,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[jmemorize.gui.swing.panels.CardPanel.ShowCardSideButton,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND PARENTHESESEND
CALL[javax.swing.JPanel,getComponent,1,java.awt.Component] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Component] VAR[java.awt.Component] OP[assign]
CALL[javax.swing.JTextPane,getDocument,0,javax.swing.text.Document] +++$+++  OP[assign] PARENTHESESSTART TYPE[StyledDocument] PARENTHESESEND
CALL[java.io.InputStream,read,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.io.FileInputStream,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.io.FileWriter,write,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  PARENTHESESSTART LEX[image.getWidth] PARENTHESESSTART PARENTHESESEND
CALL[java.awt.image.RenderedImage,getProperty,1,java.lang.Object] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Histogram] PARENTHESESEND
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.File,deleteOnExit,0,void] +++$+++  OP[sum] VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.Writer,close,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[noteLabel.setText] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  DO CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.Thread,start,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[DOUBLE] EOL IF PARENTHESESSTART
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  COMMA LEX[RenderingHints.VALUE_RENDER_QUALITY] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.awt.Color,getGreen,0,int] +++$+++  LEX[color.getRed] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  EOL ASSERT LEX[original.equals] PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  EOL ASSERT LEX[copy.equals] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  PARENTHESESEND PARENTHESESEND EOL ASSERT
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[field.setText] PARENTHESESSTART
CALL[javax.swing.JProgressBar,getMaximum,0,int] +++$+++  PARENTHESESEND EOL LEX[progressBar.setValue] PARENTHESESSTART
CALL[javax.swing.JTextField,setText,1,void] PARA[CALL[java.io.File,getAbsolutePath]] +++$+++  LEX[File] VAR[java.io.File] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,setDialogTitle,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,setDialogTitle,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.event.ActionListener,actionPerformed,1,void] PARA[VAR[java.awt.event.ActionEvent]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.event.ChangeListener,stateChanged,1,void] PARA[VAR[javax.swing.event.ChangeEvent]] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[javax.swing.ListSelectionModel,getLeadSelectionIndex,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ListSelectionModel,addSelectionInterval,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.awt.image.RenderedImage,getWidth,0,int] +++$+++  VAR[java.awt.image.RenderedImage] EOL VAR[INT] OP[assign]
CALL[javax.swing.JList,getSelectedValue,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[JFMFile] PARENTHESESEND
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JLabel,setText,1,void] PARA[LIT[Stirng]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[wholeWordCheckBox.isSelected] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[replaceText.getText] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[fileStartCheckBox.isSelected] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[fileStartCheckBox.isSelected] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  LEX[JSONMarshaller.marshallArray] PARENTHESESSTART LEX[writer] COMMA
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] COMMA
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.MenuItem,addActionListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.CheckboxMenuItem,addItemListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.CheckboxMenuItem,setActionCommand,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[java.net.URL,getContent,0,java.lang.Object] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Vector,size,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[redoItem.setEnabled] PARENTHESESSTART
CALL[java.util.Vector,clear,0,void] +++$+++  LEX[clearUndoRedo] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.Double,doubleValue,0,double] +++$+++  PARENTHESESEND RETURN LEX[Money.getInstance] PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Date,before,1,boolean] PARA[VAR[java.util.Date]] +++$+++  VAR[java.util.Date] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.GregorianCalendar,setTimeInMillis,1,void] PARA[LIT[Integer]] +++$+++  LEX[DateTime.calendarInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[LIT[Stirng]] +++$+++  NULL PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.util.LinkedList,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,removeLast,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,retainAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.Integer,intValue,0,int] +++$+++  VAR[java.lang.Integer] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Assignment] PARENTHESESEND
CALL[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode,getUserObject,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[HasDependencies] PARENTHESESEND
CALL[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode,children,0,java.util.Enumeration<E>] +++$+++  PARENTHESESSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.io.ObjectOutputStream,writeLong,1,void] PARA[VAR[LONG]] +++$+++  PARENTHESESSTART VAR[LONG] PARENTHESESEND EOL
CALL[java.io.ObjectInputStream,readLong,0,long] +++$+++  PARENTHESESEND EOL LEX[t.setStart] PARENTHESESSTART
CALL[java.util.ListIterator,add,1,void] PARA[VAR[com.projity.pm.criticalpath.PredecessorTaskList.TaskReference]] +++$+++  OP[assign] LEX[previousTask] PARENTHESESEND CURLYSTART
CALL[java.util.GregorianCalendar,getTimeInMillis,0,long] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.awt.Color,getRGB,0,int] +++$+++  VAR[INT] ARRAYEND OP[greaterThan] OP[ternaryTrue]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  EOL LEX[log.debug] PARENTHESESSTART OP[sum]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Vector,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND RETURN
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  EOL RETURN LEX[df.format] PARENTHESESSTART
CALL[java.util.Calendar,setTimeInMillis,1,void] PARA[VAR[LONG]] +++$+++  LONG VAR[LONG] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  VAR[BOOLEAN] PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[m_field] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  CURLYEND CASE OP[ternaryFalse] CURLYSTART
CALL[java.io.FileOutputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.lang.Number,doubleValue,0,double] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Date,getTime,0,long] +++$+++  OP[assign] NEW TYPE[Date] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  OP[sum] OP[assign] VAR[INT] EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sub]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sub]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.Date,hashCode,0,int] +++$+++  LEX[m_start.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.lang.Integer,intValue,0,int] +++$+++  LEX[result] OP[assign] TYPE[DAY_ARRAY] ARRAYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART RETURN PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.Number,doubleValue,0,double] +++$+++  OP[ternaryFalse] NEW TYPE[BigDecimal] PARENTHESESSTART
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Number,doubleValue,0,double] +++$+++  OP[ternaryFalse] NEW TYPE[BigDecimal] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.io.PrintWriter,print,1,void] PARA[VAR[INT]] +++$+++  LEX[pw.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[java.io.PrintWriter,flush,0,void] +++$+++  OP[sum] LEX[m_insideText] PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.util.List,remove,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[BYTE] OP[assign]
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.PrintWriter,flush,0,void] +++$+++  LEX[pw.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.Integer]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Class]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  LEX[false] EOL IF PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.event.ChangeEvent,getSource,0,java.lang.Object] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.event.ChangeEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[LookupField] PARENTHESESEND
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JLabel,setText,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] NULL PARENTHESESEND
CALL[javax.swing.table.TableCellEditor,shouldSelectCell,1,boolean] PARA[VAR[java.util.EventObject]] +++$+++  VAR[java.util.EventObject] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.table.TableCellEditor,stopCellEditing,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.geom.GeneralPath,moveTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  VAR[FLOAT] OP[assign] VAR[FLOAT] EOL
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Object]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.List,clear,0,void] +++$+++  LEX[clearEvents] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  VAR[java.util.ListIterator] OP[assign] LEX[intervals.listIterator] PARENTHESESSTART
CALL[java.awt.Point,getX,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND RETURN EOL RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] LEX[t.substring] PARENTHESESSTART COMMA
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.awt.print.PageFormat,getImageableHeight,0,double] +++$+++  PARENTHESESEND LEX[Math.ceil] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.Timer,setInitialDelay,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,getInitialDelay,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.FontMetrics,stringWidth,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  VAR[INT] TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  VAR[java.awt.image.BufferedImage] COMMA COMMA COMMA
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.Font,getSize,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[multiply] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[src.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.Point2D,clone,0,java.lang.Object] +++$+++  RETURN PARENTHESESSTART TYPE[Point2D] PARENTHESESEND
CALL[java.awt.image.Raster,getDataElements,5,java.lang.Object] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.awt.GraphicsEnvironment,getDefaultScreenDevice,0,java.awt.GraphicsDevice] +++$+++  EOL TYPE[GraphicsDevice] VAR[java.awt.GraphicsDevice] OP[assign]
CALL[java.awt.image.BufferedImage,getRGB,2,int] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.Component,isDisplayable,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[c.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.text.DecimalFormat,format]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[true] EOL
CALL[java.io.File,toURL,0,java.net.URL] +++$+++  EOL TYPE[URL] VAR[java.net.URL] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.net.URL,getPath,0,java.lang.String] +++$+++  EOL CURLYEND LEX[connection.chdir] PARENTHESESSTART
CALL[java.net.URL,getPath,0,java.lang.String] +++$+++  EOL CURLYEND LEX[connection.chdir] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  RETURN LEX[s.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.table.JTableHeader,getDefaultRenderer,0,javax.swing.table.TableCellRenderer] +++$+++  NULL PARENTHESESEND VAR[javax.swing.table.TableCellRenderer] OP[assign]
CALL[javax.swing.table.TableColumnModel,getColumn,1,javax.swing.table.TableColumn] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[TableColumn] VAR[javax.swing.table.TableColumn] OP[assign]
CALL[javax.swing.JTable,setRowSorter,1,void] PARA[VAR[javax.swing.table.TableRowSorter]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.io.FileOutputStream,close,0,void] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART OP[sum] PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintStream,println,1,void] PARA[CALL[javax.swing.JTextArea,getText]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JProgressBar,setMaximum,1,void] PARA[LIT[Integer]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JComboBox,addItem,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.Set,clear,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Set,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[p] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  OP[sum] PARENTHESESEND EOL RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[File.separator] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[cp.substring] PARENTHESESSTART COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.util.Map,get]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] OP[multiply] VAR[INT] OP[sum]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JTextArea,setText,1,void] PARA[LIT[Stirng]] +++$+++  LEX[cleanConsole] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Collection,size,0,int] +++$+++  EOL CURLYEND VAR[DOUBLE] OP[assign]
CALL[java.util.logging.Logger,info,1,void] PARA[LIT[Stirng]] +++$+++  LEX[processLogIn] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Collection,size,0,int] +++$+++  OP[lessThan] TYPE[Vec] OP[greaterThan] PARENTHESESSTART
CALL[arch.WriteStatusThread,start,0,void] +++$+++  FIELD[owner,arch.WriteStatusThread] OP[assign] LEX[owner] EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[jasdl.bridge.mapping.MappingManager.X]] +++$+++  CURLYSTART TYPE[Y] VAR[jasdl.bridge.mapping.MappingManager.Y] OP[assign]
CALL[java.util.HashMap,remove,1,V] PARA[VAR[jasdl.bridge.mapping.MappingManager.X]] +++$+++  CURLYSTART TYPE[Y] VAR[jasdl.bridge.mapping.MappingManager.Y] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  CASE OP[ternaryFalse] CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  LEX[buf.toString] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Color] PARENTHESESEND
CALL[java.io.FileWriter,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.FileWriter,close,0,void] +++$+++  LEX[fw.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.TreeSet,addAll,1,boolean] PARA[VAR[java.util.ArrayList]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[result.put] PARENTHESESSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  EOL LEX[logger.info] PARENTHESESSTART OP[sum]
CALL[java.awt.Graphics2D,setComposite,1,void] PARA[VAR[java.awt.Composite]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.UIDefaults,get,1,java.lang.Object] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Graphics2D,setComposite,1,void] PARA[CALL[null,getInstance]] +++$+++  LEX[g2d.getColor] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.AbstractButton,isContentAreaFilled,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Component,getParent,0,java.awt.Container] +++$+++  PARENTHESESEND CURLYSTART VAR[java.awt.Component] OP[assign]
CALL[javax.swing.JComponent,getWidth,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.Graphics,fillRect,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.TexturePaint] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.lang.Runnable,run,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,draw,1,void] PARA[VAR[java.awt.geom.GeneralPath]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.util.Date,getTime,0,long] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getTranslateInstance]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART LEX[g.setColor] PARENTHESESSTART
CALL[javax.swing.JTextArea,setWrapStyleWord,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[gui.showErrorMessage] PARENTHESESSTART COMMA
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.incrementMapCount(java.util.Map<K, java.lang.Integer>, K).K]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[T] VAR[net.sf.freecol.common.util.CollectionUtils.reverse(java.util.List<T>).T] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  LEX[list.set] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW BYTE ARRAYSTART
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.io.File,canRead,0,boolean] +++$+++  OP[ternaryTrue] OP[ternaryFalse] PARENTHESESSTART OP[not]
CALL[java.io.File,exists,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Change] VAR[net.sf.freecol.server.control.ChangeSet.Change] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,createNewFile,0,boolean] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  LEX[String.valueOf] PARENTHESESSTART LEX[Character.toUpperCase] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] LEX[dateStr.substring] PARENTHESESSTART COMMA
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND LEX[logger.debug] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  COMMA VAR[java.lang.String] COMMA COMMA
CALL[javax.swing.JSplitPane,setLeftComponent,1,void] PARA[VAR[javax.swing.JComponent]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setPaint,1,void] PARA[VAR[java.awt.Paint]] +++$+++  COMMA LEX[RenderingHints.VALUE_ANTIALIAS_ON] PARENTHESESEND EOL
CALL[java.io.File,delete,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] LEX[line.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] LEX[line.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  LEX[entry.getKey] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[CALL[java.lang.String,length]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  LEX[iTag.setTrackNumber] PARENTHESESSTART LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.TableModelListener]] +++$+++  LEX[TableModelListener] VAR[javax.swing.event.TableModelListener] PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.net.HttpURLConnection,getContentLength,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  EOL CURLYEND VAR[java.lang.Throwable] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART RETURN LEX[function.apply] PARENTHESESSTART
CALL[java.lang.Thread,setPriority,1,void] PARA[VAR[INT]] +++$+++  LEX[thread.getPriority] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[greaterThan] OP[assign]
CALL[java.nio.file.Path,getParent,0,java.nio.file.Path] +++$+++  PARENTHESESEND EOL LEX[Files.createDirectories] PARENTHESESSTART
CALL[java.io.File,toPath,0,java.nio.file.Path] +++$+++  LEX[IOException] CURLYSTART LEX[Files.createDirectories] PARENTHESESSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART FIELD[length,BYTE] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  LEX[filename.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Collection,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[CALL[java.io.File,toString]] +++$+++  VAR[INT] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.nio.file.Path,getNameCount,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.event.ListDataEvent,getSource,0,java.lang.Object] +++$+++  OP[lessThan] TYPE[T] OP[greaterThan] PARENTHESESEND
CALL[java.awt.geom.RectangularShape,getCenterX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.geom.RectangularShape,getMinY,0,double] +++$+++  LEX[shape.getCenterX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Color,getGreen,0,int] +++$+++  LEX[c1.getRed] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Color,getRGB,0,int] +++$+++  OP[lessThan] PARENTHESESEND OP[bitwiseOr] PARENTHESESSTART
CALL[javax.swing.Icon,getIconWidth,0,int] +++$+++  RETURN NEW TYPE[Dimension] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  LEX[keys.size] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[net.filebot.Logging.ConsoleHandler,setLevel,1,void] PARA[VAR[java.util.logging.Level]] +++$+++  TYPE[ConsoleHandler] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Scanner,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.PrintWriter,format,2,java.io.PrintWriter] PARA[LIT[Stirng]] PARA[VAR[java.nio.charset.Charset]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.function.Function,apply,1,R] PARA[CALL[net.filebot.Resource,get]] +++$+++  THROWS LEX[Exception] CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  VAR[java.awt.event.ActionEvent] PARENTHESESEND EOL RETURN
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[greaterThan] OP[ternaryTrue]
CALL[javax.swing.JTextField,getClientProperty,1,java.lang.Object] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.event.ActionEvent,getModifiers,0,int] +++$+++  CURLYSTART RETURN PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JLabel,setText,1,void] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JComboBox]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND COMMA PARENTHESESEND EOL
CALL[java.util.Formatter,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.File,isAbsolute,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[net.filebot.cli.GroovyPad.Runner,isDone,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Float,floatValue,0,float] +++$+++  VAR[java.lang.Float] OP[assign] LEX[Float.valueOf] PARENTHESESSTART
CALL[java.lang.Integer,intValue,0,int] +++$+++  VAR[org.jcandle.util.FundamentalStatus] COMMA LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.Float,floatValue,0,float] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.Float,floatValue,0,float] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[org.jcandle.model.Currency,ordinal,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.Icon,getIconWidth,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYSTART VAR[java.lang.Object] OP[assign] PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  VAR[INT] TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.lang.Double,toString,0,java.lang.String] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  LEX[sent.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.JButton,isVisible,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.Timer,isRunning,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART INT VAR[INT] OP[assign]
CALL[java.awt.print.PrinterJob,getPrintService,0,javax.print.PrintService] +++$+++  TRY CURLYSTART LEX[job.setPrintService] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  TYPE[Properties] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[SQLTable] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[javax.swing.JTable,getSelectedRow,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.geom.AffineTransform,preConcatenate,1,void] PARA[CALL[java.awt.Font,getTransform]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,size,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.io.File,mkdirs,0,boolean] +++$+++  LEX[file.exists] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[out.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[out.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[VAR[java.awt.event.TextListener]] +++$+++  LEX[TextListener] VAR[java.awt.event.TextListener] PARENTHESESEND CURLYSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  TYPE[StringList] PARENTHESESSTART LEX[orig.split] PARENTHESESSTART
CALL[java.io.ObjectOutput,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.Writer,flush,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.util.Stack,push,1,E] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND EOL CURLYEND ELSE
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.Font,getFamily,0,java.lang.String] +++$+++  LEX[SyntaxUtilities.parseStyle] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.awt.Color,getGreen]] +++$+++  LEX[cs.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Color,getBlue,0,int] +++$+++  PARENTHESESEND EOL LEX[cs.append] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gjt.sp.jedit.textarea.ExtensionManager.Entry]] +++$+++  OP[sum] OP[sum] EOL CURLYEND
CALL[java.awt.FontMetrics,getHeight,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.Timer,start,0,void] +++$+++  LEX[structureTimer.stop] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  LEX[VFSBrowser.browseDirectory] PARENTHESESSTART LEX[view] COMMA
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  LEX[jEdit.openFile] PARENTHESESSTART LEX[editPane] COMMA
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[p1.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[sub] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  BREAK EOL DEFAULT OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.Timer,stop,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Entry] VAR[org.gjt.sp.jedit.options.BrowserColorsModel.Entry] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Entry] VAR[org.gjt.sp.jedit.options.BrowserColorsModel.Entry] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  COMMA PARENTHESESEND COMMA COMMA
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.BufferedReader,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.awt.datatransfer.Transferable,getTransferDataFlavors,0,java.awt.datatransfer.DataFlavor[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.awt.datatransfer.DataFlavor] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.net.URL,openStream,0,java.io.InputStream] +++$+++  OP[bitwiseAnd] OP[not] LEX[XMLUtilities.parseXML] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[org.gjt.sp.jedit.ServiceManager.Descriptor]] PARA[VAR[org.gjt.sp.jedit.ServiceManager.Descriptor]] +++$+++  COMMA LEX[plugin] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,3,java.lang.StringBuilder] PARA[VAR[CHAR]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[StringBuilder] VAR[java.lang.StringBuilder] PARENTHESESEND CURLYSTART
CALL[java.lang.String,regionMatches,5,boolean] PARA[LIT[Boolean]] PARA[LIT[Integer]] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.net.HttpURLConnection,getResponseCode,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.net.HttpURLConnection,getResponseMessage,0,java.lang.String] +++$+++  LEX[c.getResponseCode] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gjt.sp.jedit.pluginmgr.PluginList.PluginSet]] +++$+++  LEX[PluginSet] VAR[org.gjt.sp.jedit.pluginmgr.PluginList.PluginSet] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[sum] EOL LEX[buf.append] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[sum] OP[assign]
CALL[java.util.Properties,putAll,1,void] PARA[VAR[java.util.Properties]] +++$+++  VAR[java.util.Properties] OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND
CALL[java.util.Properties,putAll,1,void] PARA[VAR[java.util.Properties]] +++$+++  PARENTHESESSTART VAR[java.util.Properties] PARENTHESESEND EOL
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.Timer,start,0,void] +++$+++  LEX[timer.setInitialDelay] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextArea,getText,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  LEX[buf.toString] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Timer,start,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,indexOf,1,int] PARA[CALL[null,valueOf]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Component,hashCode,0,int] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.awt.event.KeyEvent,consume,0,void] +++$+++  CURLYSTART CURLYEND PARENTHESESEND EOL
CALL[java.util.Stack,elementAt,1,E] PARA[LIT[Integer]] +++$+++  RETURN PARENTHESESSTART TYPE[Node] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.awt.event.ActionEvent,getWhen,0,long] +++$+++  LEX[evt.getActionCommand] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[javax.swing.tree.DefaultTreeModel,getPathToRoot,1,javax.swing.tree.TreeNode[]] PARA[VAR[javax.swing.tree.DefaultMutableTreeNode]] +++$+++  OP[assign] NEW TYPE[TreePath] PARENTHESESSTART
CALL[java.lang.Exception,toString,0,java.lang.String] +++$+++  TYPE[String] ARRAYSTART ARRAYEND CURLYSTART
CALL[java.awt.geom.Rectangle2D,getWidth,0,double] +++$+++  OP[sum] PARENTHESESSTART VAR[DOUBLE] OP[sub]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  COMMA LEX[EditPlugin.class] COMMA OP[sum]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.util.Hashtable,clear,0,void] +++$+++  LEX[removeAllKeyBindings] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JRadioButtonMenuItem,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JMenu,getMenuComponentCount,0,int] +++$+++  VAR[javax.swing.JMenuItem] EOL IF PARENTHESESSTART
CALL[java.util.Set,size,0,int] +++$+++  COMMA COMMA VAR[java.lang.String] COMMA
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] THIS PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Set,add,1,boolean] PARA[CALL[null,valueOf]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.io.FileOutputStream,close,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[sum] PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.ListIterator,hasNext,0,boolean] +++$+++  LEX[documentTree.listIterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,keys,0,java.util.Enumeration<K>] +++$+++  TYPE[Object] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESEND CURLYSTART CURLYEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.lang.Long,longValue,0,long] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  BREAK EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  OP[sum] EOL CURLYEND RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] PARENTHESESSTART LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  EOL ASSERT VAR[INT] OP[lessThan]
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.Closeable,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[name.charAt] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.FractionalMultiset.K]] +++$+++  CURLYSTART TYPE[Double] VAR[java.lang.Double] OP[assign]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  PARENTHESESEND OP[sub] LEX[System.identityHashCode] PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[edu.umd.cs.findbugs.util.MultiMap.K]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.util.Bag.E]] PARA[LIT[Integer]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K1]] +++$+++  TYPE[V] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K1]] PARA[VAR[java.util.Map]] +++$+++  PARENTHESESSTART VAR[java.util.Map] PARENTHESESEND EOL
CALL[java.util.concurrent.CountDownLatch,await,0,void] +++$+++  PARENTHESESEND THROWS LEX[InterruptedException] CURLYSTART
CALL[java.util.concurrent.CountDownLatch,getCount,0,long] +++$+++  OP[not] VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[IOException] CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] EOL VAR[INT] OP[lessThan]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] EOL CURLYEND RETURN
CALL[java.util.Properties,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[edu.umd.cs.findbugs.FindBugsMain]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[edu.umd.cs.findbugs.ResourceCollection.Resource]] +++$+++  LEX[Resource] VAR[edu.umd.cs.findbugs.ResourceCollection.Resource] PARENTHESESEND CURLYSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  VAR[BYTE] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[sub] OP[assign] VAR[INT] EOL
CALL[java.io.OutputStream,close,0,void] +++$+++  EOL CURLYEND TRY CURLYSTART
CALL[java.io.InputStream,skip,1,long] PARA[VAR[LONG]] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYEND TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Set,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Set,hashCode,0,int] +++$+++  OP[sum] VAR[INT] OP[sum] OP[multiply]
CALL[java.util.Map,hashCode,0,int] +++$+++  LEX[recentProjectsList.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.Map,hashCode,0,int] +++$+++  LEX[effort.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[null,valueOf]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[edu.umd.cs.findbugs.ba.SourceInfoMap.SourceLineRange]] +++$+++  LEX[SourceLineRange] VAR[edu.umd.cs.findbugs.ba.SourceInfoMap.SourceLineRange] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.Object,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.Object,hashCode,0,int] +++$+++  VAR[INT] OP[sum] OP[assign] OP[multiply]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.InheritableThreadLocal,get,0,T] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.BitSet,set,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.BitSet,set,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.util.Set,add,1,boolean] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[edu.umd.cs.findbugs.BugPattern]] +++$+++  VAR[edu.umd.cs.findbugs.BugPattern] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[strings.contains] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[signature] PARENTHESESEND EOL
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  EOL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[VertexType] VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType] OP[assign]
CALL[java.util.IdentityHashMap,get,1,V] PARA[VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType]] +++$+++  VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.SortedMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL VAR[java.util.zip.ZipOutputStream] OP[assign]
CALL[java.util.zip.ZipEntry,getName,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[ZipEntry] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[multiply]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JMenu,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JCheckBox]] +++$+++  COMMA LEX[sortable] PARENTHESESEND EOL
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  PARENTHESESEND EOL LEX[project.setCurrentWorkingDirectory] PARENTHESESSTART
CALL[java.util.ArrayList,remove,1,boolean] PARA[VAR[java.io.File]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalGlue]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[edu.umd.cs.findbugs.gui2.SourceDirectoryWizard,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.awt.Graphics2D,fillOval,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  IF PARENTHESESSTART LEX[KEYWORDS.contains] PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.Integer]] +++$+++  LEX[Integer] VAR[java.lang.Integer] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] PARENTHESESEND VAR[INT] OP[assign]
CALL[java.util.Vector,elements,0,java.util.Enumeration<E>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,internalsprintf]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL ELSE
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] COMMA
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[sub] VAR[INT] EOL RETURN
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,writeFloat,1,void] PARA[VAR[FLOAT]] +++$+++  ARRAYSTART ARRAYEND PARENTHESESEND EOL
CALL[java.io.RandomAccessFile,writeByte,1,void] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.LinkedList,removeFirst,0,E] +++$+++  OP[ternaryTrue] PARENTHESESSTART TYPE[Jake2InputEvent] PARENTHESESEND
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[Com.Println] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  OP[sum] VAR[java.lang.Exception] PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,getInt,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.nio.IntBuffer,put,2,java.nio.IntBuffer] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.io.FileOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL RETURN LEX[JLipSync.padString] PARENTHESESSTART
CALL[javax.swing.JFileChooser,setSelectedFile,1,void] PARA[VAR[java.io.File]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[javax.swing.JTable,getSelectionModel,0,javax.swing.ListSelectionModel] +++$+++  CURLYSTART TYPE[ListSelectionModel] VAR[javax.swing.ListSelectionModel] OP[assign]
CALL[javax.swing.JList,getSelectedValue,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[sum] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,2,int] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.Stack,pop,0,E] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Integer]] +++$+++  VAR[java.lang.Integer] OP[sum] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[CALL[null,min]] +++$+++  OP[sum] VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.reflect.Method,invoke,2,java.lang.Object] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.OutputStream,write,1,void] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.RandomAccessFile,write,1,void] PARA[VAR[BYTE]] +++$+++  VAR[java.io.File] COMMA PARENTHESESEND EOL
CALL[java.io.RandomAccessFile,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.RandomAccessFile,length,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.Character,charValue]] +++$+++  EOL CONTINUE EOL CURLYEND
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.nio.ByteBuffer,getLong,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.Comparator,compare,2,int] PARA[VAR[org.h2.dev.sort.InPlaceStableQuicksort.T]] PARA[VAR[org.h2.dev.sort.InPlaceStableQuicksort.T]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.lang.Object,hashCode,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.zip.Deflater,deflate,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.util.TreeSet,add,1,boolean] PARA[VAR[org.h2.dev.fs.ArchiveTool.ChunkStream]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[bitwiseOr] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Set,remove,1,boolean] PARA[VAR[org.h2.util.CloseWatcher]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  OP[assign] NEW TYPE[Timestamp] PARENTHESESSTART
CALL[java.lang.management.ThreadInfo,getThreadState,0,java.lang.Thread.State] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.io.PrintWriter,println,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.Thread,join,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.management.MonitorInfo,getLockedStackDepth,0,int] +++$+++  VAR[java.lang.management.MonitorInfo] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  ELSE CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  EOL LEX[length--] EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[LONG]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[sum] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.ObjectOutputStream,writeObject,1,void] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.nio.channels.FileChannel,close,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.nio.channels.FileChannel,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[lessThan] PARENTHESESEND OP[bitwiseOr] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] COMMA VAR[INT] OP[assign]
CALL[java.lang.Error,initCause,1,java.lang.Throwable] PARA[VAR[java.lang.OutOfMemoryError]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND EOL
CALL[java.util.HashSet,addAll,1,boolean] PARA[CALL[org.h2.mvstore.cache.CacheLongKeyLIRS.Segment,keySet]] +++$+++  OP[ternaryFalse] VAR[org.h2.mvstore.cache.CacheLongKeyLIRS.Segment] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,position,1,java.nio.Buffer] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  PARENTHESESEND EOL LEX[idBuffer.position] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[LONG]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[sum] OP[sum] VAR[java.lang.String] EOL
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL LEX[info.user] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.HashMap,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.LinkedHashSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,compareToIgnoreCase,1,int] PARA[VAR[java.lang.String]] +++$+++  VAR[BOOLEAN] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.DataOutputStream,writeInt,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.DataOutputStream,writeChar,1,void] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.io.DataInputStream,readFully,3,void] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.net.Socket,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.net.Socket,getPort,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.Throwable,printStackTrace,1,void] PARA[VAR[java.io.PrintWriter]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.math.BigDecimal,toString,0,java.lang.String] +++$+++  EOL CURLYEND RETURN OP[sum]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Thread,start,0,void] +++$+++  VAR[java.lang.Runnable] COMMA PARENTHESESEND EOL
CALL[java.io.InputStream,close,0,void] +++$+++  ARRAYEND OP[assign] VAR[BYTE] EOL
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.pms.dlna.MediaType]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[javax.swing.tree.TreePath,getPath,0,java.lang.Object[]] +++$+++  VAR[java.lang.Object] ARRAYSTART ARRAYEND OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[CHAR] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[ListDataListener] ARRAYSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  FINAL TYPE[ComboBoxItemPair] VAR[net.pms.util.KeyedComboBoxModel.ComboBoxItemPair] OP[assign]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  FINAL TYPE[ComboBoxItemPair] VAR[net.pms.util.KeyedComboBoxModel.ComboBoxItemPair] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,remove,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.pms.util.CoverSupplier]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Formatter,format,4,java.util.Formatter] PARA[VAR[java.lang.String]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[DOUBLE]] +++$+++  INT PARENTHESESEND PARENTHESESSTART VAR[DOUBLE]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.security.SecureRandom,nextLong,0,long] +++$+++  CURLYEND LONG VAR[LONG] OP[assign]
CALL[java.io.InputStream,close,0,void] +++$+++  LEX[LLJTran.OPT_WRITE_ALL] PARENTHESESEND EOL CURLYEND
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.error] PARENTHESESSTART OP[sum]
CALL[javax.swing.JLabel,setText,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.debug] PARENTHESESSTART COMMA
CALL[java.io.FileInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHideEngineNames] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JTable,isRowSelected,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTable,setValueAt,3,void] PARA[CALL[javax.swing.JTable,getValueAt]] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  VAR[INT] COMMA PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setMinimized] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setShowSplashScreen] PARENTHESESSTART PARENTHESESSTART
CALL[net.pms.newgui.update.AutoUpdateDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[autoUpdater] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JPasswordField,setEchoChar,1,void] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.InputStream,mark,1,void] PARA[VAR[INT]] +++$+++  EOL VAR[LONG] OP[assign] EOL
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.File,delete,0,boolean] +++$+++  VAR[java.io.IOException] PARENTHESESEND CURLYSTART CURLYEND
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  LEX[logFilePaths.remove] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,info,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[ternaryFalse] LEX[InvokerHelper.getProperty] PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART CASE OP[ternaryFalse]
CALL[java.lang.Float,isNaN,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[INT]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.io.Writer,write,1,void] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,intern,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.Reader,read,1,int] PARA[VAR[CHAR]] +++$+++  OP[assign] PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.List,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.table.TableModel,getColumnClass,1,java.lang.Class<? extends java.lang.Object>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Container,getComponentCount,0,int] +++$+++  VAR[java.awt.Container] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JMenu,add,1,java.awt.Component] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  LEX[JMenuItem] VAR[javax.swing.JMenuItem] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  LEX[JMenuItem] VAR[javax.swing.JMenuItem] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[cells.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.SortedSet,last,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[MultiLineRun] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.Object,hashCode,0,int] +++$+++  PARENTHESESEND OP[ternaryTrue] LEX[xbabe] OP[ternaryFalse]
CALL[java.util.Set,add,1,boolean] PARA[CALL[java.lang.Object,toString]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.math.BigInteger,toString,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[BigInteger] PARENTHESESSTART
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART VAR[groovy.util.GroovyCollections.subsequences(java.util.List<T>).T] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL LEX[resultList.add] PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[groovy.xml.QName]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  VAR[INT] EOL VAR[INT] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[groovy.lang.ListWithDefault.T]] +++$+++  VAR[groovy.lang.ListWithDefault.T] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Date,getTime,0,long] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[propertyValue.substring] PARENTHESESSTART COMMA
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL LEX[out.print] PARENTHESESSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[not] OP[assign] PARENTHESESEND
CALL[java.util.prefs.Preferences,get,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.prefs.Preferences,keys,0,java.lang.String[]] +++$+++  THROWS LEX[BackingStoreException] CURLYSTART RETURN
CALL[java.io.PrintWriter,close,0,void] +++$+++  LEX[out.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[V] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Object,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  RETURN LEX[false] EOL RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.lang.StackTraceElement,getMethodName,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.Class,getComponentType,0,java.lang.Class<? extends java.lang.Object>] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Class] OP[assign]
CALL[java.lang.Class,isArray,0,boolean] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.lang.Class,isArray,0,boolean] +++$+++  OP[sum] EOL IF PARENTHESESSTART
CALL[java.lang.Object,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Integer.class] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[Class.forName] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  LEX[Array.newInstance] PARENTHESESSTART VAR[java.lang.Class] COMMA
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.Reader,read,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.logging.Logger,fine,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.net.URI,getQuery,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.event.TreeModelListener]] +++$+++  LEX[TreeModelListener] VAR[javax.swing.event.TreeModelListener] PARENTHESESEND CURLYSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.TreeModelListener]] +++$+++  LEX[TreeModelListener] VAR[javax.swing.event.TreeModelListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.undo.UndoManager,canUndo,0,boolean] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,2,int] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[assign] VAR[INT] OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.util.Iterator,next]] +++$+++  CURLYSTART RETURN EOL CURLYEND
CALL[javax.swing.tree.DefaultMutableTreeNode,getUserObject,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[PathElement] PARENTHESESEND
CALL[javax.swing.tree.DefaultMutableTreeNode,getLastChild,0,javax.swing.tree.TreeNode] +++$+++  RETURN PARENTHESESSTART TYPE[DefaultMutableTreeNode] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[INT]] +++$+++  OP[ternaryFalse] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.RuntimeException,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[project.log] PARENTHESESSTART
CALL[java.lang.Throwable,printStackTrace,1,void] PARA[VAR[java.io.PrintWriter]] +++$+++  PARENTHESESSTART VAR[java.io.StringWriter] PARENTHESESEND EOL
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  IF PARENTHESESSTART LEX[StringUtil.isNotEmpty] PARENTHESESSTART
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  NEW TYPE[RuntimeException] PARENTHESESSTART OP[sum]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[ternaryFalse] EOL LEX[filteredLines.add] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[StringUtil.isNotEmpty] PARENTHESESSTART
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.PrintWriter,print,1,void] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.io.PrintWriter,println,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.io.BufferedReader,close,0,void] +++$+++  LEX[PMD.EOL] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.concurrent.ExecutorService,shutdownNow,0,java.util.List<java.lang.Runnable>] +++$+++  LEX[close] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Set,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Canvas,getWidth,0,int] +++$+++  EOL LEX[GL11.glOrtho] PARENTHESESSTART COMMA
CALL[java.awt.Canvas,getHeight,0,int] +++$+++  LEX[canvas.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JTextField,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.awt.Color,getGreen,0,int] +++$+++  PARENTHESESEND DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[in.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintStream,print,1,void] PARA[FIELD[net.sf.hale.util.SaveFileHeader]] +++$+++  LEX[pout.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Reader,close,0,void] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  TYPE[JSONArray] PARENTHESESEND VAR[java.lang.Object] COMMA
CALL[java.util.zip.ZipOutputStream,closeEntry,0,void] +++$+++  OP[sum] PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART LEX[Logger.appendToErrorLog] PARENTHESESSTART OP[sum]
CALL[java.io.FileInputStream,close,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[image.getWidth] PARENTHESESSTART PARENTHESESEND OP[multiply]
CALL[java.awt.image.BufferedImage,getRGB,2,int] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.List] PARENTHESESEND EOL CURLYEND
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Character]] +++$+++  COMMA VAR[java.io.PrintWriter] PARENTHESESEND EOL
CALL[java.io.File,isFile,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART LEX[Logger.appendToErrorLog] PARENTHESESSTART OP[sum]
CALL[java.util.TreeSet,subSet,2,java.util.SortedSet<E>] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Runnable]] +++$+++  LEX[Runnable] VAR[java.lang.Runnable] PARENTHESESEND CURLYSTART
CALL[java.util.Set,clear,0,void] +++$+++  LEX[textureSprites.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Runnable,run,0,void] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.lang.Integer,intValue,0,int] +++$+++  RETURN EOL ELSE RETURN
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[readRuleValuesAndStrings] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.net.URI,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[simpleCollection.add] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[true] EOL VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[BOOLEAN] OP[ternaryTrue]
CALL[java.net.URL,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.ambraproject.views.article.HomePageArticleInfo]] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[not]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.List,containsAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Double]] +++$+++  LEX[Double] VAR[java.lang.Double] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[CALL[java.util.Locale,getLanguage]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.concurrent.atomic.AtomicBoolean,compareAndSet,2,boolean] PARA[LIT[Boolean]] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[javax.swing.JEditorPane,selectAll,0,void] +++$+++  LEX[FocusEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.lang.Object,notify,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.Path2D,closePath,0,void] +++$+++  OP[multiply] VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,closePath,0,void] +++$+++  OP[sum] VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[INT]] +++$+++  COMMA VAR[FLOAT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,closePath,0,void] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,closePath,0,void] +++$+++  OP[sub] VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.awt.FontMetrics,getFontRenderContext,0,java.awt.font.FontRenderContext] +++$+++  EOL TYPE[FontRenderContext] VAR[java.awt.font.FontRenderContext] OP[assign]
CALL[javax.swing.JTable,rowAtPoint,1,int] PARA[VAR[java.awt.Point]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[javax.swing.JTable,getWidth,0,int] +++$+++  COMMA FIELD[y,java.awt.Point] OP[sub] COMMA
CALL[javax.swing.text.JTextComponent,putClientProperty,2,void] PARA[VAR[java.lang.String]] PARA[VAR[com.frostwire.gui.searchfield.PromptSupport.FocusBehavior]] +++$+++  LEX[JTextComponent] VAR[javax.swing.text.JTextComponent] PARENTHESESEND CURLYSTART
CALL[javax.swing.text.JTextComponent,getBackground,0,java.awt.Color] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.text.JTextComponent,revalidate,0,void] +++$+++  COMMA VAR[java.lang.Integer] PARENTHESESEND EOL
CALL[javax.swing.JComponent,removeFocusListener,1,void] PARA[VAR[com.frostwire.gui.searchfield.PromptTextUI.FocusHandler]] +++$+++  PARENTHESESSTART VAR[javax.swing.JComponent] PARENTHESESEND EOL
CALL[javax.swing.plaf.TextUI,contains,3,boolean] PARA[VAR[javax.swing.JComponent]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.TextUI,damageRange,3,void] PARA[VAR[javax.swing.text.JTextComponent]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.plaf.TextUI,getMinimumSize,1,java.awt.Dimension] PARA[VAR[javax.swing.JComponent]] +++$+++  VAR[javax.swing.JComponent] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.TextUI,viewToModel,3,int] PARA[VAR[javax.swing.text.JTextComponent]] PARA[VAR[java.awt.Point]] PARA[VAR[javax.swing.text.Position.Bias]] +++$+++  VAR[javax.swing.text.Position.Bias] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextField,getClientProperty,1,java.lang.Object] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[JPopupMenu] PARENTHESESEND
CALL[java.util.Map,put,2,V] PARA[VAR[com.frostwire.gui.library.HistoHashMap.K]] PARA[VAR[INT]] +++$+++  VAR[com.frostwire.gui.library.HistoHashMap.K] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.awt.event.KeyEvent,isMetaDown,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Set,removeAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  PARENTHESESSTART VAR[java.util.Set] PARENTHESESEND EOL
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.io.File,setExecutable,1,boolean] PARA[LIT[Boolean]] +++$+++  COMMA VAR[java.io.OutputStream] PARENTHESESEND EOL
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.ObjectOutputStream,defaultWriteObject,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  TYPE[ArrayList] OP[lessThan] OP[greaterThan] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.io.PrintWriter,print,1,void] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.io.PrintWriter,println,0,void] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[ternaryFalse] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  BREAK EOL DEFAULT OP[ternaryFalse]
CALL[java.lang.ProcessBuilder,start,0,java.lang.Process] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  PARENTHESESSTART VAR[java.util.Set] PARENTHESESEND EOL
CALL[java.io.File,isAbsolute,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JMenuItem,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,add,2,java.awt.Component] PARA[VAR[javax.swing.JMenuItem]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  OP[assign] LEX[GUIMediator.getThemeImage] PARENTHESESSTART OP[sum]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[java.awt.Font] PARENTHESESEND EOL
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[hide] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JEditorPane,setCaretPosition,1,void] PARA[LIT[Integer]] +++$+++  VAR[java.lang.String] OP[sum] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  VAR[INT] OP[assign] OP[assign] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Icon] VAR[javax.swing.Icon] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Icon] VAR[javax.swing.Icon] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.net.URL,openStream,0,java.io.InputStream] +++$+++  OP[assign] NEW TYPE[BufferedInputStream] PARENTHESESSTART
CALL[com.limegroup.gnutella.gui.init.SetupManager.NextAction,isEnabled,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[Locale] PARENTHESESEND
CALL[java.net.URI,getScheme,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  LEX[DataFlavor.javaFileListFlavor] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JComponent,getAutoscrolls,0,boolean] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[DataFlavor] ARRAYSTART
CALL[java.awt.datatransfer.Transferable,isDataFlavorSupported,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  LEX[IOException] CURLYSTART IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  CURLYSTART TYPE[AbstractButton] VAR[javax.swing.AbstractButton] OP[assign]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JComponent]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.InputMap,put,2,void] PARA[VAR[javax.swing.KeyStroke]] PARA[VAR[javax.swing.Action]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL LEX[b.append] PARENTHESESSTART
CALL[javax.swing.border.TitledBorder,getTitle,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.tree.TreeModel,valueForPathChanged,2,void] PARA[VAR[javax.swing.tree.TreePath]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.awt.Graphics,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  LEX[ActionEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextArea,copy,0,void] +++$+++  LEX[textArea.selectAll] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  LEX[ActionEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.util.List,addAll,1,boolean] PARA[CALL[null,asList]] +++$+++  FIELD[length,com.limegroup.gnutella.MagnetOptions] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND OP[not] OP[assign]
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.LinkedHashMap,get,1,V] PARA[CALL[null,valueOf]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.TreeSet,add,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[net.miginfocom.layout.UnitValue,clone,0,java.lang.Object] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,length,0,int] +++$+++  OP[ternaryTrue] LEX[valS.substring] PARENTHESESSTART COMMA
CALL[java.util.IdentityHashMap,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART VAR[java.util.IdentityHashMap] PARENTHESESEND CURLYSTART
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,setName,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[daemon_threads.removeLast] PARENTHESESSTART PARENTHESESEND EOL
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,setPriority,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  PARENTHESESSTART VAR[java.io.PrintWriter] PARENTHESESEND EOL
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[AERunnable] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[LONG] WHILE PARENTHESESSTART
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.Stack,pop,0,E] +++$+++  OP[assign] THIS PARENTHESESEND CURLYSTART
CALL[java.util.Stack,peek,0,E] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.util.concurrent.BlockingQueue,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Runnable]] +++$+++  PARENTHESESSTART VAR[java.lang.Runnable] PARENTHESESEND PARENTHESESEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[LONG] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,toString]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.charset.Charset,newEncoder,0,java.nio.charset.CharsetEncoder] +++$+++  EOL TYPE[CharsetEncoder] VAR[java.nio.charset.CharsetEncoder] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  LEX[createLookups] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.File,toPath,0,java.nio.file.Path] +++$+++  VAR[java.nio.file.DirectoryStream] OP[assign] LEX[Files.newDirectoryStream] PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[tokens.isEmpty] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[ternaryTrue] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.io.BufferedReader,close,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.lang.Integer,intValue,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] EOL IF PARENTHESESSTART
CALL[java.util.zip.ZipFile,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.Iterator,next]] +++$+++  LEX[collection.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.lang.Thread,getName,0,java.lang.String] +++$+++  VAR[java.lang.Runnable] EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  VAR[java.io.UnsupportedEncodingException] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  ARRAYEND OP[sum] PARENTHESESEND EOL
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  RETURN NEW TYPE[String] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CHAR PARENTHESESEND LEX[Long.parseLong] PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[VAR[java.nio.ByteBuffer]] +++$+++  LEX[bigbuffer.flip] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.concurrent.ExecutorService,execute,1,void] PARA[VAR[com.frostwire.search.SearchManager.SearchTask]] +++$+++  PARENTHESESSTART VAR[com.frostwire.search.SearchManager.SearchTask] PARENTHESESEND EOL
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  VAR[java.lang.Object] EOL LEX[map.put] PARENTHESESSTART
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  NULL OP[ternaryTrue] VAR[BOOLEAN] OP[ternaryFalse]
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[not] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.CharSequence,length,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] COMMA VAR[INT] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  LEX[str.substring] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  FINAL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  FINAL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isDigit] PARENTHESESSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[INT] EOL VAR[INT] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[INT] EOL VAR[INT] OP[assign]
CALL[java.io.File,mkdirs,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.FileInputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.File,length,0,long] +++$+++  PARENTHESESSTART PARENTHESESEND OP[not] OP[assign]
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND CURLYSTART LEX[destFile.setLastModified] PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.net.ServerSocket,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[writer.write] PARENTHESESSTART
CALL[java.io.Writer,write,3,void] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[VAR[CHAR]] PARA[VAR[CHAR]] +++$+++  VAR[java.lang.String] EOL CURLYEND RETURN
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[CHAR]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYEND RETURN VAR[BOOLEAN] OP[ternaryTrue]
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.io.Writer,write,1,void] PARA[CALL[null,toString]] +++$+++  LEX[writer.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Object,wait,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.UUID,getMostSignificantBits,0,long] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.io.InputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] COMMA
CALL[java.lang.String,length,0,int] +++$+++  LEX[source.length] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.lang.Class,getDeclaredField,1,java.lang.reflect.Field] PARA[LIT[Stirng]] +++$+++  EOL TYPE[Field] VAR[java.lang.reflect.Field] OP[assign]
CALL[java.lang.IllegalAccessException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.Class,getDeclaredField,1,java.lang.reflect.Field] PARA[LIT[Stirng]] +++$+++  EOL TYPE[Field] VAR[java.lang.reflect.Field] OP[assign]
CALL[java.lang.NoSuchMethodException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,containsValue,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Window,setLocation,1,void] PARA[VAR[java.awt.Point]] +++$+++  NEW TYPE[Point] PARENTHESESSTART FIELD[width,java.awt.Dimension]
CALL[java.awt.Window,getWidth,0,int] +++$+++  LEX[bottom.getX] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  LEX[base] OP[assign] LEX[Class.forName] PARENTHESESSTART
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART LEX[JProgressBar.HORIZONTAL] PARENTHESESEND EOL
CALL[javax.swing.JProgressBar,setString,1,void] PARA[LIT[Stirng]] +++$+++  LEX[curTask.abortTask] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[NutrientInfo] PARENTHESESEND
CALL[javax.swing.JTextArea,setLineWrap,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.util.Vector,add,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  LEX[ChangeListener] VAR[javax.swing.event.ChangeListener] PARENTHESESEND CURLYSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  LEX[cal.getTimeInMillis] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[javax.swing.JFrame,setSize,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.JScrollPane,setVerticalScrollBarPolicy,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[JComponent] PARENTHESESEND
CALL[ca.spaz.gui.WrapperDialog,setLocationRelativeTo,1,void] PARA[VAR[java.awt.Component]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CHAR VAR[CHAR] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.ResourceBundle,getLocale,0,java.util.Locale] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPanel,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.io.UnsupportedEncodingException,printStackTrace,0,void] +++$+++  TYPE[UnsupportedEncodingException] VAR[java.io.UnsupportedEncodingException] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[com.aelitis.azureus.plugins.net.buddy.BuddyPluginBuddy.buddyConnection]] +++$+++  PARENTHESESEND OP[assign] OP[assign] EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.InputStream,mark,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYEND TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  TYPE[Object] ARRAYSTART ARRAYEND EOL
CALL[java.util.List,remove,1,boolean] PARA[VAR[com.aelitis.azureus.core.util.CopyOnWriteList.T]] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[sum] OP[assign] PARENTHESESSTART
CALL[java.io.InputStream,skip,1,long] PARA[VAR[LONG]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  EOL CURLYEND LEX[sb.append] PARENTHESESSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[com.aelitis.azureus.core.util.CopyOnWriteSet.T]] +++$+++  VAR[java.util.Set] PARENTHESESEND EOL CURLYEND
CALL[java.util.LinkedList,getFirst,0,E] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND OP[greaterThan] PARENTHESESEND
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.io.DataOutputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[java.io.DataOutputStream] PARENTHESESEND EOL
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  LEX[MessageText.getString] PARENTHESESSTART VAR[java.lang.String] OP[sum]
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Long] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[com.aelitis.azureus.core.messenger.config.PlatformConfigMessenger.PlatformLoginCompleteListener]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  CURLYSTART TYPE[InetAddress] VAR[java.net.InetAddress] OP[assign]
CALL[java.net.ServerSocket,getLocalPort,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[true] EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.Map]] +++$+++  TYPE[HashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.LinkedList,addLast,1,void] PARA[VAR[java.nio.channels.SocketChannel]] +++$+++  VAR[java.nio.channels.SocketChannel] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,remove,0,void] +++$+++  OP[assign] VAR[com.aelitis.azureus.core.networkmanager.impl.tcp.TCPConnectionManager.ConnectListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYEND TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.nio.ByteBuffer,array,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.ArrayList,contains,1,boolean] PARA[VAR[java.nio.channels.spi.AbstractSelectableChannel]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  OP[sum] VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[PEPeerTransport] PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Long] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Map] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.List,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.Integer,intValue,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] OP[assign] VAR[java.lang.String] OP[sum]
CALL[java.lang.Throwable,printStackTrace,1,void] PARA[VAR[java.io.PrintWriter]] +++$+++  PARENTHESESSTART VAR[java.io.StringWriter] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN VAR[java.lang.String] EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sub]
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.File,exists,0,boolean] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[ByteArrayOutputStream] PARENTHESESSTART
CALL[java.io.FileOutputStream,write,1,void] PARA[CALL[java.io.ByteArrayOutputStream,toByteArray]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.reflect.Method,setAccessible,1,void] PARA[LIT[Boolean]] +++$+++  COMMA VAR[java.lang.Class] PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.io.File] OP[assign]
CALL[java.util.zip.ZipOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.FileInputStream,close,0,void] +++$+++  EOL CURLYEND TRY CURLYSTART
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,get,1,V] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  RETURN PARENTHESESSTART TYPE[UserProfile] PARENTHESESEND
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[cmd_lines.add] PARENTHESESSTART
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  VAR[java.io.PrintStream] COMMA PARENTHESESEND EOL
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  LEX[br.readLine] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  LEX[close] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  LEX[file.getParent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.List,toArray,1,T[]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND ARRAYEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  OP[sub] EOL VAR[INT] OP[assign]
CALL[java.io.PrintWriter,close,0,void] +++$+++  PARENTHESESSTART VAR[java.io.PrintWriter] PARENTHESESEND EOL
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Random,nextFloat,0,float] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Class,newInstance,0,T] +++$+++  RETURN PARENTHESESSTART TYPE[URLStreamHandler] PARENTHESESEND
CALL[java.net.URLConnection,connect,0,void] +++$+++  VAR[LONG] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.net.URL,getPath,0,java.lang.String] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.net.URL,getDefaultPort,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.concurrent.locks.ReentrantLock,getQueueLength,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.zip.ZipEntry,getName,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.concurrent.ConcurrentHashMap,keySet,0,java.util.concurrent.ConcurrentHashMap.KeySetView<K, V>] +++$+++  TYPE[S] OP[greaterThan] VAR[java.util.Set] OP[assign]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  CURLYSTART TYPE[S] VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.S] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.nio.ByteBuffer,rewind,0,java.nio.Buffer] +++$+++  EOL VAR[LONG] OP[assign] EOL
CALL[java.util.List,remove,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[InputStream] PARENTHESESEND
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[CALL[java.io.File,getParent]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.Thread,setPriority,1,void] PARA[VAR[INT]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.util.List]] +++$+++  TYPE[HashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  LEX[writer.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[LONG] OP[assign]
CALL[java.util.Locale,equals,1,boolean] PARA[VAR[java.util.Locale]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Locale,equals,1,boolean] PARA[VAR[java.util.Locale]] +++$+++  PARENTHESESSTART VAR[java.util.Locale] PARENTHESESEND OP[ternaryTrue]
CALL[java.util.Properties,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  TYPE[Properties] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Properties]] +++$+++  TYPE[LightHashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.List]] +++$+++  TYPE[ArrayList] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[false] EOL IF PARENTHESESSTART
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[false] EOL IF PARENTHESESSTART
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Exception,getLocalizedMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[url.substring] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.net.InetAddress,getAddress,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW BYTE ARRAYSTART
CALL[java.util.jar.JarEntry,isDirectory,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[InputStream] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] PARENTHESESSTART TYPE[RPObject] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Map] PARENTHESESEND
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[Parameter] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.math.BigInteger,shiftLeft,1,java.math.BigInteger] PARA[VAR[INT]] +++$+++  RETURN NEW TYPE[SimpleBigDecimal] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL LEX[sig.update] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,reset,0,void] +++$+++  LEX[buffer.toByteArray] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  BYTE ARRAYSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART NEW TYPE[BigInteger] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.math.BigInteger,toByteArray,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[not] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JSlider,getValue,0,int] +++$+++  EOL CURLYEND LEX[controller.setQuality] PARENTHESESSTART
CALL[java.awt.print.PageFormat,setPaper,1,void] PARA[VAR[java.awt.print.Paper]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  OP[sum] ARRAYEND PARENTHESESEND EOL
CALL[java.awt.geom.PathIterator,currentSegment,1,int] PARA[VAR[FLOAT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[javax.swing.JFrame,toFront,0,void] +++$+++  LEX[ActionEvent] LEX[ev] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  LEX[c.getBackground] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.ref.WeakReference,get,0,T] +++$+++  EOL TYPE[TextStyle] VAR[com.eteks.sweethome3d.model.TextStyle] OP[assign]
CALL[java.util.Iterator,remove,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JRootPane,setContentPane,1,void] PARA[VAR[javax.swing.JLabel]] +++$+++  COMMA LEX[JLabel.CENTER] PARENTHESESEND EOL
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  ARRAYSTART VAR[INT] ARRAYEND OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[greaterThan] OP[ternaryTrue]
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[net.sf.latexdraw.installer.Installer.InstallerListener] PARENTHESESEND EOL
CALL[javax.swing.JButton,setActionCommand,1,void] PARA[VAR[java.lang.String]] +++$+++  TYPE[JButton] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESEND PARENTHESESEND RETURN EOL
CALL[java.awt.Graphics2D,fill,1,void] PARA[VAR[java.awt.geom.Rectangle2D]] +++$+++  PARENTHESESSTART LEX[Color.GRAY] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,draw,1,void] PARA[VAR[java.awt.geom.Rectangle2D]] +++$+++  PARENTHESESSTART LEX[Color.BLACK] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  LEX[colourHT.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESEND COMMA LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,insert,2,java.lang.StringBuffer] PARA[LIT[Integer]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Runnable,run,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[java.lang.StringBuffer] PARENTHESESEND EOL
CALL[java.io.ObjectOutputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.io.ObjectStreamClass,getName,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[Class.forName] PARENTHESESSTART
CALL[java.io.ObjectInputStream,readObject,0,java.lang.Object] +++$+++  EOL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.regex.Pattern,split,1,java.lang.String[]] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.BufferedOutputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  ARRAYEND ARRAYSTART ARRAYEND OP[sum]
CALL[java.util.ArrayList,size,0,int] +++$+++  CURLYSTART RETURN LEX[_tokens.get] PARENTHESESSTART
CALL[java.util.HashMap,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[javax.swing.tree.DefaultMutableTreeNode]] +++$+++  INSTANCEOF TYPE[ReferenceType] PARENTHESESEND CURLYSTART
CALL[java.awt.Font,getSize,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.awt.Graphics,drawRect,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.event.MouseEvent,getPoint,0,java.awt.Point] +++$+++  PARENTHESESEND CURLYSTART VAR[java.awt.Point] OP[assign]
CALL[java.io.File,delete,0,boolean] +++$+++  RETURN LEX[false] EOL CURLYEND
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.JInternalFrame,getClientProperty,1,java.lang.Object] PARA[LIT[Stirng]] +++$+++  FINAL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.border.Border,paintBorder,6,void] PARA[VAR[java.awt.Component]] PARA[VAR[java.awt.Graphics]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.border.Border,getBorderInsets,1,java.awt.Insets] PARA[VAR[java.awt.Component]] +++$+++  EOL TYPE[Insets] VAR[java.awt.Insets] OP[assign]
CALL[javax.swing.table.TableModel,getColumnName,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.table.TableModel,isCellEditable,2,boolean] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.FileReader,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.lang.StringBuffer,append,3,java.lang.StringBuffer] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[javax.swing.JTextArea,requestFocus,0,void] +++$+++  LEX[requestFocus] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Component,getBackground,0,java.awt.Color] +++$+++  PARENTHESESSTART LEX[false] OP[assign] OP[assign]
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[java.awt.Point]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.awt.Point]] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.HashMap] PARENTHESESEND EOL CURLYEND
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.HashMap] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.sql.SQLException,getMessage,0,java.lang.String] +++$+++  OP[sum] VAR[INT] OP[sum] OP[sum]
CALL[java.awt.print.PrinterJob,print,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[javax.swing.JCheckBox,setName,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextArea,setLineWrap,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JScrollPane]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextArea] PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[IllegalArgumentException] CURLYSTART LEX[config.setRowStartTag] PARENTHESESSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  RETURN PARENTHESESSTART LEX[FormatSqlPanel.KeywordBehaviour] PARENTHESESEND
CALL[javax.swing.JComboBox,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[proxySettings.setSocksProxyPort] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  FINAL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  OP[sum] OP[sum] FIELD[gridy,java.awt.GridBagConstraints] EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[_txtMaxAdjustLen.setEnabled] PARENTHESESSTART
CALL[javax.swing.JTabbedPane,getBoundsAt,1,java.awt.Rectangle] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Rectangle] VAR[java.awt.Rectangle] OP[assign]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.net.URL,openStream,0,java.io.InputStream] +++$+++  OP[assign] NEW TYPE[InputStreamReader] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[sleepForLabel.setEnabled] PARENTHESESSTART
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  LEX[ActionEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[sleepTime.setEnabled] PARENTHESESSTART
CALL[java.awt.Color,getRGB,0,int] +++$+++  PARENTHESESEND EOL LEX[_props.setObjectTreeBackgroundColorRgbValue] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JPanel,validate,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JToggleButton,doClick,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JInternalFrame,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[javax.swing.JTextField,setSelectionEnd,1,void] PARA[CALL[java.lang.String,length]] +++$+++  LEX[ret.setSelectionStart] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ListModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.JList,isSelectedIndex,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.ListModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[newNotUseList.add] PARENTHESESSTART
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JTabbedPane,getSelectedIndex,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.Integer] OP[assign] OP[assign]
CALL[javax.swing.JTabbedPane,getParent,0,java.awt.Container] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,lastIndexOf]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.JScrollPane,setRowHeaderView,1,void] PARA[VAR[net.sourceforge.squirrel_sql.client.session.mainpanel.objecttree.tabs.LineNumber]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextPane] PARENTHESESEND EOL
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[javax.swing.JPopupMenu,show,3,void] PARA[CALL[java.awt.event.MouseEvent,getComponent]] PARA[CALL[java.awt.event.MouseEvent,getX]] PARA[CALL[java.awt.event.MouseEvent,getY]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART NEW TYPE[XYPair] PARENTHESESSTART
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  LEX[_rows.get] PARENTHESESSTART LEX[_ix.get] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.net.URL,openConnection,0,java.net.URLConnection] +++$+++  CURLYSTART TYPE[URLConnection] VAR[java.net.URLConnection] OP[assign]
CALL[javax.swing.text.html.parser.ParserDelegator,parse,3,void] PARA[VAR[java.io.BufferedReader]] PARA[THIS[null]] PARA[LIT[Boolean]] +++$+++  TYPE[ParserDelegator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.Socket,close,0,void] +++$+++  NULL PARENTHESESEND TRY CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  NEW TYPE[RuntimeException] PARENTHESESSTART OP[sum]
CALL[java.lang.Class,newInstance,0,T] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[T] PARENTHESESEND
CALL[java.util.prefs.Preferences,put,2,void] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[net.azib.ipscan.config.GUIConfig.DisplayMethod,toString,0,java.lang.String] +++$+++  EOL LEX[preferences.put] PARENTHESESSTART COMMA
CALL[java.util.PropertyResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.Throwable,getStackTrace,0,java.lang.StackTraceElement[]] +++$+++  EOL TYPE[StackTraceElement] VAR[java.lang.StackTraceElement] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] OP[assign] LEX[valReturn.concat] PARENTHESESSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[SQLException] PARENTHESESSTART
CALL[java.util.HashSet,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[assign] VAR[CHAR] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,appendCodePoint,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[sum] LEX[x10000] EOL
CALL[java.nio.ByteBuffer,position,1,java.nio.Buffer] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,flush,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.io.InputStream,read,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  RETURN LEX[filename.substring] PARENTHESESSTART COMMA
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,clear,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,lastIndexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Set] OP[assign]
CALL[java.util.logging.Logger,log,2,void] PARA[VAR[java.util.logging.Level]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.logging.Level] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.python.indexer.Scope]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.python.indexer.Ref]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.jar.JarFile,getInputStream,1,java.io.InputStream] PARA[VAR[java.util.jar.JarEntry]] +++$+++  PARENTHESESSTART NEW TYPE[InputStreamReader] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.io.BufferedWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  CURLYEND CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Option] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Option] PARENTHESESEND
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  VAR[INT] OP[assign] LEX[Math.min] PARENTHESESSTART
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  LEX[out.remaining] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  LEX[CoderResult.OVERFLOW] EOL CURLYEND RETURN
CALL[java.io.File,canRead,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.IndexOutOfBoundsException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[UnmatchedGroupReferenceException] PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.Component,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[javax.swing.JTable,getSelectedRowCount,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[javax.swing.plaf.basic.BasicComboBoxRenderer,getListCellRendererComponent,5,java.awt.Component] PARA[VAR[javax.swing.JList]] PARA[CALL[java.lang.Object,toString]] PARA[VAR[INT]] PARA[VAR[BOOLEAN]] PARA[VAR[BOOLEAN]] +++$+++  VAR[BOOLEAN] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.basic.BasicComboBoxEditor,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.plaf.basic.BasicComboBoxEditor,getEditorComponent,0,java.awt.Component] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.DefaultListModel,getSize,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.DefaultListModel,removeListDataListener,1,void] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[CALL[net.pandoragames.far.ui.swing.dialog.config.EditableMimeType,getName]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.util.List,size,0,int] +++$+++  THIS COMMA LEX[ListDataEvent.INTERVAL_ADDED] COMMA
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  CURLYSTART LEX[logger.warn] PARENTHESESSTART OP[sum]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setWholeLines] PARENTHESESSTART LEX[Boolean.parseBoolean] PARENTHESESSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setPrintMatchCount] PARENTHESESSTART LEX[Boolean.parseBoolean] PARENTHESESSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[Charset] ARRAYSTART
CALL[org.geoserver.web.data.importer.LayerResource.LayerStatus,compareTo,1,int] PARA[FIELD[org.geoserver.web.data.importer.LayerResource]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.font.GlyphVector,getOutline,0,java.awt.Shape] +++$+++  VAR[java.awt.Shape] OP[assign] LEX[at.createTransformedShape] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.ExecutionException,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESSTART OP[sum] VAR[java.lang.String] COMMA
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESEND COMMA LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[val] EOL WHILE PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  VAR[java.lang.String] COMMA VAR[java.lang.String] COMMA
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,add,1,boolean] PARA[FIELD[EoLayerType]] +++$+++  PARENTHESESSTART LEX[EoLayerType.BROWSE_IMAGE] PARENTHESESEND EOL
CALL[java.lang.IllegalArgumentException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[response.sendError] PARENTHESESSTART COMMA
CALL[java.lang.Exception,getLocalizedMessage,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[JMSException] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[CALL[org.geoserver.wms.utfgrid.UTFGridEntries.UTFGridEntry,getValue]] PARA[VAR[org.geoserver.wms.utfgrid.UTFGridEntries.UTFGridEntry]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setPaint,1,void] PARA[VAR[java.awt.GradientPaint]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  VAR[INT] OP[assign] LEX[Math.max] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  VAR[java.awt.image.BufferedImage] COMMA NULL COMMA
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[assign] OP[assign] OP[bitwiseOr]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  VAR[java.lang.String] OP[assign] LEX[line.replace] PARENTHESESSTART
CALL[java.io.BufferedWriter,newLine,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.File,mkdir,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  VAR[java.io.File] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,size,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.util.List,hashCode,0,int] +++$+++  VAR[INT] OP[multiply] PARENTHESESEND OP[sum]
CALL[java.io.File,isAbsolute,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.NoSuchFieldException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.NoSuchMethodException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.io.InputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,containsValue,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Iterator,remove,0,void] +++$+++  PARENTHESESSTART VAR[java.util.Date] PARENTHESESEND PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[CHAR] OP[assign] LEX[Character.toUpperCase] PARENTHESESSTART
CALL[java.util.concurrent.ExecutorService,shutdown,0,void] +++$+++  VAR[java.util.concurrent.ScheduledExecutorService] OP[assign] NULL EOL
CALL[java.util.concurrent.ConcurrentHashMap,get,1,V] PARA[VAR[org.geoserver.monitor.PipeliningTaskQueue.K]] +++$+++  OP[greaterThan] OP[greaterThan] VAR[java.util.Queue] OP[assign]
CALL[java.util.concurrent.ConcurrentHashMap,get,1,V] PARA[VAR[org.geoserver.monitor.PipeliningTaskQueue.K]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.util.Queue] OP[assign]
CALL[java.net.InetAddress,getHostName,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART VAR[java.lang.Double] PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[org.geoserver.importer.transform.TransformChain.add(X).X]] +++$+++  LEX[X] VAR[org.geoserver.importer.transform.TransformChain.add(X).X] PARENTHESESEND CURLYSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESSTART NEW TYPE[String] PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Date,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[sb.append] PARENTHESESSTART
CALL[java.io.OutputStream,flush,0,void] +++$+++  OP[assign] VAR[java.io.OutputStream] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[url.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.net.URLConnection,getContentEncoding,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.URLConnection,getInputStream,0,java.io.InputStream] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.io.Writer,flush,0,void] +++$+++  VAR[java.lang.String] OP[sum] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[sum] OP[assign] EOL
CALL[java.lang.Throwable,printStackTrace,1,void] PARA[VAR[java.io.PrintWriter]] +++$+++  PARENTHESESSTART VAR[java.io.StringWriter] PARENTHESESEND EOL
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[ParseException] CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.io.Reader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.io.Serializable]] +++$+++  VAR[java.io.Serializable] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,remove,1,boolean] PARA[VAR[org.geoserver.catalog.ResourcePool.Listener]] +++$+++  LEX[Listener] VAR[org.geoserver.catalog.ResourcePool.Listener] PARENTHESESEND CURLYSTART
CALL[java.io.BufferedOutputStream,flush,0,void] +++$+++  COMMA VAR[java.io.BufferedOutputStream] PARENTHESESEND EOL
CALL[java.util.List,clear,0,void] +++$+++  LEX[styleCache.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.logging.Logger,log,2,void] PARA[VAR[java.util.logging.Level]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.Reader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.util.Properties,loadFromXML,1,void] PARA[VAR[java.io.BufferedInputStream]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.util.Set,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.util.Set,remove,1,boolean] PARA[VAR[org.geoserver.security.impl.AbstractAccessRuleDAO.R]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,canWrite,0,boolean] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART LEX[sq] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  TYPE[NameImpl] PARENTHESESSTART LEX[namespaceContext.getURI] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.logging.Logger,fine,1,void] PARA[LIT[Stirng]] +++$+++  LEX[Level.FINE] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.logging.Logger,fine,1,void] PARA[LIT[Stirng]] +++$+++  LEX[Level.FINE] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,fine,1,void] PARA[LIT[Stirng]] +++$+++  LEX[Level.FINE] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.Double,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.util.TreeSet,add,1,boolean] PARA[VAR[java.lang.Double]] +++$+++  TYPE[Double] PARENTHESESEND VAR[java.lang.Object] EOL
