CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Vector,firstElement,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[objectsTable.remove] PARENTHESESSTART
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[sum] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  PARENTHESESSTART NEW TYPE[Paragraph] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[sConcatinatedValue.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[assign] LEX[sConcatinatedValue.substring] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND OP[sum]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.zip.InflaterOutputStream,close,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.util.zip.DeflaterOutputStream,write,1,void] PARA[CALL[java.lang.String,getBytes]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.net.Socket,isConnected,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Vector,size,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  LEX[java.io.IOException] CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.FileInputStream]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,values,0,java.util.Collection<V>] +++$+++  OP[assign] NEW TYPE[Vector] PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,size,0,int] +++$+++  LEX[StatFunctions.getTop] PARENTHESESSTART VAR[java.util.Hashtable] COMMA
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.util.SortedSet,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.SortedSet,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  EOL LEX[Debug.println] PARENTHESESSTART OP[sum]
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[GregorianCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[LabAnalysisVO] PARENTHESESEND
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Diagnosis] PARENTHESESEND
CALL[java.util.Hashtable,put,2,V] PARA[CALL[org.hnrw.report.Report_Diagnosis.Diagnosis,getEncounterUid]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[INT]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,addActionListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[javax.swing.JButton] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND BREAK EOL
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuffer] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.awt.geom.Point2D,setLocation,1,void] PARA[VAR[java.awt.geom.Point2D]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.awt.geom.Point2D,distance,1,double] PARA[VAR[java.awt.geom.Point2D]] +++$+++  CURLYSTART DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  PARENTHESESEND OP[multiply] VAR[DOUBLE] COMMA
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  EOL DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  LEX[bStart.getY] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.Integer,intValue,0,int] +++$+++  NULL OP[ternaryTrue] LEX[Integer.MAX_VALUE] OP[ternaryFalse]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] EOL
CALL[javax.swing.Action,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.Shape,getBounds,0,java.awt.Rectangle] +++$+++  VAR[DOUBLE] COMMA VAR[DOUBLE] COMMA
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] PARENTHESESSTART
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  OP[assign] PARENTHESESSTART LEX[float] PARENTHESESEND
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  OP[sum] ARRAYEND PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.awt.Component]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Container,getInsets,0,java.awt.Insets] +++$+++  EOL TYPE[Insets] VAR[java.awt.Insets] OP[assign]
CALL[javax.swing.JList,locationToIndex,1,int] PARA[VAR[java.awt.Point]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.Rectangle,getMinX,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Rectangle,getMinY,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Graphics2D,getFontMetrics,0,java.awt.FontMetrics] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Graphics2D,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  LEX[line.setLine] PARENTHESESSTART LEX[x1] OP[multiply]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Directive] PARENTHESESEND
CALL[javax.swing.table.TableModel,getColumnCount,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] COMMA VAR[INT] OP[assign]
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[lessThan] OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[genj.util.ReferenceSet.KEY]] +++$+++  TYPE[REF] OP[greaterThan] VAR[java.util.Set] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JComboBox,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.util.LinkedList,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART LEX[Point2D.Float] PARENTHESESEND
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.io.BufferedWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.geom.Rectangle2D,getWidth,0,double] +++$+++  PARENTHESESEND OP[multiply] VAR[INT] COMMA
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  RETURN NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL LEX[bout.write] PARENTHESESSTART VAR[java.lang.String]
CALL[javax.swing.JFileChooser,setDialogTitle,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART LEX[JFileChooser.DIRECTORIES_ONLY] PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,getSelectedFile,0,java.io.File] +++$+++  EOL TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,containsAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.util.List,contains,1,boolean] PARA[VAR[genj.gedcom.Property]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[MetaProperty] PARENTHESESEND
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  CURLYSTART VAR[java.lang.String] OP[assign] OP[sum]
CALL[java.net.Socket,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.net.Socket,getOutputStream,0,java.io.OutputStream] +++$+++  PARENTHESESEND EOL LEX[IPCHelper.write] PARENTHESESSTART
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.prefs.Preferences,put,2,void] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,put,2,void] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,putBoolean,2,void] PARA[VAR[java.lang.String]] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,repaint,0,void] +++$+++  LEX[infoPanel.revalidate] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTable,getFont,0,java.awt.Font] +++$+++  VAR[java.awt.FontMetrics] OP[assign] LEX[table.getFontMetrics] PARENTHESESSTART
CALL[javax.swing.JTree,getRowHeight,0,int] +++$+++  LEX[tree.setRowHeight] PARENTHESESSTART LEX[Math.max] PARENTHESESSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JScrollPane]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[preferenceOptions] EOL IF PARENTHESESSTART
CALL[javax.swing.JButton,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPopupMenu,show,3,void] PARA[CALL[java.awt.event.MouseEvent,getComponent]] PARA[CALL[java.awt.event.MouseEvent,getX]] PARA[CALL[java.awt.event.MouseEvent,getY]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,setFileFilter,1,void] PARA[VAR[javax.swing.filechooser.FileFilter]] +++$+++  LEX[FileFilter] VAR[javax.swing.filechooser.FileFilter] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComboBox,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[net.sf.jabref.gui.exporter.ExportFileFilter]] +++$+++  VAR[net.sf.jabref.gui.exporter.ExportFileFilter] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  PARENTHESESEND EOL VAR[java.io.File] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenu]] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenu] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.List]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JViewport,scrollRectToVisible,1,void] PARA[VAR[java.awt.Rectangle]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.DefaultListModel,addListDataListener,1,void] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,changeSelection,4,void] PARA[VAR[INT]] PARA[LIT[Integer]] PARA[LIT[Boolean]] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JDialog,getParent,0,java.awt.Container] +++$+++  LEX[false] EOL LEX[diag.setLocationRelativeTo] PARENTHESESSTART
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.text.JTextComponent,getText,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[ISBN] PARENTHESESSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JComboBox,getSelectedIndex,0,int] +++$+++  LEX[fieldEditor.setText] PARENTHESESSTART VAR[java.lang.String] ARRAYSTART
CALL[javax.swing.JDialog,getParent,0,java.awt.Container] +++$+++  PARENTHESESEND CURLYSTART LEX[diag.setLocationRelativeTo] PARENTHESESSTART
CALL[javax.swing.JDialog,getParent,0,java.awt.Container] +++$+++  PARENTHESESEND CURLYSTART LEX[diag.setLocationRelativeTo] PARENTHESESSTART
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.CardLayout,show,2,void] PARA[VAR[javax.swing.JPanel]] PARA[CALL[null,valueOf]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[javax.swing.text.JTextComponent,getSelectionEnd,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,delete,2,java.lang.StringBuilder] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[lastBeginning.length] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.text.JTextComponent,setText,1,void] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.text.JTextComponent,getCaretPosition,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[javax.swing.text.JTextComponent,getSelectionEnd,0,int] +++$+++  PARENTHESESEND OP[sum] LEX[text.substring] PARENTHESESSTART
CALL[javax.swing.event.ListDataEvent,getIndex0,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[actionsList.setSelectedIndex] PARENTHESESSTART
CALL[java.util.StringJoiner,add,1,java.util.StringJoiner] PARA[VAR[java.lang.String]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.StringJoiner,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[fields.add] PARENTHESESSTART
CALL[javax.swing.JScrollBar,getUnitIncrement,1,int] PARA[LIT[Integer]] +++$+++  LEX[scb.setValue] PARENTHESESSTART VAR[INT] OP[multiply]
CALL[javax.swing.table.TableColumnModel,getColumns,0,java.util.Enumeration<javax.swing.table.TableColumn>] +++$+++  TYPE[TableColumn] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.concurrent.ExecutorService,execute,1,void] PARA[VAR[java.lang.Runnable]] +++$+++  CURLYSTART RETURN EOL CURLYEND
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART NEW TYPE[DOI] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.LinkedList,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,remove,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sf.jabref.logic.net.ProxyPreferences]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sf.jabref.logic.net.ProxyPreferences]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.io.ByteArrayOutputStream,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.BufferedWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[StandardOpenOption.APPEND] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,write,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.nio.file.Path,toFile,0,java.io.File] +++$+++  OP[assign] NEW TYPE[FileInputStream] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  TYPE[ParseException] CURLYSTART IF PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  DO CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,toLowerCase]] +++$+++  EOL CASE VAR[net.sf.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE] OP[ternaryFalse]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] COMMA PARENTHESESEND EOL
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[sum] OP[sum] EOL CURLYEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.regex.Matcher,group,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sf.jabref.model.FieldChange]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.DefaultListModel,elementAt,1,E] PARA[VAR[INT]] +++$+++  VAR[java.lang.Object] COMMA VAR[INT] COMMA
CALL[javax.swing.JTabbedPane,getSelectedIndex,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[BeanConnection] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.Rectangle,getY,0,double] +++$+++  PARENTHESESSTART PARENTHESESEND COMMA OP[sub]
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.Graphics2D] PARENTHESESEND EOL
CALL[javax.swing.JComponent,setOpaque,1,void] PARA[VAR[BOOLEAN]] +++$+++  LEX[g2d.dispose] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JComponent,getBounds,1,java.awt.Rectangle] PARA[VAR[java.awt.Rectangle]] +++$+++  PARENTHESESEND EOL VAR[java.awt.Rectangle] OP[assign]
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[m_Exp.setSplitByDataSet] PARENTHESESSTART
CALL[javax.swing.DefaultListModel,size,0,int] +++$+++  EOL LEX[m_DeleteBut.setEnabled] PARENTHESESSTART PARENTHESESSTART
CALL[java.util.Hashtable,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART TYPE[StringBuffer] PARENTHESESEND PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[StringBuffer] PARENTHESESEND
CALL[javax.swing.text.JTextComponent,setText,1,void] PARA[CALL[java.lang.StringBuffer,toString]] +++$+++  VAR[java.lang.String] OP[assign] VAR[java.lang.String] EOL
CALL[javax.swing.text.JTextComponent,setText,1,void] PARA[CALL[java.lang.StringBuffer,toString]] +++$+++  OP[assign] VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND LEX[result.addElement] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART IF PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.GraphicsEnvironment,getDefaultScreenDevice,0,java.awt.GraphicsDevice] +++$+++  EOL TYPE[GraphicsDevice] VAR[java.awt.GraphicsDevice] OP[assign]
CALL[java.awt.GraphicsDevice,getDefaultConfiguration,0,java.awt.GraphicsConfiguration] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.awt.Color,equals,1,boolean] PARA[VAR[java.awt.Color]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getModifiers,0,int] +++$+++  CURLYSTART IF PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.Graphics,drawImage,4,boolean] PARA[VAR[java.awt.Image]] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[weka.gui.boundaryvisualizer.BoundaryPanel.PlotPanel]] +++$+++  LEX[m_plotPanel.getGraphics] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Vector,clear,0,void] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTextField,requestFocus,0,void] +++$+++  LEX[setFocus] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.StreamTokenizer,ordinaryChar,1,void] PARA[LIT[Character]] +++$+++  LEX[m_st.ordinaryChar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Vector,addElement,1,void] PARA[CALL[java.lang.String,substring]] +++$+++  OP[sum] EOL CURLYEND CURLYEND
CALL[java.io.PrintWriter,print,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[INT]] +++$+++  LEX[writer.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Character]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[MemberSpecification] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[sum] OP[assign]
CALL[java.lang.Comparable,compareTo,1,int] PARA[VAR[java.lang.Comparable]] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[MemberSpecification] PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  LEX[dispose] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawPolygon,1,void] PARA[VAR[java.awt.Polygon]] +++$+++  LEX[Polygon] VAR[java.awt.Polygon] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawRect,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawRoundRect,6,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawString,3,void] PARA[VAR[java.lang.String]] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  LEX[float] VAR[FLOAT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,fill3DRect,5,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,transform,1,void] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  LEX[AffineTransform] VAR[java.awt.geom.AffineTransform] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[JComponent] PARENTHESESEND
CALL[javax.swing.JComponent,getPreferredSize,0,java.awt.Dimension] +++$+++  EOL TYPE[Dimension] VAR[java.awt.Dimension] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  NULL OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.DataOutput,write,3,void] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.DataOutput,writeChars,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.DataOutput,writeFloat,1,void] PARA[VAR[FLOAT]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.DataOutput,writeLong,1,void] PARA[VAR[LONG]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.DataOutput,writeShort,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.DataInput,readDouble,0,double] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.DataInput,readFully,1,void] PARA[VAR[BYTE]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createRigidArea]] +++$+++  LEX[JPanel] VAR[javax.swing.JPanel] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,columnAtPoint,1,int] PARA[CALL[java.awt.event.MouseEvent,getPoint]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.logging.Logger,fine,1,void] PARA[CALL[null,format]] +++$+++  LEX[Level.FINE] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createRigidArea]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JComboBox,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[javax.swing.DefaultComboBoxModel] PARENTHESESEND EOL
CALL[javax.swing.JColorChooser,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  LEX[Color] VAR[java.awt.Color] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sourceforge.ganttproject.gui.NotificationItem]] +++$+++  FIELD[myTitle,net.sourceforge.ganttproject.gui.NotificationItem] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JList,getSelectedIndex,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[myPagesList.setSelectedIndex] PARENTHESESSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.lang.Runnable,run,0,void] +++$+++  LEX[onOkPressed] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[null,valueOf]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.List,clear,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.tree.TreeNode,getChildCount,0,int] +++$+++  RETURN VAR[INT] OP[assign] OP[assign]
CALL[java.awt.Color,getRGB,0,int] +++$+++  VAR[INT] ARRAYEND OP[greaterThan] OP[ternaryTrue]
CALL[biz.ganttproject.core.time.GanttCalendar,clear,0,void] +++$+++  LEX[CalendarFactory.createGanttCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART TYPE[FontSubstitution] VAR[org.ganttproject.impex.htmlpdf.itext.FontSubstitutionModel.FontSubstitution] OP[ternaryFalse]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.Map]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[org.argouml.model.mdr.Registry.T]] +++$+++  VAR[org.argouml.model.mdr.Registry.T] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[org.argouml.model.mdr.Registry.T]] +++$+++  VAR[org.argouml.model.mdr.Registry.T] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART LEX[results.addAll] PARENTHESESSTART
CALL[java.awt.Container,getComponent,1,java.awt.Component] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.Container,getWidth,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.List,size,0,int] +++$+++  VAR[javax.swing.JToolBar] EOL IF PARENTHESESSTART
CALL[javax.swing.JToolBar,setRollover,1,void] PARA[LIT[Boolean]] +++$+++  LEX[tbf.createToolBar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  LEX[classes.add] PARENTHESESSTART LEX[metaTypeByName.get] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,retainAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[sum]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[resourceLocations.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[javax.swing.RootPaneContainer,getGlassPane,0,java.awt.Component] +++$+++  CURLYSTART IF PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.Action,putValue,2,void] PARA[LIT[Stirng]] PARA[CALL[null,getKeyStroke]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[javax.swing.Action,putValue,2,void] PARA[LIT[Stirng]] PARA[CALL[null,getKeyStroke]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,put,2,V] PARA[CALL[null,valueOf]] PARA[VAR[java.lang.Class]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Point,getY,0,double] +++$+++  PARENTHESESEND OP[sum] VAR[INT] COMMA
CALL[java.util.Set,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.Object,equals,1,boolean] PARA[CALL[java.util.Iterator,next]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[VAR[CHAR]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.DefaultListModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.ListModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[result.add] PARENTHESESSTART
CALL[java.awt.Container,getComponentCount,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.File,delete,0,boolean] +++$+++  LEX[File] VAR[java.io.File] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  INSTANCEOF TYPE[FigEdgeAssociationClass] PARENTHESESEND CURLYSTART
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  CURLYEND CURLYEND VAR[java.util.Iterator] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[LIT[Integer]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[true] EOL
CALL[javax.swing.JFileChooser,addChoosableFileFilter,1,void] PARA[VAR[org.argouml.persistence.MultitypeFileFilter]] +++$+++  PARENTHESESSTART LEX[defaultPersister] PARENTHESESEND EOL
CALL[java.io.UnsupportedEncodingException,toString,0,java.lang.String] +++$+++  VAR[java.io.UnsupportedEncodingException] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[org.argouml.language.java.reveng.classfile.ParserUtils.Token,getValue]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,clear,0,void] +++$+++  LEX[clearMethodCalls] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Date,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.GregorianCalendar,getTime,0,java.util.Date] +++$+++  CURLYEND TYPE[Date] VAR[java.util.Date] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[result.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.InterruptedException,printStackTrace,0,void] +++$+++  TYPE[InterruptedException] VAR[java.lang.InterruptedException] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  FINAL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JLabel,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  CURLYSTART LEX[tfL4Text.setEnabled] PARENTHESESSTART OP[not]
CALL[java.awt.Dimension,setSize,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND VAR[INT] OP[assign] EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] OP[ternaryFalse] VAR[java.util.Set] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[not] OP[assign]
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.prefs.Preferences,getBoolean,2,boolean] PARA[VAR[java.lang.String]] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  LEX[PREFS.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[javax.swing.JLabel,setPreferredSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setMaximumSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[java.util.List,equals,1,boolean] PARA[FIELD[jmemorize.core.learn.LearnHistory]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTextPane,getStyledDocument,0,javax.swing.text.StyledDocument] +++$+++  CURLYSTART RETURN LEX[FormattedText.formatted] PARENTHESESSTART
CALL[javax.swing.JPanel,removeAll,0,void] +++$+++  OP[assign] LEX[Mode.TEXT_AND_IMAGE] PARENTHESESEND EOL
CALL[javax.swing.JTextPane,requestFocus,0,void] +++$+++  COMMA LEX[BorderLayout.EAST] PARENTHESESEND EOL
CALL[javax.swing.JTextPane,getInputMap,1,javax.swing.InputMap] PARA[FIELD[JComponent]] +++$+++  EOL TYPE[InputMap] VAR[javax.swing.InputMap] OP[assign]
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JSpinner,setEnabled,1,void] PARA[CALL[javax.swing.JRadioButton,isSelected]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JList,setVisibleRowCount,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[javax.swing.JList] PARENTHESESEND EOL
CALL[javax.swing.JList,setVisibleRowCount,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[javax.swing.JList] PARENTHESESEND EOL
CALL[java.awt.Toolkit,getSystemClipboard,0,java.awt.datatransfer.Clipboard] +++$+++  EOL TYPE[Clipboard] VAR[java.awt.datatransfer.Clipboard] OP[assign]
CALL[jmemorize.gui.swing.widgets.ExtentProgressBar,getValue,0,int] +++$+++  LEX[KeyEvent.VK_LEFT] OP[ternaryFalse] LEX[bar.setValue] PARENTHESESSTART
CALL[jmemorize.gui.swing.widgets.ExtentProgressBar,getValue,0,int] +++$+++  LEX[KeyEvent.VK_RIGHT] OP[ternaryFalse] LEX[bar.setValue] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.io.InputStream,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  VAR[java.io.File] OP[assign] LEX[fileTools.createTempDir] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  COMMA COMMA LEX[Color.BLUE] COMMA
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ImageWriter] PARENTHESESEND
CALL[java.awt.image.renderable.ParameterBlock,addSource,1,java.awt.image.renderable.ParameterBlock] PARA[VAR[java.awt.image.RenderedImage]] +++$+++  PARENTHESESSTART VAR[java.awt.image.RenderedImage] PARENTHESESEND EOL
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.JPanel,setLayout,1,void] PARA[VAR[java.awt.LayoutManager]] +++$+++  PARENTHESESSTART VAR[javax.swing.border.Border] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,removeItemListener,1,void] PARA[VAR[java.awt.event.ItemListener]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  VAR[java.awt.event.ItemListener] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[assign] LEX[false] EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.BufferedWriter,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  COMMA LEX[RenderingHints.VALUE_RENDER_QUALITY] PARENTHESESEND EOL
CALL[java.awt.color.ColorSpace,getMinValue,1,float] PARA[LIT[Integer]] +++$+++  EOL LEX[float] VAR[FLOAT] OP[assign]
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[java.io.PrintStream] OP[assign] LEX[System.err] EOL
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  BOOLEAN VAR[BOOLEAN] OP[assign] PARENTHESESSTART
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[WindowEvent] LEX[event] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.awt.event.ActionEvent,getActionCommand,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTextField,setText,1,void] PARA[CALL[java.io.File,getAbsolutePath]] +++$+++  LEX[chooser.getSelectedFile] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.image.RenderedImage,getHeight,0,int] +++$+++  LEX[image.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JButton,addActionListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.DefaultListModel,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[File] PARENTHESESEND
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.ChangeListener]] +++$+++  OP[not] OP[assign] NULL EOL
CALL[javax.swing.ListSelectionModel,setSelectionMode,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.ListSelectionModel,setValueIsAdjusting,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseWheelEvent,getScrollType,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.ListSelectionModel,removeIndexInterval,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[ComicSheet] PARENTHESESEND
CALL[java.awt.Color,equals,1,boolean] PARA[VAR[java.awt.Color]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,exists,0,boolean] +++$+++  IF PARENTHESESSTART OP[not] PARENTHESESSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Set,clear,0,void] +++$+++  LEX[clearPendingEvents] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JList,getSelectedValue,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[JFMFile] PARENTHESESEND
CALL[javax.swing.JPopupMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenuItem] PARENTHESESEND EOL
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[LIT[Integer]] +++$+++  LEX[fout.getOutputStream] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.OutputStream,close,0,void] +++$+++  CURLYSTART CURLYEND TRY CURLYSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[org.jfm.views.FontDialog,setLocationRelativeTo,1,void] PARA[VAR[java.awt.Frame]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JTextArea,getFont,0,java.awt.Font] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,setStroke,1,void] PARA[VAR[java.awt.BasicStroke]] +++$+++  TYPE[Graphics2D] PARENTHESESEND VAR[java.awt.Graphics] EOL
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  EOL INT VAR[INT] EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[fileStartCheckBox.isSelected] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JMenuItem,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Vector,size,0,int] +++$+++  PARENTHESESEND EOL LEX[undoItem.setEnabled] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[pasteItem.setEnabled] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND PARENTHESESEND LEX[closure.execute] PARENTHESESSTART
CALL[java.util.Date,after,1,boolean] PARA[VAR[java.util.Date]] +++$+++  VAR[java.util.Date] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.GregorianCalendar,setTimeInMillis,1,void] PARA[VAR[LONG]] +++$+++  LEX[DateTime.calendarInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.GregorianCalendar,getTimeInMillis,0,long] +++$+++  LEX[DateTime.calendarInstance] PARENTHESESSTART VAR[INT] RETURN
CALL[java.util.Date,getTime,0,long] +++$+++  CURLYSTART RETURN PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Association] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[list.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.LinkedList,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,containsAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,getFirst,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,getLast,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,remove,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[data] EOL WHILE PARENTHESESSTART
CALL[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode,add,1,void] PARA[VAR[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode]] +++$+++  VAR[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode] PARENTHESESEND EOL CURLYEND
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[TaskReference] PARENTHESESEND
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.awt.BasicStroke]] +++$+++  COMMA VAR[java.awt.BasicStroke] PARENTHESESEND EOL
CALL[java.util.List,listIterator,0,java.util.ListIterator<E>] +++$+++  PARENTHESESSTART TYPE[ListIterator] VAR[java.util.ListIterator] OP[assign]
CALL[java.lang.ClassNotFoundException,printStackTrace,0,void] +++$+++  TYPE[ClassNotFoundException] VAR[java.lang.ClassNotFoundException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  OP[assign] NEW TYPE[ByteArrayInputStream] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  LEX[log.error] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Writer,toString,0,java.lang.String] +++$+++  VAR[java.io.PrintWriter] PARENTHESESEND EOL RETURN
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Node] PARENTHESESEND
CALL[javax.swing.filechooser.FileFilter,accept,1,boolean] PARA[VAR[java.io.File]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL ELSE RETURN
CALL[java.util.Calendar,getFirstDayOfWeek,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  VAR[BOOLEAN] PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  CURLYEND CASE OP[ternaryFalse] CURLYSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.io.OutputStreamWriter,write,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[m_indent.substring] PARENTHESESSTART COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[true] PARENTHESESEND CURLYSTART
CALL[java.util.Date,getTime,0,long] +++$+++  IF PARENTHESESSTART VAR[LONG] OP[lessThan]
CALL[java.util.Date,getTime,0,long] +++$+++  LEX[d1.getTime] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.util.Date,getTime,0,long] +++$+++  LEX[canonicalTime.getTime] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[net.sf.mpxj.primavera.Record,toString]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.io.PrintWriter,print,1,void] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[pw.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,flush,0,void] +++$+++  LEX[pw.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CURLYEND DEFAULT OP[ternaryFalse] CURLYSTART
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND EOL VAR[java.util.Date] OP[assign]
CALL[java.lang.Number,intValue,0,int] +++$+++  LEX[result] OP[assign] LEX[Duration.getInstance] PARENTHESESSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[ternaryFalse] VAR[java.util.ArrayList] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  VAR[net.sf.mpxj.mpp.FieldMap.FieldItem] PARENTHESESEND EOL CURLYEND
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND EOL VAR[java.util.Date] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND EOL
CALL[java.util.HashMap,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART TYPE[Integer] VAR[java.lang.Integer] OP[ternaryFalse]
CALL[java.io.PrintWriter,println,0,void] +++$+++  LEX[pw.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  LEX[o2.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  CURLYEND CURLYEND CURLYEND CURLYEND
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  TRY CURLYSTART VAR[BYTE] OP[assign]
CALL[java.awt.Component,getParent,0,java.awt.Container] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.awt.Component] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.awt.Component,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.Collection,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.ArrayList,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.ListIterator,hasPrevious,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.InputStream,available,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.awt.LayoutManager,addLayoutComponent,2,void] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[java.awt.Component,getFont,0,java.awt.Font] +++$+++  CURLYSTART TYPE[Font] VAR[java.awt.Font] OP[assign]
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[LIT[Integer]] PARA[VAR[FLOAT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.FontMetrics,stringWidth,1,int] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.awt.Color,getGreen,0,int] +++$+++  LEX[color.getRed] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Color,getBlue,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getRGB,7,int[]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[javax.swing.AbstractButton,setFocusable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[javax.swing.AbstractButton,setBounds,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[javax.swing.AbstractButton] PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[DataObject] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[SerializedDataObject] PARENTHESESEND
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[TaskData] PARENTHESESEND
CALL[java.lang.StringBuffer,setCharAt,2,void] PARA[VAR[INT]] PARA[LIT[Character]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.io.ObjectInputStream,readObject,0,java.lang.Object] +++$+++  VAR[java.io.ByteArrayInputStream] PARENTHESESEND EOL RETURN
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL LEX[r.setSerialized] PARENTHESESSTART
CALL[java.io.ObjectInputStream,readObject,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[DataObject] PARENTHESESEND
CALL[java.util.StringTokenizer,hasMoreElements,0,boolean] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND OP[ternaryTrue] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Field] PARENTHESESEND
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  CURLYSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.awt.Point,getX,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.awt.Point,getY,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.awt.Point,getY,0,double] +++$+++  OP[assign] PARENTHESESSTART INT PARENTHESESEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  VAR[java.lang.String] EOL VAR[java.lang.String] OP[assign]
CALL[java.io.DataInputStream,close,0,void] +++$+++  OP[sum] OP[sum] EOL CURLYEND
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.net.Socket,getOutputStream,0,java.io.OutputStream] +++$+++  OP[assign] NEW TYPE[PrintStream] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.net.Socket,getInputStream,0,java.io.InputStream] +++$+++  PARENTHESESSTART NEW TYPE[InputStreamReader] PARENTHESESSTART
CALL[java.lang.Thread,join,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  VAR[java.lang.Object] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  LEX[out.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.ServerSocket,accept,0,java.net.Socket] +++$+++  CURLYSTART TYPE[Socket] VAR[java.net.Socket] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND IF PARENTHESESSTART PARENTHESESSTART
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.table.TableColumn,setMinWidth,1,void] PARA[LIT[Integer]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableColumn,setPreferredWidth,1,void] PARA[LIT[Integer]] +++$+++  LEX[column.setMinWidth] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.table.TableColumn,setMaxWidth,1,void] PARA[LIT[Integer]] +++$+++  LEX[column.setPreferredWidth] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JButton] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JButton] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setLayout,1,void] PARA[VAR[java.awt.GridBagLayout]] +++$+++  TYPE[GridBagLayout] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPasswordField,setText,1,void] PARA[LIT[Stirng]] +++$+++  LEX[jtfUser.setText] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,setText,1,void] PARA[LIT[Stirng]] +++$+++  LEX[jtfHost.setText] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPasswordField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[selectedHostInfo.name] OP[assign]
CALL[java.io.DataInput,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,getText,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[out.println] PARENTHESESSTART
CALL[javax.swing.JTextField,requestFocus,0,void] +++$+++  LEX[requestFocus] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.Class,newInstance,0,T] +++$+++  OP[assign] PARENTHESESSTART TYPE[Directive] PARENTHESESEND
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] COMMA
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Collection,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,listFiles,0,java.io.File[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.io.File] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.HashMap,containsKey,1,boolean] PARA[VAR[jasdl.bridge.mapping.MappingManager.X]] +++$+++  VAR[jasdl.bridge.mapping.MappingManager.X] PARENTHESESEND CURLYSTART RETURN
CALL[commerce.view.CommerceView.CommerceViewPane,repaint,0,void] +++$+++  LEX[update] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.io.FileWriter,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.FileWriter,close,0,void] +++$+++  LEX[fw.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  TYPE[String] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.lang.StringBuffer,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] OP[lessThan] PARENTHESESEND
CALL[javax.swing.Timer,start,0,void] +++$+++  LEX[blinkTimer.isRunning] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[javax.swing.JComponent,isOpaque,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.awt.Graphics2D,getColor,0,java.awt.Color] +++$+++  EOL TYPE[Color] VAR[java.awt.Color] OP[assign]
CALL[java.awt.Graphics2D,setComposite,1,void] PARA[VAR[java.awt.Composite]] +++$+++  COMMA FIELD[height,java.awt.Dimension] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESSTART VAR[java.awt.Composite] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[ternaryFalse] RETURN LEX[ResourceManager.getImage] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  VAR[INT] COMMA VAR[INT] COMMA
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[javax.swing.JPanel,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[DOUBLE]] PARA[VAR[INT]] +++$+++  COMMA VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getTranslateInstance]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JLabel,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  LEX[template] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableList(T...).T]] +++$+++  VAR[net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableList(T...).T] OP[ternaryFalse] VAR[net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableList(T...).T] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Random,nextFloat,0,float] +++$+++  CURLYSTART LEX[float] VAR[FLOAT] OP[assign]
CALL[java.util.Random,nextDouble,0,double] +++$+++  CURLYSTART DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  LEX[delim.length] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[delim.indexOf] PARENTHESESSTART
CALL[java.lang.Class,getDeclaredConstructor,1,java.lang.reflect.Constructor<T>] PARA[VAR[java.lang.Class]] +++$+++  TRY CURLYSTART VAR[java.lang.reflect.Constructor] OP[assign]
CALL[java.io.ObjectOutputStream,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.util.Random] PARENTHESESEND EOL
CALL[java.util.List,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,canWrite,0,boolean] +++$+++  OP[ternaryTrue] OP[ternaryFalse] PARENTHESESSTART OP[not]
CALL[java.io.File,mkdir,0,boolean] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  ARRAYEND OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[FAName] PARENTHESESEND
CALL[java.net.Socket,connect,2,void] PARA[VAR[java.net.SocketAddress]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[lessThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[net.sf.freecol.common.model.TypeCountMap.T]] +++$+++  OP[sub] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Map,clear,0,void] +++$+++  LEX[clearAll] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.net.JarURLConnection,getJarFile,0,java.util.jar.JarFile] +++$+++  CURLYSTART TYPE[JarFile] VAR[java.util.jar.JarFile] OP[assign]
CALL[java.util.logging.Logger,info,1,void] PARA[LIT[Stirng]] +++$+++  LEX[c.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.FileReader]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.PropertyResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  LEX[base.length] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[javax.swing.JSplitPane,setRightComponent,1,void] PARA[VAR[javax.swing.JComponent]] +++$+++  PARENTHESESSTART VAR[javax.swing.JComponent] PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.geom.Area] PARENTHESESEND EOL
CALL[java.lang.String,compareToIgnoreCase,1,int] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Window,dispose,0,void] +++$+++  LEX[ActionEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTree,collapseRow,1,void] PARA[VAR[INT]] +++$+++  EOL LEX[i--] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTree,getRowCount,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.SecurityException,getMessage,0,java.lang.String] +++$+++  LEX[Logger.info] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.UnsupportedOperationException,getMessage,0,java.lang.String] +++$+++  LEX[Logger.info] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.Runnable,run,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButtonMenuItem]] +++$+++  PARENTHESESSTART VAR[javax.swing.Action] PARENTHESESEND EOL
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[CALL[java.lang.String,trim]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,startsWith,2,boolean] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[response.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[javax.swing.JList,getSelectedValue,0,E] +++$+++  COMMA PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.event.ListSelectionEvent,getFirstIndex,0,int] +++$+++  CURLYSTART VAR[javax.swing.JButton] LEX[setEnabled] PARENTHESESSTART
CALL[javax.swing.Action,actionPerformed,1,void] PARA[VAR[java.awt.event.ActionEvent]] +++$+++  LEX[ActionEvent] VAR[java.awt.event.ActionEvent] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[Logger.error] PARENTHESESSTART
CALL[java.awt.event.KeyEvent,getKeyCode,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Thread,interrupt,0,void] +++$+++  LEX[stop] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Map.Entry] OP[ternaryFalse]
CALL[java.io.OutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  LEX[connection.getOutputStream] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.HttpURLConnection,setRequestMethod,1,void] PARA[LIT[Stirng]] +++$+++  LEX[url.openConnection] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.regex.Matcher,group,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND COMMA LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  NULL OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Throwable] OP[assign]
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.ThreadGroup,getName,0,java.lang.String] +++$+++  COMMA LEX[String.format] PARENTHESESSTART COMMA
CALL[java.util.concurrent.atomic.AtomicInteger,incrementAndGet,0,int] +++$+++  LEX[group.getName] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.nio.ByteBuffer,mark,0,java.nio.Buffer] +++$+++  INT LEX[readlimit] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[sum] OP[sum] EOL
CALL[java.nio.charset.Charset,name,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[detector.setDeclaredEncoding] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[filename.substring] PARENTHESESSTART
CALL[java.util.SortedMap,put,2,V] PARA[VAR[java.io.File]] PARA[VAR[java.util.List]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[VAR[java.nio.ByteBuffer]] +++$+++  LEX[buffer.flip] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.Timer,restart,0,void] +++$+++  VAR[javax.swing.event.DocumentEvent] OP[assign] VAR[javax.swing.event.DocumentEvent] EOL
CALL[java.awt.Color,getGreen,0,int] +++$+++  LEX[c.getRed] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.function.Consumer,accept,1,void] PARA[VAR[java.awt.event.WindowEvent]] +++$+++  LEX[WindowEvent] VAR[java.awt.event.WindowEvent] PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[net.filebot.util.TemporaryFolder]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  LEX[debug.log] PARENTHESESSTART LEX[Level.WARNING] COMMA
CALL[java.util.logging.StreamHandler,setLevel,1,void] PARA[VAR[java.util.logging.Level]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.event.PopupMenuEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] PARENTHESESSTART TYPE[JPopupMenu] PARENTHESESEND
CALL[javax.swing.JPopupMenu,removeAll,0,void] +++$+++  LEX[evt.getSource] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.datatransfer.DataFlavor,isFlavorJavaFileListType,0,boolean] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTable,setAutoCreateRowSorter,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[Color.white] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  PARENTHESESSTART LEX[Level.SEVERE] COMMA OP[sum]
CALL[java.util.Comparator,compare,2,int] PARA[VAR[java.io.File]] PARA[VAR[java.io.File]] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,duplicate,0,java.nio.ByteBuffer] +++$+++  PARENTHESESSTART NEW TYPE[ByteBufferInputStream] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART RETURN LEX[path.substring] PARENTHESESSTART
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  OP[assign] LEX[ScriptException.class] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[Level.parse] PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Collection,remove,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART VAR[java.util.Collection] PARENTHESESEND CURLYSTART
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  PARENTHESESEND EOL LEX[FileUtilities.createFolders] PARENTHESESSTART
CALL[net.filebot.cli.GroovyPad.Runner,execute,0,void] +++$+++  PARENTHESESSTART NULL PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sent.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Timer,isRunning,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[javax.swing.Timer,restart,0,void] +++$+++  LEX[timer.isRunning] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[javax.swing.Timer,start,0,void] +++$+++  LEX[dialog.setOpacity] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[opacity] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,setDelay,1,void] PARA[VAR[INT]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[javax.swing.JDialog,setOpacity,1,void] PARA[LIT[Integer]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[timer.start] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] OP[assign] LEX[Character.digit] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  OP[assign] VAR[INT] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA NULL PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.ArrayList,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  TYPE[Object] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[javax.swing.Timer,stop,0,void] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.awt.Font,deriveFont,1,java.awt.Font] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  PARENTHESESEND EOL VAR[java.awt.Font] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[MenuElement] PARENTHESESEND
CALL[java.util.Vector,addElement,1,void] PARA[CALL[java.sql.ResultSet,getObject]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[DOUBLE] OP[assign] LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.util.LinkedList,remove,1,boolean] PARA[VAR[java.awt.event.TextListener]] +++$+++  LEX[TextListener] VAR[java.awt.event.TextListener] PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.ObjectInput,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.Writer,flush,0,void] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART LEX[count--] OP[greaterThan] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.Stack,isEmpty,0,boolean] +++$+++  OP[ternaryFalse] IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.FontMetrics,getHeight,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,size,0,int] +++$+++  OP[assign] NEW INT ARRAYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[not] OP[assign] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART VAR[INT] OP[sum] OP[assign]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.DefaultListModel,getSize,0,int] +++$+++  LEX[bufferList.setVisibleRowCount] PARENTHESESSTART LEX[Math.min] PARENTHESESSTART
CALL[javax.swing.DefaultListModel,getSize,0,int] +++$+++  EOL LEX[bufferList.setSelectionInterval] PARENTHESESSTART COMMA
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.Timer,start,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Vector,insertElementAt,2,void] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[java.util.Vector] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,getChars,4,void] PARA[LIT[Integer]] PARA[CALL[java.lang.StringBuilder,length]] PARA[VAR[CHAR]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND ARRAYEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESEND COMMA VAR[INT] COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gjt.sp.jedit.syntax.ParserRuleSet]] +++$+++  LEX[ParserRuleSet] VAR[org.gjt.sp.jedit.syntax.ParserRuleSet] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[currentAbbrevs.put] PARENTHESESSTART
CALL[java.awt.Component,getParent,0,java.awt.Container] +++$+++  EOL ELSE VAR[java.awt.Component] OP[assign]
CALL[java.awt.Frame,addWindowStateListener,1,void] PARA[VAR[org.gjt.sp.jedit.GUIUtilities.SizeSaver]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.net.HttpURLConnection,getResponseMessage,0,java.lang.String] +++$+++  LEX[c.getResponseCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND LEX[buf.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.CharSequence,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.Deque,removeLast,0,E] +++$+++  PARENTHESESEND OP[greaterThan] VAR[INT] PARENTHESESEND
CALL[java.util.List,toArray,1,T[]] PARA[VAR[org.gjt.sp.jedit.Macros.Handler]] +++$+++  PARENTHESESEND ARRAYEND EOL RETURN
CALL[java.util.Properties,putAll,1,void] PARA[VAR[java.util.Properties]] +++$+++  PARENTHESESSTART VAR[java.util.Properties] PARENTHESESEND EOL
CALL[java.util.Properties,putAll,1,void] PARA[VAR[java.util.Properties]] +++$+++  VAR[java.util.Properties] OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  LEX[IOException] CURLYSTART TRY CURLYSTART
CALL[java.util.Vector,elements,0,java.util.Enumeration<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,length,0,int] +++$+++  OP[not] VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.tree.DefaultMutableTreeNode,getChildCount,0,int] +++$+++  OP[lessThan] TYPE[DefaultMutableTreeNode] OP[greaterThan] PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[operNode.children] PARENTHESESSTART PARENTHESESEND EOL
CALL[org.gjt.sp.jedit.gui.FilteredTableModel.E,getColumnCount,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics,drawString,3,void] PARA[VAR[java.lang.String]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.event.KeyEvent,getKeyCode,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.table.DefaultTableModel,moveRow,3,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.JList,setToolTipText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,remove,1,void] PARA[VAR[javax.swing.JLabel]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,put,2,V] PARA[VAR[org.gjt.sp.jedit.bsh.BshClassManager.SignatureKey]] PARA[VAR[java.lang.reflect.Method]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND PARENTHESESEND
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[PrintWriter] VAR[java.io.PrintWriter] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.Class,getModifiers,0,int] +++$+++  CURLYSTART RETURN LEX[Modifier.isPublic] PARENTHESESSTART
CALL[java.lang.Class,newInstance,0,T] +++$+++  OP[assign] PARENTHESESSTART TYPE[ClassGenerator] PARENTHESESEND
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.Class,isInstance,1,boolean] PARA[THIS[null]] +++$+++  TYPE[UtilEvalError] CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[CHAR] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] OP[assign] EOL CURLYEND
CALL[java.io.OutputStream,write,1,void] PARA[CALL[java.lang.String,getBytes]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[javax.swing.JTree,setSelectionPath,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART VAR[javax.swing.tree.TreePath] PARENTHESESEND EOL
CALL[java.awt.Font,getStringBounds,2,java.awt.geom.Rectangle2D] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.font.FontRenderContext]] +++$+++  EOL TYPE[Rectangle2D] VAR[java.awt.geom.Rectangle2D] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Set,clear,0,void] +++$+++  LEX[saveExpansionState] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JList,setModel,1,void] PARA[VAR[javax.swing.DefaultListModel]] +++$+++  OP[assign] VAR[java.lang.String] EOL CURLYEND
CALL[javax.swing.JMenu,addSeparator,0,void] +++$+++  PARENTHESESSTART VAR[javax.swing.JCheckBoxMenuItem] PARENTHESESEND EOL
CALL[javax.swing.JRadioButtonMenuItem,addActionListener,1,void] PARA[VAR[org.gjt.sp.jedit.browser.BrowserCommandsMenu.ActionHandler]] +++$+++  LEX[otherEncoding.setActionCommand] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,size,0,int] +++$+++  COMMA VAR[java.lang.String] COMMA COMMA
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.FileOutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  OP[assign] FIELD[length,BYTE] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] PARENTHESESEND RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[CHAR] EOL VAR[CHAR] OP[assign]
CALL[java.util.ListIterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[BibProjectionAnnotation] PARENTHESESEND
CALL[java.io.BufferedReader,close,0,void] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[greaterThan] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,listIterator,0,java.util.ListIterator<E>] +++$+++  PARENTHESESSTART TYPE[ListIterator] VAR[java.util.ListIterator] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sourceforge.texlipse.model.AbstractEntry]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,removeAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  PARENTHESESSTART VAR[java.util.Set] PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Class,getModifiers,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[edu.umd.cs.findbugs.BugCode]] +++$+++  VAR[edu.umd.cs.findbugs.BugCode] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.Multiset.K]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.Multiset.K]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART NULL PARENTHESESEND EOL
CALL[javax.swing.text.EditorKit,read,3,void] PARA[VAR[java.io.Reader]] PARA[VAR[javax.swing.text.html.HTMLDocument]] PARA[LIT[Integer]] +++$+++  TYPE[HTMLDocument] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  LEX[url.openStream] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[edu.umd.cs.findbugs.AnalysisError]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[edu.umd.cs.findbugs.ba.jsr305.TypeQualifierValueSet.copyMapValue(java.util.Map<K, V>, K, K).K]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[buf.append] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  LEX[className.hashCode] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND OP[ternaryTrue]
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.BitSet,and,1,void] PARA[VAR[java.util.BitSet]] +++$+++  EOL CURLYEND CURLYEND CURLYEND
CALL[java.util.LinkedList,addLast,1,void] PARA[VAR[edu.umd.cs.findbugs.ba.ch.Subtypes2.SupertypeTraversalPath]] +++$+++  PARENTHESESSTART LEX[vertex] PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART ASSERT
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[loadType] OP[assign] NULL EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[ternaryFalse] PARENTHESESEND EOL
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.BitSet,get,1,boolean] PARA[VAR[INT]] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.io.PushbackReader,read,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  TYPE[Token] PARENTHESESSTART LEX[Token.COMMENT] COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[categorySet.add] PARENTHESESSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.props.WarningPropertySet.T]] PARA[VAR[java.lang.Boolean]] +++$+++  LEX[Boolean] VAR[java.lang.Boolean] PARENTHESESEND CURLYSTART
CALL[java.util.SortedMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[ZipOutputStream] VAR[java.util.zip.ZipOutputStream] OP[assign]
CALL[java.util.SortedMap,headMap,1,java.util.SortedMap<K, V>] PARA[VAR[java.lang.String]] +++$+++  TYPE[ZipOutputStream] OP[greaterThan] VAR[java.util.SortedMap] OP[assign]
CALL[java.util.zip.ZipOutputStream,closeEntry,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.io.PrintStream,println,0,void] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.util.prefs.Preferences,putLong,2,void] PARA[LIT[Stirng]] PARA[VAR[LONG]] +++$+++  LEX[random.nextLong] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[edu.umd.cs.findbugs.classfile.ClassDescriptor]] +++$+++  VAR[edu.umd.cs.findbugs.classfile.ClassDescriptor] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextArea,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  LEX[resetCommentBoxFont] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.table.TableColumn,getModelIndex,0,int] +++$+++  OP[lessThan] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.DefaultListSelectionModel,getMinSelectionIndex,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JComponent]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  FIELD[fill,java.awt.GridBagConstraints] OP[assign] LEX[GridBagConstraints.HORIZONTAL] EOL
CALL[javax.swing.JTextField,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,contains,1,boolean] PARA[VAR[java.io.File]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.LinkedHashSet,add,1,boolean] PARA[CALL[java.net.URL,toURI]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[javax.swing.JTree,removeTreeExpansionListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[javax.swing.event.TreeModelListener]] +++$+++  LEX[TreeModelListener] VAR[javax.swing.event.TreeModelListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenuItem,setAccelerator,1,void] PARA[CALL[null,getKeyStroke]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.text.Document,getLength,0,int] +++$+++  LEX[doc.getText] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  OP[assign] EOL VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,getLiteral]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ConversionSpecification] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,getLiteral]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ConversionSpecification] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,compareToIgnoreCase,1,int] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.RandomAccessFile,setLength,1,void] PARA[LIT[Integer]] +++$+++  LEX[f.seek] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  VAR[FLOAT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,writeInt,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.RandomAccessFile,writeByte,1,void] PARA[VAR[BYTE]] +++$+++  ARRAYSTART ARRAYEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[jake2.game.SuperAdapter]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.LinkedList,isEmpty,0,boolean] +++$+++  LEX[ev] OP[assign] PARENTHESESSTART OP[not]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.nio.ByteBuffer,getInt,0,int] +++$+++  LEX[bb.getInt] PARENTHESESSTART PARENTHESESEND LEX[^]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.RandomAccessFile,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  BREAK EOL TRY CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[javax.swing.JTable,repaint,0,void] +++$+++  ARRAYSTART VAR[INT] ARRAYEND EOL
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[FieldDefinition] VAR[org.h2.jaqu.TableDefinition.FieldDefinition] OP[assign]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Character]] PARA[VAR[INT]] +++$+++  VAR[INT] EOL VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND OP[sum]
CALL[java.lang.String,indexOf,2,int] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.awt.image.BufferedImage,getType,0,int] +++$+++  OP[assign] NEW TYPE[BufferedImage] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] COMMA
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART RETURN VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.RandomAccessFile,readFully,1,void] PARA[VAR[BYTE]] +++$+++  PARENTHESESEND VAR[LONG] ARRAYEND EOL
CALL[java.io.RandomAccessFile,close,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[org.h2.build.BuildBase.StringList,add,1,boolean] PARA[CALL[java.io.File,getPath]] +++$+++  OP[ternaryFalse] VAR[org.h2.build.BuildBase.FileList] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[CHAR] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL VAR[BYTE] OP[assign]
CALL[java.io.PrintWriter,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.zip.Deflater,deflate,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.zip.Deflater,finished,0,boolean] +++$+++  EOL WHILE PARENTHESESSTART OP[not]
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.util.zip.Inflater,end,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.util.concurrent.atomic.AtomicBoolean,getAndSet,1,boolean] PARA[LIT[Boolean]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL LEX[in.skip] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  COMMA VAR[LONG] PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART COMMA LEX[Math.min] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[lessThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.ThreadLocal,set,1,void] PARA[VAR[java.util.Calendar]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,setTimeInMillis,1,void] PARA[CALL[java.util.Date,getTime]] +++$+++  LEX[Calendar.getInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.management.ThreadInfo,getLockOwnerName,0,java.lang.String] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.util.concurrent.atomic.AtomicBoolean,get,0,boolean] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[reset] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[lessThan] PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESSTART CHAR VAR[CHAR] OP[ternaryFalse]
CALL[java.net.InetAddress,equals,1,boolean] PARA[VAR[java.net.InetAddress]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.net.InetAddress,getHostName,0,java.lang.String] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[org.h2.util.SortedProperties,load,1,void] PARA[VAR[java.io.InputStream]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Properties,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  CURLYEND CURLYEND WHILE PARENTHESESSTART
CALL[java.nio.channels.FileChannel,size,0,long] +++$+++  PARENTHESESEND CURLYSTART VAR[LONG] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.HashSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.h2.table.Column]] +++$+++  LEX[false] EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] COMMA
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,capacity,0,int] +++$+++  VAR[LONG] OP[assign] LEX[Math.max] PARENTHESESSTART
CALL[java.nio.ByteBuffer,capacity,0,int] +++$+++  LEX[Math.min] PARENTHESESSTART LEX[Integer.MAX_VALUE] COMMA
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.nio.ByteBuffer,hasRemaining,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  LEX[New.hashMap] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.DataOutputStream,writeInt,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[IndexInfo] VAR[org.h2.server.web.WebApp.IndexInfo] OP[assign]
CALL[java.util.HashMap,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.HashMap,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART TYPE[IndexInfo] VAR[org.h2.server.web.WebApp.IndexInfo] OP[ternaryFalse]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[result.append] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,parse]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.util.ArrayList,remove,1,E] PARA[LIT[Integer]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[ternaryTrue] LEX[string.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.DataOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.Map.Entry,getKey]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[not] LEX[Character.isDigit] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.concurrent.locks.Lock]] +++$+++  TYPE[ReentrantLock] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.concurrent.ExecutorService,shutdown,0,void] +++$+++  LEX[shutdown] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[MediaMonitor.isFullyPlayed] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  CASE OP[ternaryFalse] CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[FileUtil.renameForSorting] PARENTHESESSTART
CALL[java.lang.String,compareToIgnoreCase,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  RETURN VAR[java.lang.String] OP[sum] PARENTHESESSTART
CALL[java.util.Properties,clear,0,void] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[in.substring] PARENTHESESSTART COMMA
CALL[java.util.regex.Pattern,pattern,0,java.lang.String] +++$+++  OP[bitwiseOr] OP[not] LEX[find.equals] PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  PARENTHESESSTART NEW TYPE[ZipEntry] PARENTHESESSTART
CALL[java.util.zip.ZipOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHideVideoSettings] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setIgnoreTheWordAandThe] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHideLiveSubtitlesFolder] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setUseInfoFromIMDb] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setFullyPlayedOutputDirectory] PARENTHESESSTART
CALL[javax.swing.JScrollPane,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART VAR[javax.swing.JPanel] PARENTHESESEND EOL
CALL[javax.swing.JButton,getBackground,0,java.awt.Color] +++$+++  LEX[Messages.getString] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setForceExternalSubtitles] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  LEX[GuiUtil.enableContainer] PARENTHESESSTART VAR[javax.swing.JPanel] COMMA
CALL[java.io.FileOutputStream,write,1,void] PARA[CALL[java.lang.String,getBytes]] +++$+++  VAR[java.io.File] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHTTPEngineV2] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setExternalNetwork] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JToolTip,setComponent,1,void] PARA[THIS[null]] +++$+++  TYPE[HyperLinkToolTip] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[player.remove] PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.table.JTableHeader,getColumnModel,0,javax.swing.table.TableColumnModel] +++$+++  EOL TYPE[TableColumnModel] VAR[javax.swing.table.TableColumnModel] OP[assign]
CALL[java.io.OutputStream,flush,0,void] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Thread,start,0,void] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.net.URL,toURI,0,java.net.URI] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.HashMap,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[CALL[java.net.URL,getHost]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[siteinfo.get] PARENTHESESSTART
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  CURLYSTART TYPE[NetworkInterface] VAR[java.net.NetworkInterface] OP[assign]
CALL[java.lang.StringBuilder,append,3,java.lang.StringBuilder] PARA[VAR[CHAR]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Map,remove,1,V] PARA[LIT[Stirng]] +++$+++  LEX[properties.remove] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[INT]] PARA[VAR[CHAR]] +++$+++  COMMA VAR[CHAR] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.List,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[javax.swing.table.TableModel,getColumnName,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[groovy.model.DefaultTableModel.MyTableColumnModel,getColumn,1,javax.swing.table.TableColumn] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DefaultTableColumn] PARENTHESESEND
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  LEX[trigger] OP[assign] LEX[localSynthetics.get] PARENTHESESSTART
CALL[java.awt.Container,getComponents,0,java.awt.Component[]] +++$+++  CURLYSTART RETURN LEX[DefaultGroovyMethods.iterator] PARENTHESESSTART
CALL[java.awt.Container,removeAll,0,void] +++$+++  LEX[Container] VAR[java.awt.Container] PARENTHESESEND CURLYSTART
CALL[javax.swing.ListModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.table.DefaultTableModel,getColumnCount,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.table.TableColumnModel,getColumn,1,javax.swing.table.TableColumn] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.tree.TreePath,getPathCount,0,int] +++$+++  VAR[javax.swing.tree.TreePath] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[newAttr.setValue] PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,indexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,lastIndexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,listIterator,1,java.util.ListIterator<E>] PARA[VAR[INT]] +++$+++  RETURN NEW TYPE[ObservableListIterator] PARENTHESESSTART
CALL[java.util.Set,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[groovy.util.Node]] +++$+++  TYPE[Node] PARENTHESESEND VAR[java.lang.Object] EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Map,put,2,V] PARA[CALL[java.lang.Class,getName]] PARA[VAR[java.lang.Class]] +++$+++  PARENTHESESSTART VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.util.List,containsAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,addAll,2,boolean] PARA[VAR[INT]] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.OutputStreamWriter,getEncoding,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.BufferedWriter,write,1,void] PARA[VAR[CHAR]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.BufferedWriter,flush,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  LEX[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[not] OP[assign] PARENTHESESEND
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[not] OP[assign] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[INT]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.Class,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.ref.SoftReference,get,0,T] +++$+++  NULL PARENTHESESEND VAR[org.codehaus.groovy.reflection.ClassInfo.LocalMap] OP[assign]
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StackTraceElement,getClassName,0,java.lang.String] +++$+++  CURLYSTART LEX[p.println] PARENTHESESSTART OP[sum]
CALL[java.lang.Class,isArray,0,boolean] +++$+++  OP[sum] EOL IF PARENTHESESSTART
CALL[java.lang.Class,isArray,0,boolean] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.io.ObjectOutputStream,defaultWriteObject,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Double.class] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Number,toString,0,java.lang.String] +++$+++  OP[ternaryFalse] NEW TYPE[BigInteger] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND RETURN EOL RETURN
CALL[java.util.ListIterator,remove,0,void] +++$+++  LEX[remove] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.io.PushbackReader,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.util.Collection,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART CONTINUE EOL CURLYEND
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[ClassUtil.withoutPackageName] PARENTHESESSTART
CALL[java.net.URI,isAbsolute,0,boolean] +++$+++  LEX[dburi.isOpaque] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Properties,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.zip.ZipEntry,getName,0,java.lang.String] +++$+++  LEX[filenameFilter.accept] PARENTHESESSTART NULL COMMA
CALL[javax.swing.DefaultListModel,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[ElementWrapper] PARENTHESESEND
CALL[javax.swing.undo.UndoManager,undo,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL VAR[INT] OP[sum] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  INT VAR[INT] OP[assign] OP[sum]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[project.log] PARENTHESESSTART
CALL[java.lang.RuntimeException,getMessage,0,java.lang.String] +++$+++  PARENTHESESSTART NEW LEX[Report.ProcessingError] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[INT]] +++$+++  LEX[violation] COMMA LEX[true] COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sourceforge.pmd.Report.ProcessingError]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.concurrent.atomic.AtomicInteger,incrementAndGet,0,int] +++$+++  VAR[java.lang.Thread] OP[assign] LEX[PmdRunnable.createThread] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART VAR[java.lang.String] OP[assign] OP[sum]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,print,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[writer.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] COMMA
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.ByteArrayOutputStream,toString,1,java.lang.String] PARA[LIT[Stirng]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN LEX[StringUtils.defaultString] PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicInteger,get,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.ProgressMonitor,isCanceled,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JTextArea,append,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  CURLYSTART RETURN LEX[Collections.unmodifiableSet] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  LEX[sb.append] PARENTHESESSTART LEX[characterNames.get] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.io.InputStream,read,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  INSTANCEOF TYPE[String] PARENTHESESEND CURLYSTART
CALL[java.io.BufferedInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  PARENTHESESEND EOL VAR[java.io.File] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Thread]] +++$+++  VAR[java.lang.Thread] PARENTHESESEND CONTINUE EOL
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Character]] +++$+++  LEX[false] EOL ELSE CURLYSTART
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] NULL PARENTHESESEND
CALL[java.io.PrintWriter,println,0,void] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.io.PrintWriter,append,1,java.io.PrintWriter] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.Integer]] +++$+++  PARENTHESESSTART VAR[java.lang.Integer] PARENTHESESEND EOL
CALL[java.util.TreeSet,tailSet,1,java.util.SortedSet<E>] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] ARRAYEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[ternaryFalse] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  COMMA VAR[java.io.PrintWriter] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[CALL[net.sf.hale.rules.Faction,getName]] +++$+++  CURLYSTART TYPE[Relationship] VAR[net.sf.hale.rules.Faction.Relationship] OP[assign]
CALL[java.util.Map,put,2,V] PARA[CALL[net.sf.hale.rules.Faction,getName]] PARA[VAR[net.sf.hale.rules.Faction.Relationship]] +++$+++  LEX[Relationship] VAR[net.sf.hale.rules.Faction.Relationship] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[JournalConfig] VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.lang.StringBuilder,length,0,int] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,regionMatches,5,boolean] PARA[LIT[Boolean]] PARA[LIT[Integer]] PARA[VAR[java.lang.String]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  LEX[false] EOL CURLYEND RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Map,get,1,V] PARA[VAR[java.net.URI]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.Iterator,next]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] NULL OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] NULL OP[ternaryFalse]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Stack,pop,0,E] +++$+++  CURLYSTART TYPE[Segment] VAR[com.frostwire.jpeg.JFIFOutputStream.Segment] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Set,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND CURLYEND ELSE
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,getItemListeners,0,java.awt.event.ItemListener[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.awt.event.ItemListener] OP[assign]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  EOL CURLYEND VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND OP[sum] PARENTHESESEND EOL
CALL[javax.swing.JButton,setBorderPainted,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[false] EOL CURLYEND RETURN
CALL[javax.swing.Icon,getIconWidth,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[javax.swing.JTable,setRowHeight,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] EOL
CALL[java.awt.Font,canDisplayUpTo,1,int] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.Object] EOL VAR[BOOLEAN] OP[assign]
CALL[javax.swing.plaf.synth.SynthContext,getComponentState,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.plaf.synth.SynthContext,getComponentState,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[not] OP[assign]
CALL[javax.swing.JSlider,repaint,0,void] +++$+++  VAR[BOOLEAN] OP[assign] VAR[BOOLEAN] EOL
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,reset,0,void] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.Path2D,reset,0,void] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[DOUBLE]] PARA[VAR[INT]] +++$+++  OP[sum] LEX[wHalf-5] COMMA VAR[INT]
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  COMMA VAR[FLOAT] PARENTHESESEND EOL
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  LEX[lineMeasurer.getPosition] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[javax.swing.text.JTextComponent,repaint,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.text.JTextComponent,getClientProperty,1,java.lang.Object] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Color] PARENTHESESEND
CALL[java.awt.Rectangle,getCenterY,0,double] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[javax.swing.JTextField,removePropertyChangeListener,2,void] PARA[LIT[Stirng]] PARA[THIS[null]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,getBorder,0,javax.swing.border.Border] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.plaf.TextUI,getMaximumSize,1,java.awt.Dimension] PARA[VAR[javax.swing.JComponent]] +++$+++  VAR[javax.swing.JComponent] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.TextUI,viewToModel,2,int] PARA[VAR[javax.swing.text.JTextComponent]] PARA[VAR[java.awt.Point]] +++$+++  VAR[java.awt.Point] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextField,add,2,void] PARA[VAR[java.awt.Component]] PARA[CALL[com.frostwire.gui.searchfield.BuddySupport.Position,toString]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  PARENTHESESSTART NEW TYPE[FileWriter] PARENTHESESSTART
CALL[java.io.File,isFile,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,toURI,0,java.net.URI] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.io.PrintWriter,println,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Set,clear,0,void] +++$+++  OP[greaterThan] VAR[java.util.Set] PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,setBorderPainted,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.datatransfer.DataFlavor,equals,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  TRY CURLYSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.LookAndFeel,getDefaults,0,javax.swing.UIDefaults] +++$+++  EOL TYPE[UIDefaults] VAR[javax.swing.UIDefaults] OP[assign]
CALL[com.limegroup.gnutella.gui.AWTSplashWindow,wait,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[OptionsTreeNode] PARENTHESESEND
CALL[java.lang.Class,getFields,0,java.lang.reflect.Field[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.reflect.Field] OP[assign]
CALL[java.lang.reflect.Field,getModifiers,0,int] +++$+++  CURLYSTART IF PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  NULL PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JButton,setPreferredSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[com.limegroup.gnutella.gui.iTunesMediator.splitArray(T[], int).T]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setIcon,1,void] PARA[CALL[null,getIcon]] +++$+++  TYPE[JLabel] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  TYPE[JButton] PARENTHESESSTART PARENTHESESEND EOL
CALL[com.limegroup.gnutella.gui.init.SetupManager.FinishAction,isEnabled,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,addAll,1,boolean] PARA[CALL[null,asList]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.datatransfer.Transferable,getTransferData,1,java.lang.Object] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND PARENTHESESEND RETURN
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  OP[not] VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.Icon,getIconHeight,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[javax.swing.Icon,paintIcon,4,void] PARA[VAR[java.awt.Component]] PARA[VAR[java.awt.Graphics]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[assign] VAR[INT] EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA LEX[media] PARENTHESESEND EOL
CALL[javax.swing.JToggleButton,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[java.awt.event.ActionEvent,getSource,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[Component] PARENTHESESEND
CALL[javax.swing.InputMap,put,2,void] PARA[VAR[javax.swing.KeyStroke]] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART VAR[javax.swing.KeyStroke] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.DefaultListModel,remove,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.border.TitledBorder,setTitle,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[javax.swing.tree.TreeModel,getIndexOfChild,2,int] PARA[VAR[java.lang.Object]] PARA[VAR[java.lang.Object]] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.tree.TreeModel,getChildCount,1,int] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] COMMA VAR[INT] OP[assign]
CALL[javax.swing.tree.TreeModel,getRoot,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.JProgressBar,setString,1,void] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL ELSE
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[javax.swing.border.Border]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JComponent,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.Color,getGreen,0,int] +++$+++  OP[assign] LEX[x03] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.table.JTableHeader,getDefaultRenderer,0,javax.swing.table.TableCellRenderer] +++$+++  CURLYSTART TYPE[TableCellRenderer] VAR[javax.swing.table.TableCellRenderer] OP[assign]
CALL[javax.swing.table.TableCellRenderer,getTableCellRendererComponent,6,java.awt.Component] PARA[VAR[javax.swing.JTable]] PARA[VAR[java.lang.Object]] PARA[VAR[BOOLEAN]] PARA[VAR[BOOLEAN]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL TYPE[Component] VAR[java.awt.Component] OP[assign]
CALL[javax.swing.table.JTableHeader,getFont,0,java.awt.Font] +++$+++  VAR[java.awt.Component] EOL LEX[renderer.setFont] PARENTHESESSTART
CALL[javax.swing.JTable,setAutoResizeMode,1,void] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND EOL ELSE
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND COMMA
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.TreeSet,add,1,boolean] PARA[VAR[INT]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND EOL
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  LEX[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[org.gudy.azureus2.core3.util.CopyOnWriteList.T]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.List,contains,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.CopyOnWriteList.T]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.List,toArray,1,T[]] PARA[VAR[org.gudy.azureus2.core3.util.CopyOnWriteList.T]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Stack,pop,0,E] +++$+++  OP[assign] THIS PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  VAR[INT] EOL VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] OP[not] LEX[Character.isDigit] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[lessThan] OP[assign]
CALL[java.lang.ProcessBuilder,start,0,java.lang.Process] +++$+++  EOL TYPE[Process] VAR[java.lang.Process] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,toString]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.nio.charset.CoderResult,isError,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,mkdirs,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.File,list,0,java.lang.String[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[File] ARRAYSTART
CALL[java.lang.Process,getInputStream,0,java.io.InputStream] +++$+++  OP[assign] NEW TYPE[BufferedInputStream] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[CALL[java.lang.String,length]] +++$+++  EOL CURLYEND LEX[buf.append] PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.Iterator,next]] +++$+++  LEX[collection.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.Properties,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[str.substring] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.ref.Reference,clear,0,void] +++$+++  OP[greaterThan] VAR[java.lang.ref.Reference] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,trimToSize,0,void] +++$+++  LEX[jscode.setLength] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[null,encode]] +++$+++  ELSE CURLYSTART TRY CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  RETURN NEW TYPE[String] PARENTHESESSTART
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[VAR[BYTE]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.nio.ByteBuffer,getInt,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,get,1,java.nio.ByteBuffer] PARA[VAR[BYTE]] +++$+++  COMMA VAR[java.nio.ByteBuffer] PARENTHESESEND EOL
CALL[java.nio.channels.ReadableByteChannel,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  LEX[cs.subSequence] PARENTHESESSTART VAR[INT] COMMA
CALL[SHORT,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[BYTE,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.lang.Integer,intValue,0,int] +++$+++  NULL OP[ternaryTrue] VAR[INT] OP[ternaryFalse]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  NULL OP[ternaryTrue] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[assign] VAR[INT] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.CharSequence,length,0,int] +++$+++  COMMA VAR[java.lang.CharSequence] COMMA COMMA
CALL[java.lang.CharSequence,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  LEX[str.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.CharSequence,length,0,int] +++$+++  COMMA VAR[java.lang.CharSequence] COMMA COMMA
CALL[java.lang.CharSequence,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[java.lang.CharSequence] COMMA VAR[java.lang.CharSequence] COMMA
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.String,substring]] +++$+++  OP[bitwiseOr] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  EOL CURLYEND WHILE PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  EOL CURLYEND WHILE PARENTHESESSTART
CALL[java.lang.String,toLowerCase,1,java.lang.String] PARA[VAR[java.util.Locale]] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] LEX[false] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isLetterOrDigit] PARENTHESESSTART
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] LEX[false] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.CharSequence,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.CharSequence,length,0,int] +++$+++  OP[bitwiseOr] OP[bitwiseOr] VAR[INT] OP[lessThan]
CALL[java.lang.CharSequence,length,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[INT] OP[sum] VAR[INT] COMMA
CALL[java.lang.CharSequence,length,0,int] +++$+++  COMMA VAR[java.lang.CharSequence] COMMA COMMA
CALL[java.lang.CharSequence,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,3,java.lang.StringBuilder] PARA[VAR[CHAR]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.net.URI,toURL,0,java.net.URL] +++$+++  CURLYSTART RETURN LEX[IOUtils.toByteArray] PARENTHESESSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.lang.String,compareToIgnoreCase,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.BitSet,set,2,void] PARA[VAR[INT]] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.io.File,getPath]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  VAR[java.io.File] PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.Object]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[sum] OP[sum] OP[lessThan] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Class]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Coercion] PARENTHESESEND
CALL[java.lang.Class,getComponentType,0,java.lang.Class<? extends java.lang.Object>] +++$+++  OP[assign] NEW TYPE[ArrayCoercion] PARENTHESESSTART
CALL[java.io.DataOutputStream,write,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  LEX[IOException] CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[null,toString]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipFile,getInputStream,1,java.io.InputStream] PARA[VAR[java.util.zip.ZipEntry]] +++$+++  CURLYEND TYPE[InputStream] VAR[java.io.InputStream] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,remove,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.io.DataInputStream,read,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.DataOutputStream,close,0,void] +++$+++  LEX[din.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  EOL CASE VAR[INT] OP[ternaryFalse]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[javax.swing.JProgressBar,setMinimum,1,void] PARA[LIT[Integer]] +++$+++  LEX[progressBar.setValue] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[TaskListener] PARENTHESESEND
CALL[javax.swing.JTextArea,setLineWrap,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.io.PrintStream,close,0,void] +++$+++  COMMA LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[FoodDataSource] PARENTHESESEND
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JLabel,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART LEX[Color.WHITE] PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  OP[greaterThan] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,removeAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  LEX[List] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,add,1,boolean] PARA[VAR[ca.spaz.cron.metrics.Biomarker]] +++$+++  LEX[biomarker.setMin] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[ca.spaz.cron.metrics.Biomarker]] +++$+++  LEX[biomarker.setMin] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[ca.spaz.cron.metrics.Biomarker]] +++$+++  LEX[biomarker.setMin] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Color,getRed,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  LONG VAR[LONG] OP[assign] PARENTHESESSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.JFrame,getWidth,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[sum] COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[sum] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[javax.swing.text.Document,getLength,0,int] +++$+++  EOL LEX[doc.remove] PARENTHESESSTART COMMA
CALL[java.awt.Rectangle,union,1,java.awt.Rectangle] PARA[VAR[java.awt.Rectangle]] +++$+++  NULL PARENTHESESEND VAR[java.awt.Rectangle] OP[assign]
CALL[java.util.Vector,remove,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.awt.event.MouseEvent,getClickCount,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.net.Socket,setSoTimeout,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESEND COMMA PARENTHESESEND EOL
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[LONG]] +++$+++  LONG VAR[LONG] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  BYTE ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[sum] OP[assign] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  EOL CURLYEND VAR[BOOLEAN] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Long] VAR[java.lang.Long] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW LEX[serviceMapping] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[CALL[java.lang.String,getBytes]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  CURLYSTART LEX[details.put] PARENTHESESSTART COMMA
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[CALL[java.lang.String,getBytes]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.util.Map]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,skip,1,long] PARA[VAR[LONG]] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.util.IdentityHashMap,containsKey,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,size,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[bitwiseOr] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.atomic.AtomicInteger,set,1,void] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.ArrayList,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.Throwable,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[SpeedManagerLogger.log] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  NEW TYPE[PlatformMessage] PARENTHESESSTART COMMA
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.net.ServerSocket,close,0,void] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.List,remove,1,boolean] PARA[THIS[null]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  EOL BYTE VAR[BYTE] OP[assign]
CALL[java.nio.ByteBuffer,position,1,java.nio.Buffer] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[ByteBuffer.allocate] PARENTHESESSTART OP[sum]
CALL[java.net.InetSocketAddress,getAddress,0,java.net.InetAddress] +++$+++  EOL TYPE[InetAddress] VAR[java.net.InetAddress] OP[assign]
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[CALL[java.lang.String,getBytes]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  TYPE[Object] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Random,nextInt,1,int] PARA[LIT[Integer]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,position,1,java.nio.Buffer] PARA[VAR[SHORT]] +++$+++  LEX[hasher.getDigest] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[String] PARENTHESESEND LEX[mainline_style_code_map.get] PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[CALL[java.lang.String,substring]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[ClientData] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.Boolean,booleanValue,0,boolean] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.lang.Long,intValue,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[TableColumnCore] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Class]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  NULL OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  LEX[str.substring] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[BYTE] OP[assign] VAR[BYTE] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.io.OutputStreamWriter,close,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.azureus2.ui.swt.TorrentMenuFancy.HeaderInfo]] +++$+++  COMMA LEX[headerListener] PARENTHESESEND EOL
CALL[java.lang.reflect.Method,setAccessible,1,void] PARA[LIT[Boolean]] +++$+++  COMMA VAR[java.lang.Class] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL LEX[text.setSelection] PARENTHESESSTART
CALL[java.lang.Class,getField,1,java.lang.reflect.Field] PARA[LIT[Stirng]] +++$+++  EOL TYPE[Field] VAR[java.lang.reflect.Field] OP[assign]
CALL[java.lang.reflect.Field,getInt,1,int] PARA[VAR[java.lang.Object]] +++$+++  NULL COMMA LEX[SWT.ICON] COMMA
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Stack,isEmpty,0,boolean] +++$+++  PARENTHESESSTART LEX[false] OP[assign] OP[assign]
CALL[java.util.Stack,size,0,int] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Shell] PARENTHESESEND
CALL[java.io.File,getName,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[ZipEntry] PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicBoolean,get,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[Constants.AZUREUS_VERSION] OP[sum] PARENTHESESEND EOL
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  LEX[os.println] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,add,1,boolean] PARA[CALL[java.lang.StringBuffer,toString]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  VAR[java.io.InputStream] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  LEX[file.getParent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.io.File,getParent,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.util.Set,add,1,boolean] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART CONTINUE EOL CURLYEND
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.Map,get,1,V] PARA[FIELD[TorrentUtils]] +++$+++  BYTE ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.concurrent.atomic.AtomicLong,get,0,long] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.LinkedList,removeLast,0,E] +++$+++  OP[assign] PARENTHESESSTART LEX[threadWrapper] PARENTHESESEND
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,setPriority,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,setName,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,position,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,limit,1,java.nio.Buffer] PARA[LIT[Integer]] +++$+++  LEX[saveBuffer.flip] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,position,1,java.nio.Buffer] PARA[VAR[INT]] +++$+++  LEX[finalBuffer.limit] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[VAR[java.nio.ByteBuffer]] +++$+++  LEX[finalBuffer.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Random,nextBytes,1,void] PARA[VAR[BYTE]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Random,nextInt,0,int] +++$+++  CURLYSTART RETURN PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[CHAR] OP[not] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.List]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.Socket,getInputStream,0,java.io.InputStream] +++$+++  CURLYSTART TYPE[InputStream] VAR[java.io.InputStream] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND OP[sum]
CALL[java.net.URL,toExternalForm,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[UrlUtils.parseTextForMagnets] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.List] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.net.URL,getProtocol,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[result.append] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  THIS PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.ThreadLocal,set,1,void] PARA[VAR[org.gudy.azureus2.core3.util.ThreadPool.threadPoolWorker]] +++$+++  OP[assign] OP[assign] VAR[org.gudy.azureus2.core3.util.ThreadPool.threadPoolWorker] PARENTHESESEND
CALL[java.util.concurrent.ConcurrentHashMap,remove,1,V] PARA[VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.S]] +++$+++  CURLYEND TYPE[T] VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.T] OP[assign]
CALL[java.util.WeakHashMap,put,2,V] PARA[VAR[java.lang.Thread]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.util.WeakHashMap] PARENTHESESEND CURLYSTART
CALL[java.io.File,getCanonicalFile,0,java.io.File] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.io.File,length,0,long] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[new_root.substring] PARENTHESESSTART COMMA
CALL[java.util.regex.Matcher,group,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.File,length,0,long] +++$+++  PARENTHESESEND CURLYSTART LEX[fis.skip] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART BREAK EOL CURLYEND
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.util.Stack,pop,0,E] +++$+++  OP[assign] THIS PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.Locale,equals,1,boolean] PARA[VAR[java.util.Locale]] +++$+++  PARENTHESESSTART VAR[java.util.Locale] PARENTHESESEND OP[ternaryFalse]
CALL[java.util.Map,size,0,int] +++$+++  OP[ternaryTrue] OP[ternaryFalse] LEX[String.valueOf] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.InetAddress,getAddress,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.lang.Thread,stop,0,void] +++$+++  EOL CURLYEND TRY CURLYSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[Plugin] PARENTHESESEND
CALL[java.math.BigInteger,shiftLeft,1,java.math.BigInteger] PARA[VAR[INT]] +++$+++  CURLYSTART RETURN LEX[bigInt.compareTo] PARENTHESESSTART
CALL[java.math.BigInteger,toByteArray,0,byte[]] +++$+++  RETURN NEW TYPE[SecretKeySpec] PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  THROW NEW TYPE[CRLException] PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  LEX[c] PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] PARENTHESESSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.math.BigInteger,compareTo,1,int] PARA[CALL[null,valueOf]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Vector,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  PARENTHESESEND CURLYSTART LEX[l.add] PARENTHESESSTART
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND LEX[versionParts.add] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.awt.Window,dispose,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[controller.setAspectRatio] PARENTHESESSTART
CALL[javax.swing.JComponent,getHeight,0,int] +++$+++  LEX[float] PARENTHESESEND LEX[view3D.getWidth] PARENTHESESSTART
CALL[java.util.ResourceBundle,getString,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  COMMA VAR[FLOAT] PARENTHESESEND EOL
CALL[java.awt.geom.PathIterator,isDone,0,boolean] +++$+++  NULL PARENTHESESEND EOL OP[not]
CALL[java.lang.String,clone,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.net.URLConnection,setRequestProperty,2,void] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  LEX[homeUrl.openConnection] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.DataInputStream,readInt,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  LEX[map.put] PARENTHESESSTART VAR[java.lang.Object] COMMA
CALL[java.util.Hashtable,remove,1,V] PARA[CALL[java.util.Enumeration,nextElement]] +++$+++  PARENTHESESEND EOL PARENTHESESEND CURLYSTART
CALL[java.util.Vector,size,0,int] +++$+++  OP[sub] COMMA VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[javax.swing.JButton,setName,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JButton,addActionListener,1,void] PARA[VAR[net.sf.latexdraw.installer.Installer.InstallerListener]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[net.sf.latexdraw.installer.Installer.InstallerListener] PARENTHESESEND EOL
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Deque,isEmpty,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Rectangle,intersects,1,boolean] PARA[VAR[java.awt.geom.Rectangle2D]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND COMMA LEX[Integer.valueOf] PARENTHESESSTART
CALL[javax.swing.JEditorPane,setDragEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.nio.file.Path,toString,0,java.lang.String] +++$+++  LEX[Files.readAllBytes] PARENTHESESSTART LEX[Paths.get] PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[sum] OP[sum] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] COMMA VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isLetterOrDigit] PARENTHESESSTART
CALL[java.lang.Throwable,printStackTrace,1,void] PARA[VAR[java.io.PrintWriter]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[lessThan]
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.event.FocusListener,focusLost,1,void] PARA[VAR[java.awt.event.FocusEvent]] +++$+++  OP[assign] VAR[java.awt.event.FocusListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.AbstractButton,setSelected,1,void] PARA[VAR[BOOLEAN]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[AbstractButton] VAR[javax.swing.AbstractButton] OP[assign]
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[clearText] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[sum] OP[sum]
CALL[java.awt.event.MouseEvent,getModifiers,0,int] +++$+++  OP[bitwiseAnd] OP[assign] OP[assign] PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[javax.swing.JInternalFrame,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[javax.swing.JInternalFrame,isIcon,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.awt.Component,setLocation,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[assign] FIELD[y,java.awt.Rectangle] EOL CURLYEND
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[ActionEvent] LEX[actionEvent] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART VAR[java.awt.event.ActionListener] PARENTHESESEND EOL
CALL[javax.swing.JButton,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.border.Border,getBorderInsets,1,java.awt.Insets] PARA[VAR[java.awt.Component]] +++$+++  VAR[java.awt.Component] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.AWTEvent,getID,0,int] +++$+++  NULL EOL SWITCH PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND LEX[_textComponent.setText] PARENTHESESSTART
CALL[java.lang.Integer,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,setLength,1,void] PARA[VAR[INT]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] EOL VAR[java.lang.String] OP[assign]
CALL[java.awt.print.PrinterJob,printDialog,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.RepaintManager,setDoubleBufferingEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.awt.Component] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JCheckBox,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JList,getSelectedIndex,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[IllegalArgumentException] CURLYSTART LEX[config.setHeaderEndTag] PARENTHESESSTART
CALL[javax.swing.JPasswordField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  OP[sum] OP[sum] FIELD[gridx,java.awt.GridBagConstraints] EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  OP[sum] OP[sum] FIELD[gridy,java.awt.GridBagConstraints] EOL
CALL[javax.swing.JTabbedPane,getTabPlacement,0,int] +++$+++  OP[assign] LEX[JTabbedPane.TOP] OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JTabbedPane,getTabCount,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  LEX[evt.getComponent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.event.EventListenerList,getListenerList,0,java.lang.Object[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[java.util.Vector,add,1,boolean] PARA[VAR[net.sourceforge.squirrel_sql.client.gui.LogPanel.LogData]] +++$+++  PARENTHESESSTART VAR[java.util.Vector] PARENTHESESEND CURLYSTART
CALL[javax.swing.Timer,restart,0,void] +++$+++  VAR[net.sourceforge.squirrel_sql.client.gui.LogPanel.LogData] PARENTHESESEND EOL CURLYEND
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESEND CURLYSTART LEX[fileArray.remove] PARENTHESESSTART
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.Action]] +++$+++  CASE LEX[IMenuIDs.SESSION_MENU] OP[ternaryFalse] CURLYSTART
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART LEX[false] OP[assign] OP[assign]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[javax.swing.JSpinner,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[sqlTextArea.setEnabled] PARENTHESESSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  VAR[java.lang.Boolean] OP[assign] LEX[Boolean.valueOf] PARENTHESESSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[sdp.setValue] PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JPanel,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.Integer,intValue,0,int] +++$+++  OP[bitwiseAnd] LEX[SQLAliasSchemaDetailProperties.SCHEMA_LOADING_ID_LOAD_AND_CACHE] OP[assign] OP[assign]
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[javax.swing.JPanel,getComponents,0,java.awt.Component[]] +++$+++  PARENTHESESSTART TYPE[Component] VAR[java.awt.Component] OP[ternaryFalse]
CALL[javax.swing.JCheckBoxMenuItem,isSelected,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JInternalFrame,moveToFront,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JTree,getModel,0,javax.swing.tree.TreeModel] +++$+++  OP[assign] PARENTHESESSTART TYPE[DefaultTreeModel] PARENTHESESEND
CALL[javax.swing.JTabbedPane,getSelectedIndex,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.HashMap]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setSelectionStart,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.SortedSet,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL ELSE
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.ListModel,getElementAt,1,E] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[javax.swing.JList,setListData,1,void] PARA[CALL[java.util.HashSet,toArray]] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JCheckBox]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.HashMap]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,clear,0,void] +++$+++  ARRAYEND VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,addAll,1,boolean] PARA[CALL[null,asList]] +++$+++  LEX[_schemas.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  TYPE[JTextField] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[stop] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.MutableComboBoxModel,removeElement,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTabbedPane,getSelectedIndex,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getComponent,0,java.awt.Component] +++$+++  PARENTHESESEND CURLYSTART LEX[_popUp.show] PARENTHESESSTART
CALL[javax.swing.JComboBox,getItemCount,0,int] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[lessThan]
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,get,1,E] PARA[CALL[java.util.ArrayList,get]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  LEX[ret.add] PARENTHESESSTART LEX[_rows.get] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[java.lang.String] OP[assign] VAR[java.lang.String] OP[sum]
CALL[java.net.DatagramSocket,close,0,void] +++$+++  LEX[close] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  VAR[java.lang.Object] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  OP[bitwiseAnd] OP[not] LEX[name.equals] PARENTHESESSTART
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  TRY CURLYSTART IF PARENTHESESSTART
CALL[java.util.prefs.Preferences,putBoolean,2,void] PARA[LIT[Stirng]] PARA[VAR[BOOLEAN]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[preferences.get] PARENTHESESSTART
CALL[java.util.prefs.Preferences,putInt,2,void] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.util.StringTokenizer,nextToken,1,java.lang.String] PARA[LIT[Stirng]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,1,java.lang.String] PARA[LIT[Stirng]] +++$+++  LEX[tokenizer.nextToken] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] OP[assign] LEX[valReturn.concat] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  OP[lessThan] OP[ternaryTrue] VAR[INT] OP[sum]
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.lang.Runnable]] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[PostFinalizationProcessor.defaultInstance] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  CHAR VAR[CHAR] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Class]] +++$+++  CURLYEND TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.Properties,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.nio.charset.Charset,encode,1,java.nio.ByteBuffer] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[ByteBuffer] VAR[java.nio.ByteBuffer] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[BOOLEAN] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,appendCodePoint,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,appendCodePoint,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,codePointCount,2,int] PARA[LIT[Integer]] PARA[CALL[java.lang.String,length]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.util.Map.Entry]] +++$+++  VAR[java.lang.Object] PARENTHESESEND EOL RETURN
CALL[java.lang.Object,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  EOL CURLYEND WHILE PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[assign] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.util.List,size,0,int] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.util.Set,add,1,boolean] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.logging.Logger,isLoggable,1,boolean] PARA[VAR[java.util.logging.Level]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.jar.JarFile,getInputStream,1,java.io.InputStream] PARA[VAR[java.util.jar.JarEntry]] +++$+++  PARENTHESESSTART NEW TYPE[InputStreamReader] PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Reader,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.CharBuffer,get,0,char] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.nio.CharBuffer,remaining,0,int] +++$+++  LEX[out.remaining] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.text.JTextComponent]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.AbstractButton]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[javax.swing.AbstractButton,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,getSelectedRowCount,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.ArrayList,clone,0,java.lang.Object] +++$+++  OP[lessThan] TYPE[String] OP[greaterThan] PARENTHESESEND
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenu]] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenuItem] PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,showOpenDialog,1,int] PARA[THIS[null]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  CURLYSTART LEX[logger.warn] PARENTHESESSTART OP[sum]
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setAddLineNumbers] PARENTHESESSTART LEX[Boolean.parseBoolean] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.pandoragames.far.ui.model.FileType]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART OP[not] VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[ternaryFalse] OP[sub]
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[org.geoserver.web.data.layer.Resource]] +++$+++  PARENTHESESEND RETURN EOL RETURN
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.awt.Graphics2D,getFontMetrics,0,java.awt.FontMetrics] +++$+++  EOL TYPE[FontMetrics] VAR[java.awt.FontMetrics] OP[assign]
CALL[java.awt.FontMetrics,getAscent,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Map,get,1,V] PARA[CALL[java.lang.String,toLowerCase]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL PARENTHESESEND OP[ternaryTrue]
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[File] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  LEX[val] OP[assign] LEX[ff.literal] PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  LEX[val] OP[assign] LEX[ff.literal] PARENTHESESSTART
CALL[java.io.OutputStream,close,0,void] +++$+++  LEX[out.flush] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  OP[sum] VAR[java.lang.Object] OP[sum] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[layerSubName.substring] PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,add,1,boolean] PARA[FIELD[EoLayerType]] +++$+++  PARENTHESESSTART LEX[EoLayerType.BROWSE_IMAGE] PARENTHESESEND EOL
CALL[java.util.Properties,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.geoserver.wms.MapProducerCapabilities]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[WMS.SVG_SIMPLE] EOL CURLYEND RETURN
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  OP[assign] NEW TYPE[BufferedImage] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  OP[assign] PARENTHESESSTART TYPE[Graphics2D] PARENTHESESEND
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[greaterThan] PARENTHESESEND
CALL[java.util.zip.ZipEntry,getName,0,java.lang.String] +++$+++  TYPE[File] PARENTHESESSTART VAR[java.io.File] COMMA
CALL[java.io.File,getCanonicalPath,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[File] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.geoserver.platform.Operation]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESEND CURLYSTART LEX[cit.add] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,mark,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.InputStream,reset,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.reflect.Method,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] EOL CURLYEND RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[result.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[DOUBLE] OP[assign] LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.util.concurrent.ScheduledExecutorService,shutdown,0,void] +++$+++  LEX[stop] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.ScheduledExecutorService,shutdown,0,void] +++$+++  LEX[shutdown] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Double]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.concurrent.ExecutorService,shutdownNow,0,java.util.List<java.lang.Runnable>] +++$+++  LEX[cleaner.shutdownNow] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Long,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND EOL RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[ternaryFalse] VAR[java.util.Set] PARENTHESESEND CURLYSTART
CALL[java.lang.Class,equals,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.net.URL,openConnection,0,java.net.URLConnection] +++$+++  CURLYSTART TYPE[URLConnection] VAR[java.net.URLConnection] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND LEX[valueList.add] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[NameSpaceTranslator] PARENTHESESEND
CALL[java.lang.StringBuffer,length,0,int] +++$+++  OP[assign] EOL LEX[indentBuffer.setLength] PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  COMMA LEX[true] PARENTHESESEND EOL
CALL[java.io.File,getParentFile,0,java.io.File] +++$+++  LEX[IOException] CURLYSTART VAR[java.io.File] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.Class,isAssignableFrom,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Properties,load,1,void] PARA[VAR[java.io.BufferedInputStream]] +++$+++  VAR[java.io.BufferedInputStream] PARENTHESESEND EOL ELSE
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  RETURN EOL ELSE RETURN
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESEND EOL LEX[leafRoles.addAll] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Class] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[DataStoreInfo] PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  INSTANCEOF LEX[GetCapabilitiesRequest.WFS20] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[it.next] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.List]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
