CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.io.InputStreamReader,close,0,void] +++$+++  LEX[lineNumberReader.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Calendar,setTime,1,void] PARA[VAR[java.util.Date]] +++$+++  TYPE[GregorianCalendar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  ELSE CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] LEX[true] EOL CURLYEND
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] OP[sum] OP[assign] EOL
CALL[java.util.Vector,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] COMMA
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Date,getTime,0,long] +++$+++  COMMA NEW TYPE[Timestamp] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,substring]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.SortedSet,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[NumericKeyValue] PARENTHESESEND
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Date,getTime,0,long] +++$+++  OP[ternaryFalse] VAR[LONG] OP[assign] PARENTHESESSTART
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.StringTokenizer,countTokens,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.JFrame,setBounds,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[ternaryFalse] PARENTHESESEND EOL
CALL[java.util.ArrayList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[grantTables.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Diagnosis] PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Encounter] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[OutcomeStat] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  INT ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[LIT[Stirng]] +++$+++  TYPE[KeyValue] ARRAYSTART ARRAYEND PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Hashtable,size,0,int] +++$+++  LEX[StatFunctions.getTop] PARENTHESESSTART VAR[java.util.Hashtable] COMMA
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[DepartmentIncome] PARENTHESESEND
CALL[java.util.Hashtable,keys,0,java.util.Enumeration<K>] +++$+++  EOL TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Hashtable,get,1,V] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Element] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.FileNotFoundException,printStackTrace,0,void] +++$+++  TYPE[FileNotFoundException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[fullyQualifiedFilename.substring] PARENTHESESSTART COMMA
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND EOL LEX[dstFile.setLastModified] PARENTHESESSTART
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.File,listFiles,0,java.io.File[]] +++$+++  LEX[result.addAll] PARENTHESESSTART LEX[Arrays.asList] PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  CURLYSTART LEX[display.delete] PARENTHESESSTART COMMA
CALL[java.lang.StringBuffer,delete,2,java.lang.StringBuffer] PARA[LIT[Integer]] PARA[CALL[java.lang.StringBuffer,length]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[DOUBLE] OP[assign] LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.lang.StringBuffer,delete,2,java.lang.StringBuffer] PARA[LIT[Integer]] PARA[CALL[java.lang.StringBuffer,length]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[com.sadinoff.genj.console.Console.Action,getDoc]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[delta.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.Rectangle2D,getCenterY,0,double] +++$+++  LEX[bounds.getCenterX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  EOL CASE TYPE[SEG_CLOSE] OP[ternaryFalse]
CALL[java.awt.geom.PathIterator,next,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.geom.Point2D] PARENTHESESEND EOL
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  LEX[gp.transform] PARENTHESESSTART LEX[AffineTransform.getTranslateInstance] PARENTHESESSTART
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  LEX[origin.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  CURLYSTART DOUBLE VAR[DOUBLE] OP[assign]
CALL[java.awt.geom.Point2D,getY,0,double] +++$+++  PARENTHESESEND OP[multiply] VAR[DOUBLE] COMMA
CALL[java.awt.geom.Point2D,getX,0,double] +++$+++  LEX[vectorB.getX] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.Class,newInstance,0,T] +++$+++  RETURN NULL EOL RETURN
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  LEX[canvas.getHeight] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[javax.swing.JTextField,selectAll,0,void] +++$+++  LEX[FocusEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JSpinner,addChangeListener,1,void] PARA[VAR[javax.swing.JSpinner.NumberEditor]] +++$+++  PARENTHESESSTART VAR[javax.swing.JSpinner.NumberEditor] PARENTHESESEND EOL
CALL[java.util.Set,clear,0,void] +++$+++  PARENTHESESSTART VAR[java.util.Collection] PARENTHESESEND EOL
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  PARENTHESESSTART VAR[java.util.Collection] PARENTHESESEND EOL
CALL[java.awt.geom.Rectangle2D,getMinY,0,double] +++$+++  CURLYSTART LEX[r.setRect] PARENTHESESSTART OP[sub]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[lessThan] OP[lessThan] OP[bitwiseOr] PARENTHESESSTART
CALL[javax.swing.JPopupMenu,add,1,java.awt.Component] PARA[VAR[java.awt.Component]] +++$+++  LEX[Component] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenuItem,setAction,1,void] PARA[VAR[javax.swing.Action]] +++$+++  LEX[JMenuItem] VAR[javax.swing.JMenuItem] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  INT PARENTHESESEND LEX[Math.ceil] PARENTHESESSTART
CALL[java.awt.Graphics2D,getClipBounds,0,java.awt.Rectangle] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.awt.geom.Rectangle2D,getWidth,0,double] +++$+++  PARENTHESESEND VAR[DOUBLE] PARENTHESESEND EOL
CALL[java.util.Stack,pop,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.table.TableModel,getColumnName,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[lessThan] PARENTHESESEND VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.io.File]] PARA[VAR[genj.util.Registry]] +++$+++  PARENTHESESSTART VAR[java.io.File] PARENTHESESEND EOL
CALL[java.util.Properties,keySet,0,java.util.Set<K>] +++$+++  OP[lessThan] TYPE[Object] OP[greaterThan] PARENTHESESSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  EOL RETURN VAR[BOOLEAN] OP[ternaryTrue]
CALL[java.io.InputStream,markSupported,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.InputStream,reset,0,void] +++$+++  TYPE[IOException] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Format] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  CURLYSTART TYPE[Set] VAR[java.util.Set] OP[assign]
CALL[javax.swing.JCheckBox,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[genj.timeline.TimelineViewSettings.Commit] PARENTHESESEND EOL
CALL[javax.swing.table.TableColumn,setWidth,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.BufferedWriter,write,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.BufferedWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[out.write] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  PARENTHESESEND OP[multiply] VAR[INT] COMMA
CALL[java.lang.StringBuffer,length,0,int] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Integer] VAR[java.lang.Integer] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  LEX[set.trim] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART LEX[token.substring] PARENTHESESSTART COMMA
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN LEX[MessageFormat.format] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  ARRAYEND PARENTHESESEND EOL CURLYEND
CALL[java.util.regex.Matcher,end,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] COMMA
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.io.FileOutputStream,close,0,void] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.io.File,getName,0,java.lang.String] +++$+++  FINAL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.prefs.Preferences,remove,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[clearPassword] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  LEX[customFields.addAll] PARENTHESESSTART LEX[Arrays.asList] PARENTHESESSTART
CALL[java.util.prefs.Preferences,put,2,void] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.awt.event.ActionEvent,getSource,0,java.lang.Object] +++$+++  CURLYSTART BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[java.awt.Component]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  LEX[Box.createVerticalStrut] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[java.awt.Component]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[java.awt.Component]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  OP[assign] VAR[java.lang.Integer] EOL CURLYEND
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  LEX[t.stop] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Font,getStyle,0,int] +++$+++  LEX[label.setFont] PARENTHESESSTART LEX[font.deriveFont] PARENTHESESSTART
CALL[javax.swing.JFileChooser,getFileFilter,0,javax.swing.filechooser.FileFilter] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPopupMenu,addSeparator,0,void] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenuItem] PARENTHESESEND EOL
CALL[javax.swing.JToolBar,add,1,javax.swing.JButton] PARA[VAR[net.sf.jabref.gui.plaintextimport.TextInputDialog.ClearAction]] +++$+++  PARENTHESESSTART VAR[javax.swing.JMenu] PARENTHESESEND EOL
CALL[javax.swing.JToolBar,setBorderPainted,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[net.sf.jabref.gui.plaintextimport.TextInputDialog.ClearAction] PARENTHESESEND EOL
CALL[java.util.Set,add,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  PARENTHESESSTART VAR[javax.swing.event.ListDataListener] PARENTHESESEND EOL
CALL[javax.swing.JList,getSelectedIndex,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JSplitPane,setDividerLocation,1,void] PARA[LIT[Double]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[net.sf.jabref.gui.EntryTypeDialog.TypeButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  FIELD[gridwidth,java.awt.GridBagConstraints] OP[assign] EOL CURLYEND
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[net.sf.jabref.gui.EntryTypeDialog.TypeButton]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[javax.swing.JButton,setFocusable,1,void] PARA[LIT[Boolean]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.datatransfer.DataFlavor,match,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JDialog,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  OP[assign] LEX[false] EOL CURLYEND
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JComboBox,getSelectedIndex,0,int] +++$+++  LEX[fieldEditor.setText] PARENTHESESSTART VAR[java.lang.String] ARRAYSTART
CALL[javax.swing.JDialog,setLocationRelativeTo,1,void] PARA[CALL[javax.swing.JDialog,getParent]] +++$+++  LEX[showDialog] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.awt.datatransfer.DataFlavor,match,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  VAR[java.awt.datatransfer.DataFlavor] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JPopupMenu,setVisible,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  COMMA PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND EOL LEX[comp.setText] PARENTHESESSTART
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.event.ListDataEvent,getIndex0,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[javax.swing.JTextArea,setLineWrap,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.concurrent.ConcurrentLinkedQueue,add,1,boolean] PARA[VAR[java.lang.Thread]] +++$+++  LEX[Thread] VAR[java.lang.Thread] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[o1.length] PARENTHESESSTART PARENTHESESEND OP[greaterThan]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  CURLYEND CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.sf.jabref.logic.net.ProxyPreferences]] +++$+++  ELSE IF PARENTHESESSTART OP[not]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[CALL[null,asList]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.net.Socket,close,0,void] +++$+++  CURLYSTART CURLYEND TRY CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.Character,charValue]] +++$+++  OP[ternaryFalse] VAR[java.util.Set] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYSTART RETURN LEX[Optional.of] PARENTHESESSTART
CALL[java.lang.String,replaceFirst,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW BOOLEAN ARRAYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[net.sf.jabref.logic.journals.Abbreviation]] +++$+++  VAR[net.sf.jabref.logic.journals.Abbreviation] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] PARENTHESESSTART LEX[toCheck.charAt] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  VAR[java.lang.String] OP[assign] LEX[result.replace] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[result.add] PARENTHESESSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] ARRAYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART RETURN LEX[Optional.ofNullable] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[BeanConnection] PARENTHESESEND
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[BeanInstance] PARENTHESESEND
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.Vector,addElement,1,void] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.Vector,addElement,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Vector,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[GridLayout] PARENTHESESSTART
CALL[javax.swing.JTable,getPreferredScrollableViewportSize,0,java.awt.Dimension] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTable,getSelectionModel,0,javax.swing.ListSelectionModel] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[removeNotesFrame] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setPreferredSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JComboBox,setPreferredSize,1,void] PARA[VAR[java.awt.Dimension]] +++$+++  PARENTHESESSTART VAR[java.awt.Dimension] PARENTHESESEND EOL
CALL[javax.swing.JFrame,dispose,0,void] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[StringBuffer] PARENTHESESEND
CALL[java.util.Hashtable,remove,1,V] PARA[CALL[javax.swing.JFrame,getTitle]] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[m_SingleText.setText] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[currentText.setText] PARENTHESESSTART
CALL[javax.swing.JPasswordField,getPassword,0,char[]] +++$+++  PARENTHESESSTART NEW TYPE[String] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,charAt]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Color,brighter,0,java.awt.Color] +++$+++  PARENTHESESEND CURLYSTART VAR[java.awt.Color] OP[assign]
CALL[java.awt.Color,getGreen,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.event.MouseEvent,getY,0,int] +++$+++  LEX[e.getX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Random,nextDouble,0,double] +++$+++  EOL RETURN VAR[DOUBLE] OP[sum]
CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.io.StreamTokenizer,eolIsSignificant,1,void] PARA[LIT[Boolean]] +++$+++  LEX[m_st.resetSyntax] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,slashStarComments,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,ordinaryChar,1,void] PARA[LIT[Character]] +++$+++  LEX[m_st.ordinaryChar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,ordinaryChar,1,void] PARA[LIT[Character]] +++$+++  LEX[m_st.ordinaryChar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.StreamTokenizer,quoteChar,1,void] PARA[LIT[Character]] +++$+++  LEX[m_st.ordinaryChar] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Vector,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL CURLYEND LEX[writer.println] PARENTHESESSTART
CALL[java.io.PrintWriter,println,1,void] PARA[CALL[java.lang.String,substring]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[MemberSpecification] PARENTHESESEND
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[lessThan] OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[ClassPathEntry] PARENTHESESEND
CALL[javax.swing.DefaultListModel,size,0,int] +++$+++  PARENTHESESEND EOL LEX[list.setSelectedIndex] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JRadioButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,getFont,0,java.awt.Font] +++$+++  NULL OP[ternaryTrue] VAR[java.awt.Font] OP[ternaryFalse]
CALL[java.awt.Graphics2D,create,4,java.awt.Graphics] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[Graphics2D] PARENTHESESEND
CALL[java.awt.Graphics2D,drawImage,7,boolean] PARA[VAR[java.awt.Image]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[java.awt.Color]] PARA[VAR[java.awt.image.ImageObserver]] +++$+++  VAR[java.awt.image.ImageObserver] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,drawImage,6,boolean] PARA[VAR[java.awt.Image]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[java.awt.image.ImageObserver]] +++$+++  VAR[java.awt.image.ImageObserver] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,drawOval,4,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,drawRenderedImage,2,void] PARA[VAR[java.awt.image.RenderedImage]] PARA[VAR[java.awt.geom.AffineTransform]] +++$+++  LEX[AffineTransform] VAR[java.awt.geom.AffineTransform] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,fillRoundRect,6,void] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,getTransform,0,java.awt.geom.AffineTransform] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics2D,scale,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,setRenderingHint,2,void] PARA[VAR[java.awt.RenderingHints.Key]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JRadioButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA VAR[java.awt.GridBagConstraints] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[JComponent] PARENTHESESEND
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.io.IOException,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[RuntimeException] PARENTHESESSTART
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  LEX[remove] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getPoint,0,java.awt.Point] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] LEX[myTable.rowAtPoint] PARENTHESESSTART
CALL[javax.swing.text.JTextComponent,removeFocusListener,1,void] PARA[VAR[java.awt.event.FocusListener]] +++$+++  LEX[DocumentEvent] LEX[arg0] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,getChoosableFileFilters,0,javax.swing.filechooser.FileFilter[]] +++$+++  ARRAYSTART ARRAYEND VAR[javax.swing.filechooser.FileFilter] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sourceforge.ganttproject.gui.AbstractTableAndActionsComponent.SelectionListener]] +++$+++  OP[greaterThan] VAR[net.sourceforge.ganttproject.gui.AbstractTableAndActionsComponent.SelectionListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextArea,setLineWrap,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.AutoCloseable,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[javax.swing.JLabel,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART LEX[SwingConstants.TOP] PARENTHESESEND EOL
CALL[javax.swing.JColorChooser,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESSTART VAR[javax.swing.border.Border] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JComponent]] +++$+++  PARENTHESESSTART VAR[javax.swing.JComponent] PARENTHESESEND EOL
CALL[javax.swing.Box,add,1,java.awt.Component] PARA[VAR[javax.swing.JPanel]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.Box,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JEditorPane,addHyperlinkListener,1,void] PARA[VAR[javax.swing.event.HyperlinkListener]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JPanel]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[javax.swing.JList,setSelectedIndex,1,void] PARA[LIT[Integer]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  COMMA LEX[BorderLayout.NORTH] PARENTHESESEND EOL
CALL[net.sourceforge.ganttproject.print.PrintPreview.PreviewContainer,add,1,java.awt.Component] PARA[VAR[net.sourceforge.ganttproject.print.PrintPreview.PagePreview]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[javax.swing.TransferHandler.TransferSupport,isDrop,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[greaterThan] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[T] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.util.List,contains,1,boolean] PARA[VAR[org.argouml.model.mdr.Registry.T]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,isEmpty,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JComboBox,setSelectedIndex,1,void] PARA[LIT[Integer]] +++$+++  LEX[selectDefaultVS] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Container,getInsets,0,java.awt.Insets] +++$+++  FINAL TYPE[Insets] VAR[java.awt.Insets] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  LEX[actions.get] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  OP[greaterThan] VAR[java.lang.Class] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  OP[assign] NEW TYPE[TokenSep] PARENTHESESSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[org.argouml.cognitive.ListSet.T]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.Runnable,run,0,void] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[javax.swing.RootPaneContainer,setGlassPane,1,void] PARA[VAR[org.argouml.swingext.GlassPane]] +++$+++  PARENTHESESSTART VAR[java.awt.Component] PARENTHESESEND EOL
CALL[javax.swing.Action,putValue,2,void] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Thread,start,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JMenuItem,setMnemonic,1,void] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[javax.swing.JComponent,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  OP[multiply] VAR[INT] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,getComposite,0,java.awt.Composite] +++$+++  EOL TYPE[Composite] VAR[java.awt.Composite] OP[assign]
CALL[java.awt.image.BufferedImage,getColorModel,0,java.awt.image.ColorModel] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[greaterThan] OP[assign]
CALL[java.util.Map,put,2,V] PARA[CALL[null,valueOf]] PARA[VAR[java.lang.Class]] +++$+++  PARENTHESESSTART LEX[notationName] PARENTHESESEND EOL
CALL[java.awt.Point,getX,0,double] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.awt.Point,getY,0,double] +++$+++  COMMA PARENTHESESSTART INT PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  IF PARENTHESESSTART LEX[o.equals] PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[SuffixFilter] PARENTHESESEND
CALL[java.awt.Container,getWidth,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  LEX[path.substring] PARENTHESESSTART VAR[INT] OP[sum]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  INSTANCEOF TYPE[FigEdgeNote] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.StringBuffer] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.Action,addPropertyChangeListener,1,void] PARA[VAR[java.beans.PropertyChangeListener]] +++$+++  LEX[PropertyChangeListener] VAR[java.beans.PropertyChangeListener] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[org.argouml.language.java.reveng.classfile.ParserUtils.Token,getValue]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  VAR[INT] OP[lessThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Collection,add,1,boolean] PARA[CALL[java.lang.ClassLoader,loadClass]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  FINAL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.io.File,canRead,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JDialog,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[java.awt.event.ActionEvent] LEX[evt] PARENTHESESEND CURLYSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  TYPE[String] ARRAYSTART ARRAYEND CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  CURLYEND TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.awt.Graphics,translate,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[sum] OP[multiply] VAR[INT]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  TYPE[Object] ARRAYSTART ARRAYEND CURLYSTART
CALL[java.util.List,clear,0,void] +++$+++  PARENTHESESEND PARENTHESESEND RETURN EOL
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[jmemorize.core.FormattedText]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.io.InputStream] COMMA LEX[name.substring] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[jmemorize.core.learn.LearnHistory.SessionSummary]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,contains,1,boolean] PARA[VAR[jmemorize.gui.swing.panels.CardSidePanel.CardImageObserver]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  TYPE[ButtonGroup] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[javax.swing.JSpinner,setEnabled,1,void] PARA[CALL[javax.swing.JCheckBox,isSelected]] +++$+++  LEX[updateLimiterCheckboxes] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JSpinner,setEnabled,1,void] PARA[CALL[javax.swing.JRadioButton,isSelected]] +++$+++  LEX[updateCheckAmountFields] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESEND EOL LEX[m_backChecksAmountSpinner.setEnabled] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JComboBox,getSelectedIndex,0,int] +++$+++  CURLYSTART RETURN LEX[m_fonts.get] PARENTHESESSTART
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[javax.swing.JTextPane,getSelectionEnd,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESSTART OP[sum] LEX[stringTools.sourced] PARENTHESESSTART
CALL[java.util.zip.ZipOutputStream,putNextEntry,1,void] PARA[VAR[java.util.zip.ZipEntry]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.util.zip.ZipOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipEntry,setTime,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESEND OP[sum] PARENTHESESEND EOL
CALL[java.util.zip.ZipOutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.io.FileInputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  TRY CURLYSTART WHILE PARENTHESESSTART
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  PARENTHESESEND CURLYEND FINALLY CURLYSTART
CALL[java.awt.Graphics2D,setPaint,1,void] PARA[VAR[java.awt.GradientPaint]] +++$+++  COMMA LEX[image.getWidth] PARENTHESESSTART PARENTHESESEND
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[src.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.List,clear,0,void] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,setCharAt,2,void] PARA[LIT[Integer]] PARA[CALL[null,toTitleCase]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL ASSERT
CALL[java.lang.Thread,interrupt,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[ImageTools]] +++$+++  LEX[ImageTools.SCALE_FIT] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[ImageTools]] +++$+++  LEX[ImageTools.SCALE_HEIGHT] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  LEX[BasicStroke.JOIN_ROUND] PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.color.ColorSpace,getMaxValue,1,float] PARA[LIT[Integer]] +++$+++  EOL LEX[float] VAR[FLOAT] OP[assign]
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.awt.Component]] +++$+++  NULL OP[ternaryFalse] EOL ASSERT
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[java.awt.event.ActionEvent,getSource,0,java.lang.Object] +++$+++  OP[assign] NEW TYPE[ActionEvent] PARENTHESESSTART
CALL[javax.swing.JList,getSelectedIndex,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] LEX[File.separatorChar] PARENTHESESEND CURLYSTART
CALL[javax.swing.JFileChooser,getSelectedFile,0,java.io.File] +++$+++  CURLYSTART TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JButton]] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESSTART LEX[KeyEvent.VK_P] PARENTHESESEND EOL
CALL[java.io.File,getName,0,java.lang.String] +++$+++  LEX[file.getParentFile] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.ListSelectionModel,getAnchorSelectionIndex,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ListSelectionModel,addListSelectionListener,1,void] PARA[VAR[javax.swing.event.ListSelectionListener]] +++$+++  OP[not] OP[assign] NULL EOL
CALL[javax.swing.JFormattedTextField,setColumns,1,void] PARA[CALL[java.text.NumberFormat,getMaximumIntegerDigits]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JFormattedTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.io.File,isFile,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  LEX[configurationChanged] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JLabel,setText,1,void] PARA[CALL[java.text.SimpleDateFormat,format]] +++$+++  LEX[java.text.SimpleDateFormat] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JProgressBar,setValue,1,void] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.io.OutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND COMMA NULL COMMA
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[replaceText.getText] PARENTHESESSTART PARENTHESESEND COMMA
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  LEX[wholeWordCheckBox.isSelected] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.awt.CheckboxMenuItem,setActionCommand,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART THIS PARENTHESESEND EOL
CALL[java.net.URL,getContent,0,java.lang.Object] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Vector,clear,0,void] +++$+++  LEX[clearUndoRedo] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Vector,clear,0,void] +++$+++  LEX[redoStack.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.BufferedReader,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.FilterInputStream,available,0,int] +++$+++  OP[assign] NEW TYPE[ByteArrayOutputStream] PARENTHESESSTART
CALL[java.util.Vector,clear,0,void] +++$+++  LEX[redoStack.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Double,intValue,0,int] +++$+++  RETURN NEW TYPE[Integer] PARENTHESESSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.Calendar,setTimeInMillis,1,void] PARA[VAR[LONG]] +++$+++  LEX[DateTime.calendarInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Calendar,getTimeInMillis,0,long] +++$+++  COMMA PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[association] EOL WHILE PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Association] PARENTHESESEND
CALL[java.util.LinkedList,isEmpty,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,addFirst,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.LinkedList,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.LinkedList,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.LinkedList,lastIndexOf,1,int] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.concurrent.locks.Lock,lock,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  EOL TYPE[Number] VAR[java.lang.Number] OP[assign]
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[HasTimeDistributedData] PARENTHESESEND
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[root.postorderEnumeration] PARENTHESESSTART PARENTHESESEND EOL
CALL[com.projity.pm.criticalpath.PredecessorTaskTree.PertLayoutTreeNode,postorderEnumeration,0,java.util.Enumeration<E>] +++$+++  PARENTHESESSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.io.ObjectInputStream,readLong,0,long] +++$+++  PARENTHESESEND EOL LEX[t.setRawDuration] PARENTHESESSTART
CALL[java.util.LinkedList,size,0,int] +++$+++  CURLYSTART RETURN LEX[list.listIterator] PARENTHESESSTART
CALL[java.util.ListIterator,previous,0,E] +++$+++  RETURN EOL CURLYEND CURLYEND
CALL[java.util.ListIterator,add,1,void] PARA[VAR[com.projity.pm.criticalpath.PredecessorTaskList.TaskReference]] +++$+++  LEX[i.previous] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Collection,add,1,boolean] PARA[CALL[java.util.Iterator,next]] +++$+++  LEX[i.hasNext] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.awt.BasicStroke]] +++$+++  COMMA VAR[java.awt.BasicStroke] PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[java.awt.BasicStroke]] +++$+++  COMMA VAR[java.awt.BasicStroke] PARENTHESESEND EOL
CALL[java.util.ListIterator,hasNext,0,boolean] +++$+++  LEX[layouts.listIterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.ObjectInputStream,readDouble,0,double] +++$+++  RETURN NEW TYPE[Rate] PARENTHESESSTART
CALL[java.io.ObjectInputStream,readInt,0,int] +++$+++  LEX[s.readDouble] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.LinkedList,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.util.ListIterator,next,0,E] +++$+++  CURLYSTART TYPE[UndoableEdit] VAR[javax.swing.undo.UndoableEdit] OP[assign]
CALL[java.util.Vector,size,0,int] +++$+++  VAR[java.util.ListIterator] OP[assign] LEX[edits.listIterator] PARENTHESESSTART
CALL[java.util.Iterator,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,remove,0,void] +++$+++  LEX[remove] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  LEX[st.hasMoreTokens] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Node] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[nodes.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Date,after,1,boolean] PARA[VAR[java.util.Date]] +++$+++  VAR[java.util.Date] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Calendar,setLenient,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[Calendar.YEAR] PARENTHESESEND EOL
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  VAR[java.lang.String] OP[assign] LEX[recycledDateFormat.format] PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[scales.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.Integer] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.OutputStreamWriter,write,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.OutputStreamWriter,write,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.Number,doubleValue,0,double] +++$+++  LEX[BigInteger.valueOf] PARENTHESESSTART LEX[Math.round] PARENTHESESSTART
CALL[java.lang.Number,equals,1,boolean] PARA[VAR[java.lang.Number]] +++$+++  PARENTHESESEND CURLYSTART VAR[BOOLEAN] OP[assign]
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND EOL VAR[java.util.Date] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.io.ByteArrayOutputStream,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.Integer,intValue,0,int] +++$+++  RETURN PARENTHESESSTART LEX[TimeUnit.getInstance] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.HashMap,clear,0,void] +++$+++  EOL TYPE[String] VAR[java.lang.String] EOL
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Calendar,getTime,0,java.util.Date] +++$+++  PARENTHESESEND EOL VAR[java.util.Date] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  CURLYSTART TYPE[DateFormat] VAR[java.text.DateFormat] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[true] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,println,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.util.ArrayList] PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.Integer]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.StringBuilder,length,0,int] +++$+++  ELSE CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  ARRAYEND EOL LEX[System.arraycopy] PARENTHESESSTART
CALL[java.awt.event.MouseEvent,consume,0,void] +++$+++  OP[ternaryFalse] VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JComboBox,showPopup,0,void] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.ListModel,getSize,0,int] +++$+++  FOR PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.awt.Component,setFont,1,void] PARA[VAR[java.awt.Font]] +++$+++  VAR[java.awt.Font] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.table.TableCellEditor,cancelCellEditing,0,void] +++$+++  LEX[cancelCellEditing] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableCellEditor,getCellEditorValue,0,java.lang.Object] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[CacheEvent] PARENTHESESEND
CALL[java.util.ListIterator,next,0,E] +++$+++  EOL PARENTHESESEND LEX[f.execute] PARENTHESESSTART
CALL[javax.swing.JViewport,getViewPosition,0,java.awt.Point] +++$+++  EOL TYPE[Point] VAR[java.awt.Point] OP[assign]
CALL[javax.swing.JViewport,getViewPosition,0,java.awt.Point] +++$+++  EOL TYPE[Point] VAR[java.awt.Point] OP[assign]
CALL[javax.swing.JSpinner,setValue,1,void] PARA[CALL[javax.swing.JSpinner,getValue]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.awt.FontMetrics,stringWidth,1,int] PARA[VAR[java.lang.String]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.awt.GraphicsEnvironment,getDefaultScreenDevice,0,java.awt.GraphicsDevice] +++$+++  EOL TYPE[GraphicsDevice] VAR[java.awt.GraphicsDevice] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  TYPE[Rectangle] PARENTHESESSTART COMMA COMMA
CALL[java.awt.image.BufferedImage,getRaster,0,java.awt.image.WritableRaster] +++$+++  CURLYSTART TYPE[Raster] VAR[java.awt.image.Raster] OP[assign]
CALL[java.awt.image.BufferedImage,getRGB,2,int] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[DOUBLE] OP[assign] LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuffer,insert,2,java.lang.StringBuffer] PARA[LIT[Integer]] PARA[LIT[Character]] +++$+++  OP[assign] LEX[true] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  LEX[Math.floor] PARENTHESESSTART LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[DOUBLE] OP[assign] LEX[Double.parseDouble] PARENTHESESSTART
CALL[java.awt.Graphics,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  FIELD[top,java.awt.Insets] OP[sub] FIELD[bottom,java.awt.Insets] EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[xk.substring] PARENTHESESSTART COMMA
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Point] PARENTHESESEND
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  VAR[INT] EOL WHILE PARENTHESESSTART
CALL[java.util.Vector,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  LEX[e.nextElement] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[url.substring] PARENTHESESSTART COMMA
CALL[java.util.StringTokenizer,hasMoreElements,0,boolean] +++$+++  OP[assign] EOL WHILE PARENTHESESSTART
CALL[java.io.BufferedReader,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.io.PrintStream,print,1,void] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.PrintStream,flush,0,void] +++$+++  LEX[out.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.URL,getPort,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  LEX[out.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  LEX[out.print] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  CURLYSTART RETURN LEX[Base64.decodeBase64] PARENTHESESSTART
CALL[javax.swing.JTable,getModel,0,javax.swing.table.TableModel] +++$+++  OP[assign] NEW TYPE[TableRowSorter] PARENTHESESSTART
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  FIELD[fill,java.awt.GridBagConstraints] OP[assign] FIELD[HORIZONTAL,java.awt.GridBagConstraints] EOL
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JTextField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[javax.swing.JPasswordField]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[gridy,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  PARENTHESESSTART VAR[javax.swing.JLabel] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JPasswordField]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextField] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setText,1,void] PARA[LIT[Stirng]] +++$+++  LEX[jtfPass.setText] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.setText] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextArea,append,1,void] PARA[LIT[Stirng]] +++$+++  LEX[info.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Graphics,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART LEX[Color.white] PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.awt.datatransfer.DataFlavor]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JLabel,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[jason.util.CheckVersion,start,0,void] +++$+++  TYPE[CheckVersion] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.util.List,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.io.File,toString,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[Include.checkPathAndFixWithSourcePath] PARENTHESESSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JLabel]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JComponent]] +++$+++  LEX[FlowLayout.LEFT] PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JPanel]] +++$+++  PARENTHESESSTART VAR[javax.swing.JComponent] PARENTHESESEND EOL
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[arch.WriteStatusThread,start,0,void] +++$+++  FIELD[dumpAgsMinds,arch.WriteStatusThread] OP[assign] VAR[BOOLEAN] EOL
CALL[java.io.InputStream,read,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  LEX[true] EOL VAR[BOOLEAN] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.io.FileWriter,write,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[sum] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  ELSE CURLYSTART VAR[INT] OP[assign]
CALL[java.awt.Component,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  OP[ternaryFalse] VAR[java.awt.Component] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[CALL[java.lang.String,substring]] PARA[CALL[java.lang.String,substring]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  PARENTHESESSTART LEX[Level.WARNING] COMMA OP[sum]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  CURLYSTART LEX[logger.info] PARENTHESESSTART OP[sum]
CALL[javax.swing.Timer,stop,0,void] +++$+++  LEX[blinkTimer.isRunning] PARENTHESESSTART PARENTHESESEND PARENTHESESEND
CALL[javax.swing.JComponent,isOpaque,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JComponent,getWidth,0,int] +++$+++  LEX[g2d.fillRect] PARENTHESESSTART COMMA COMMA
CALL[java.awt.Graphics2D,setComposite,1,void] PARA[VAR[java.awt.Composite]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.Graphics2D,getComposite,0,java.awt.Composite] +++$+++  EOL TYPE[Composite] VAR[java.awt.Composite] OP[assign]
CALL[java.awt.Color,getBlue,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[multiply] OP[sum]
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  EOL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.awt.Color]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getTranslateInstance]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getScaleInstance]] +++$+++  OP[assign] LEX[Decoration.BEND] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.GeneralPath,transform,1,void] PARA[CALL[null,getTranslateInstance]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,moveTo,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.awt.geom.GeneralPath,moveTo,2,void] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  PARENTHESESSTART VAR[DOUBLE] PARENTHESESEND EOL
CALL[javax.swing.JTextArea,setLineWrap,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.logging.Logger,warning,1,void] PARA[LIT[Stirng]] +++$+++  LEX[gui.showErrorMessage] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.appendToMapList(java.util.Map<K, java.util.List<T>>, K, T).T]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.appendToMapList(java.util.Map<K, java.util.List<T>>, K, T).K]] PARA[VAR[java.util.List]] +++$+++  PARENTHESESSTART VAR[net.sf.freecol.common.util.CollectionUtils.appendToMapList(java.util.Map<K, java.util.List<T>>, K, T).T] PARENTHESESEND EOL
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[net.sf.freecol.common.util.CollectionUtils.accumulateToMap(java.util.Map<K, V>, K, V, java.util.function.BinaryOperator<V>).K]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Random,nextInt,1,int] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  FINAL INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[delim.indexOf] PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  TYPE[String] VAR[java.lang.String] OP[assign] PARENTHESESSTART
CALL[java.awt.FontMetrics,stringWidth,1,int] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.Character] OP[assign]
CALL[java.lang.reflect.Method,getName,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[ternaryFalse] VAR[BYTE] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  LEX[x0F] PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.File,getName,0,java.lang.String] +++$+++  PARENTHESESSTART LEX[Level.WARNING] COMMA OP[sum]
CALL[java.io.FileOutputStream,close,0,void] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] EOL VAR[INT] OP[lessThan]
CALL[java.util.Locale,getLanguage,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Locale,getCountry,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,canWrite,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.HashMap,clear,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.io.StringWriter,toString,0,java.lang.String] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[Entry] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,toUpperCase,0,java.lang.String] +++$+++  VAR[java.util.logging.Level] OP[assign] LEX[Level.parse] PARENTHESESSTART
CALL[java.lang.String,replaceFirst,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  LEX[true] EOL VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[CHAR]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[CALL[java.lang.String,indexOf]] +++$+++  VAR[java.lang.String] OP[assign] LEX[StringUtils.getString] PARENTHESESSTART
CALL[java.util.Properties,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  TYPE[Properties] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.awt.Polygon,addPoint,2,void] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[Polygon] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  OP[sum] VAR[INT] PARENTHESESEND EOL
CALL[java.awt.Graphics2D,fill,1,void] PARA[VAR[java.awt.geom.Area]] +++$+++  PARENTHESESSTART VAR[java.awt.Shape] PARENTHESESEND EOL
CALL[java.lang.IllegalArgumentException,getMessage,0,java.lang.String] +++$+++  LEX[Logger.info] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.util.Properties,stringPropertyNames,0,java.util.Set<java.lang.String>] +++$+++  PARENTHESESSTART TYPE[String] VAR[java.lang.String] OP[ternaryFalse]
CALL[javax.swing.JTree,getRowForLocation,2,int] PARA[CALL[java.awt.event.MouseEvent,getX]] PARA[CALL[java.awt.event.MouseEvent,getY]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  COMMA PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[sum] EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[CALL[java.lang.reflect.Method,getName]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.UnsupportedOperationException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[Logger.info] PARENTHESESSTART
CALL[javax.swing.JLabel,setCursor,1,void] PARA[CALL[null,getPredefinedCursor]] +++$+++  LEX[MouseEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  NULL EOL IF PARENTHESESSTART
CALL[java.net.HttpURLConnection,addRequestProperty,2,void] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  FIELD[length,BYTE] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  LEX[parameter.getKey] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.io.InputStream,close,0,void] +++$+++  CURLYEND CURLYEND FINALLY CURLYSTART
CALL[java.net.URL,openConnection,0,java.net.URLConnection] +++$+++  OP[assign] PARENTHESESSTART TYPE[HttpURLConnection] PARENTHESESEND
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.Throwable]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.nio.ByteBuffer,get,3,java.nio.ByteBuffer] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART RETURN EOL CURLYEND
CALL[java.io.File,toPath,0,java.nio.file.Path] +++$+++  PARENTHESESEND CURLYSTART LEX[Files.walkFileTree] PARENTHESESSTART
CALL[java.nio.channels.FileChannel,write,1,int] PARA[VAR[java.nio.ByteBuffer]] +++$+++  LEX[StandardOpenOption.WRITE] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[filename.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.TreeSet,addAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  PARENTHESESSTART VAR[java.util.Comparator] PARENTHESESEND EOL
CALL[java.util.LinkedList,addFirst,1,void] PARA[VAR[java.io.File]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.File,toString,0,java.lang.String] +++$+++  OP[bitwiseAnd] OP[not] LEX[UNC_PREFIX.equals] PARENTHESESSTART
CALL[java.nio.ByteBuffer,duplicate,0,java.nio.ByteBuffer] +++$+++  CURLYSTART TYPE[ByteBuffer] VAR[java.nio.ByteBuffer] OP[assign]
CALL[javax.swing.SingleSelectionModel,getSelectedIndex,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JComponent]] PARA[LIT[Stirng]] +++$+++  LEX[JComponent] VAR[javax.swing.JComponent] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,removeAll,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.RectangularShape,getMinY,0,double] +++$+++  LEX[shape.getCenterX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.RectangularShape,getMaxY,0,double] +++$+++  LEX[shape.getMaxX] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.geom.RectangularShape,getMaxX,0,double] +++$+++  OP[assign] NEW LEX[Point2D.Double] PARENTHESESSTART
CALL[java.awt.Window,getLocation,0,java.awt.Point] +++$+++  CURLYEND TYPE[Point] VAR[java.awt.Point] OP[assign]
CALL[net.filebot.util.WeakValueHashMap.WeakValue,get,0,T] +++$+++  NULL OP[ternaryTrue] NULL OP[ternaryFalse]
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  PARENTHESESEND CURLYSTART LEX[connection.addRequestProperty] PARENTHESESSTART
CALL[java.io.File,isDirectory,0,boolean] +++$+++  VAR[java.io.File] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.CharSequence]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[net.filebot.similarity.SeasonEpisodeMatcher.SxE]] +++$+++  FIELD[season,net.filebot.similarity.SeasonEpisodeMatcher.SxE] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.prefs.Preferences,get,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Exception,getMessage,0,java.lang.String] +++$+++  LEX[debug.log] PARENTHESESSTART LEX[Level.WARNING] COMMA
CALL[java.lang.Throwable,clone,0,java.lang.Object] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JLabel,setIcon,1,void] PARA[VAR[javax.swing.Icon]] +++$+++  LEX[Icon] VAR[javax.swing.Icon] PARENTHESESEND CURLYSTART
CALL[javax.swing.JButton,setFocusable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.concurrent.ThreadPoolExecutor,purge,0,void] +++$+++  OP[ternaryFalse] VAR[java.util.Set] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,getRowSorter,0,javax.swing.RowSorter<? extends javax.swing.table.TableModel>] +++$+++  OP[lessThan] OP[ternaryTrue] OP[greaterThan] PARENTHESESEND
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[CALL[java.io.File,getName]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.JComponent,getForeground,0,java.awt.Color] +++$+++  PARENTHESESEND EOL LEX[c.setForeground] PARENTHESESSTART
CALL[java.io.InputStream,skip,1,long] PARA[LIT[Integer]] +++$+++  OP[sum] OP[assign] VAR[INT] EOL
CALL[java.nio.CharBuffer,array,0,char[]] +++$+++  OP[assign] NEW TYPE[String] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND LEX[pos.setIndex] PARENTHESESSTART
CALL[java.util.zip.ZipEntry,getSize,0,long] +++$+++  PARENTHESESSTART PARENTHESESSTART INT PARENTHESESEND
CALL[java.io.PrintWriter,format,2,java.io.PrintWriter] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getName,0,java.lang.String] +++$+++  TYPE[File] PARENTHESESSTART VAR[java.io.File] COMMA
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  LEX[WebRequest.post] PARENTHESESSTART VAR[java.net.URL] COMMA
CALL[java.util.Set,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[org.jcandle.util.PenceCurrency,name,0,java.lang.String] +++$+++  IF PARENTHESESSTART LEX[StringUtils.equals] PARENTHESESSTART
CALL[java.awt.Color,getGreen,0,int] +++$+++  LEX[color.getRed] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Float,floatValue,0,float] +++$+++  FINAL LEX[float] VAR[FLOAT] OP[assign]
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[org.jcandle.util.FundamentalStatus]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Float,floatValue,0,float] +++$+++  OP[greaterThan] VAR[INT] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,matches,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[sent.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.ObjectOutputStream,writeObject,1,void] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Calendar,set,6,void] PARA[CALL[java.util.Calendar,get]] PARA[CALL[java.util.Calendar,get]] PARA[CALL[java.util.Calendar,get]] PARA[CALL[java.util.Calendar,get]] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  LEX[dNow.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Date,compareTo,1,int] PARA[VAR[java.util.Date]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Double,doubleValue,0,double] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[javax.swing.JDialog,setOpacity,1,void] PARA[LIT[Integer]] +++$+++  CURLYEND CURLYEND PARENTHESESEND EOL
CALL[java.awt.Graphics2D,dispose,0,void] +++$+++  OP[sub] PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[bitwiseAnd] VAR[CHAR] OP[not] OP[assign]
CALL[java.awt.Component,getComponentOrientation,0,java.awt.ComponentOrientation] +++$+++  PARENTHESESEND EOL LEX[myMsg.applyComponentOrientation] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[TicketLineInfo] PARENTHESESEND
CALL[com.openbravo.pos.sales.JProductAttEdit,applyComponentOrientation,1,void] PARA[CALL[java.awt.Component,getComponentOrientation]] +++$+++  PARENTHESESSTART LEX[s] PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Double,doubleValue,0,double] +++$+++  NEW TYPE[Double] PARENTHESESSTART OP[sub]
CALL[java.awt.geom.AffineTransform,preConcatenate,1,void] PARA[CALL[java.awt.Font,getTransform]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Hashtable,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.CharSequence,length,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART SWITCH PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[INT] OP[assign] VAR[INT] EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[INT] OP[sum] OP[sum] PARENTHESESEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  VAR[INT] OP[sum] OP[sum] EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Stack,push,1,E] PARA[VAR[java.lang.Object]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Stack,pop,0,E] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[INT] OP[sum] VAR[INT] OP[lessThan]
CALL[java.lang.CharSequence,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.awt.Font,getSize,0,int] +++$+++  LEX[f.getFamily] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.Font,getSize,0,int] +++$+++  LEX[f.getFamily] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND CURLYSTART VAR[org.gjt.sp.jedit.textarea.DisplayManager] OP[assign]
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[p2.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL ELSE RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  LEX[sbForeignCharsEsc.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.Timer,stop,0,void] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.util.Hashtable,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Hashtable,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[E] VAR[org.gjt.sp.jedit.JEditActionContext.E] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[ParserRule] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESEND COMMA VAR[INT] COMMA
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[ParserRule] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESEND COMMA VAR[INT] COMMA
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[ParserRule] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  TYPE[ParserRule] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.Character,charValue,0,char] +++$+++  LEX[Character.valueOf] PARENTHESESSTART LEX[Character.toUpperCase] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[line.substring] PARENTHESESSTART COMMA
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Hashtable,elements,0,java.util.Enumeration<V>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Enumeration] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[keys.nextElement] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Writer,write,1,void] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.ref.SoftReference,get,0,T] +++$+++  PARENTHESESEND CURLYSTART VAR[java.util.Map] OP[assign]
CALL[java.awt.Component,requestFocusInWindow,0,boolean] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,getPreferredSize,0,java.awt.Dimension] +++$+++  VAR[java.lang.Object] PARENTHESESEND EOL RETURN
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  TYPE[Descriptor] OP[greaterThan] VAR[java.util.Set] OP[assign]
CALL[java.lang.CharSequence,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  COMMA NEW TYPE[PropValue] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  LEX[buf.toString] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.SortedMap,put,2,V] PARA[VAR[org.gjt.sp.jedit.buffer.PositionManager.PosBottomHalf]] PARA[VAR[org.gjt.sp.jedit.buffer.PositionManager.PosBottomHalf]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[assign] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.io.IOException,toString,0,java.lang.String] +++$+++  TYPE[String] ARRAYSTART ARRAYEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.io.InputStream,read,0,int] +++$+++  OP[assign] VAR[INT] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,replaceFirst,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.File,exists,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART LEX[pluginModel.setValueAt] PARENTHESESSTART
CALL[org.gjt.sp.jedit.pluginmgr.PluginManager,toFront,0,void] +++$+++  PARENTHESESSTART VAR[java.awt.Frame] PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.Iterator,next]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  VAR[INT] OP[sum] OP[sum] EOL
CALL[java.util.List,remove,1,boolean] PARA[VAR[java.util.Properties]] +++$+++  LEX[Properties] VAR[java.util.Properties] PARENTHESESEND CURLYSTART
CALL[java.util.Properties,setProperty,2,java.lang.Object] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND OP[ternaryTrue]
CALL[java.lang.StringBuilder,length,0,int] +++$+++  OP[assign] PARENTHESESEND LEX[buf.setLength] PARENTHESESSTART
CALL[java.awt.datatransfer.Transferable,getTransferDataFlavors,0,java.awt.datatransfer.DataFlavor[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.awt.datatransfer.DataFlavor] OP[assign]
CALL[javax.swing.tree.DefaultMutableTreeNode,children,0,java.util.Enumeration<E>] +++$+++  PARENTHESESSTART TYPE[Enumeration] VAR[java.util.Enumeration] OP[assign]
CALL[java.util.Vector,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[org.gjt.sp.jedit.gui.FilteredTableModel.E,getColumnName,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL ELSE VAR[java.lang.String] OP[assign]
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  RETURN NEW TYPE[Point] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  PARENTHESESEND OP[assign] OP[assign] PARENTHESESEND
CALL[javax.swing.ListSelectionModel,removeSelectionInterval,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[sum] VAR[INT] EOL
CALL[javax.swing.DefaultListModel,get,1,E] PARA[VAR[INT]] +++$+++  ARRAYEND ARRAYSTART ARRAYEND OP[assign]
CALL[java.lang.reflect.Method,getModifiers,0,int] +++$+++  IF PARENTHESESSTART LEX[Modifier.isStatic] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  LEX[String.valueOf] PARENTHESESSTART LEX[Character.toUpperCase] PARENTHESESSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[Error] PARENTHESESSTART
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] NEW TYPE[String] ARRAYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART FIELD[length,java.lang.Class] OP[greaterThan] PARENTHESESEND
CALL[java.lang.Class,getComponentType,0,java.lang.Class<? extends java.lang.Object>] +++$+++  PARENTHESESEND EOL VAR[java.lang.Class] OP[assign]
CALL[java.awt.print.PageFormat,getPaper,0,java.awt.print.Paper] +++$+++  CURLYSTART TYPE[Paper] VAR[java.awt.print.Paper] OP[assign]
CALL[java.awt.print.Paper,setImageableArea,4,void] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] PARA[VAR[DOUBLE]] +++$+++  LEX[format.getPaper] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.Graphics2D,getFontRenderContext,0,java.awt.font.FontRenderContext] +++$+++  EOL TYPE[FontRenderContext] VAR[java.awt.font.FontRenderContext] OP[assign]
CALL[java.awt.Font,getLineMetrics,2,java.awt.font.LineMetrics] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.font.FontRenderContext]] +++$+++  PARENTHESESEND EOL VAR[java.awt.font.LineMetrics] OP[assign]
CALL[java.awt.Graphics2D,setColor,1,void] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.Rectangle2D,getHeight,0,double] +++$+++  PARENTHESESEND COMMA VAR[DOUBLE] COMMA
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[sum]
CALL[javax.swing.JCheckBoxMenuItem,addActionListener,1,void] PARA[VAR[org.gjt.sp.jedit.browser.BrowserCommandsMenu.ActionHandler]] +++$+++  LEX[autoDetect.setActionCommand] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JRadioButtonMenuItem]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButtonMenuItem] PARENTHESESEND EOL
CALL[java.util.Set,toArray,0,java.lang.Object[]] +++$+++  ARRAYEND EOL LEX[System.arraycopy] PARENTHESESSTART
CALL[javax.swing.text.Position,getOffset,0,int] +++$+++  NULL OP[ternaryTrue] VAR[INT] OP[ternaryFalse]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] THIS PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  LEX[Math.max] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND OP[not] OP[assign]
CALL[java.util.Vector,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[TexRow] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.util.List,listIterator,0,java.util.ListIterator<E>] +++$+++  PARENTHESESSTART TYPE[ListIterator] VAR[java.util.ListIterator] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[pref.setValue] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.HashMap,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  LEX[Map] VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  OP[assign] VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[CALL[java.lang.String,length]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  CURLYSTART ASSERT VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[CALL[java.io.File,getName]] +++$+++  EOL TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.lang.Integer,intValue,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.Integer,intValue,0,int] +++$+++  LEX[map.put] PARENTHESESSTART VAR[edu.umd.cs.findbugs.util.Multiset.K] COMMA
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.ArrayList,addAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  PARENTHESESEND OP[sum] PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN EOL CURLYEND RETURN
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[sum] OP[lessThan]
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map.Entry,getKey,0,K] +++$+++  CURLYEND RETURN LEX[System.identityHashCode] PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[edu.umd.cs.findbugs.util.MultiMap.K]] +++$+++  VAR[edu.umd.cs.findbugs.util.MultiMap.K] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Collection,remove,1,boolean] PARA[VAR[edu.umd.cs.findbugs.util.MultiMap.V]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K1]] +++$+++  TYPE[V] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.util.DualKeyHashMap.K1]] +++$+++  TYPE[V] OP[greaterThan] VAR[java.util.Map] OP[assign]
CALL[java.util.BitSet,set,1,void] PARA[VAR[CHAR]] +++$+++  TYPE[String] VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.net.URL,openStream,0,java.io.InputStream] +++$+++  TRY CURLYSTART VAR[java.io.InputStream] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[edu.umd.cs.findbugs.FindBugsMain]] +++$+++  VAR[INT] EOL CURLYEND RETURN
CALL[java.util.Map,values,0,java.util.Collection<V>] +++$+++  OP[lessThan] TYPE[Plugin] OP[greaterThan] PARENTHESESSTART
CALL[java.io.InputStream,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  VAR[CHAR] ARRAYSTART ARRAYEND OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[hiddenBugCategorySet.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[edu.umd.cs.findbugs.ba.jsr305.TypeQualifierValueSet.copyMapValue(java.util.Map<K, V>, K, K).K]] +++$+++  LEX[map.put] PARENTHESESSTART VAR[edu.umd.cs.findbugs.ba.jsr305.TypeQualifierValueSet.copyMapValue(java.util.Map<K, V>, K, K).K] COMMA
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Boolean] VAR[java.lang.Boolean] OP[assign]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Boolean] VAR[java.lang.Boolean] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL LEX[slashedClassNames.add] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART ASSERT
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[edu.umd.cs.findbugs.ba.URLClassPath.Entry,getURL]] +++$+++  LEX[File.pathSeparator] PARENTHESESEND EOL CURLYEND
CALL[java.util.BitSet,set,1,void] PARA[VAR[INT]] +++$+++  OP[assign] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.BitSet,set,1,void] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[classAndMethod] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  OP[ternaryFalse] PARENTHESESEND EOL RETURN
CALL[java.io.PushbackReader,unread,1,void] PARA[VAR[INT]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  TYPE[Token] PARENTHESESSTART LEX[Token.COMMENT] COMMA
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.regex.Pattern,toString,0,java.lang.String] +++$+++  NULL PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,put,2,V] PARA[VAR[edu.umd.cs.findbugs.props.WarningPropertySet.T]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART TYPE[T] VAR[edu.umd.cs.findbugs.props.WarningPropertySet.T] OP[ternaryFalse]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.IdentityHashMap,put,2,V] PARA[VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType]] PARA[VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType]] +++$+++  COMMA VAR[edu.umd.cs.findbugs.graph.Transpose.VertexType] PARENTHESESEND EOL
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[edu.umd.cs.findbugs.graph.SearchTree]] +++$+++  OP[greaterThan] VAR[edu.umd.cs.findbugs.graph.SearchTree] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.zip.ZipOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipEntry,getTime,0,long] +++$+++  PARENTHESESEND EOL LEX[ze2.setTime] PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.HashSet,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Character]] +++$+++  OP[sum] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[javax.swing.table.TableColumn,sizeWidthToFit,0,void] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.util.ArrayList,remove,1,boolean] PARA[VAR[javax.swing.event.TableColumnModelListener]] +++$+++  LEX[TableColumnModelListener] VAR[javax.swing.event.TableColumnModelListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.Action,actionPerformed,1,void] PARA[VAR[java.awt.event.ActionEvent]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTree] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JLabel]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JTextPane,setFocusable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[javax.swing.JButton,setOpaque,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.net.URL,toURI,0,java.net.URI] +++$+++  CURLYSTART RETURN LEX[customPlugins.remove] PARENTHESESSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalStrut]] +++$+++  PARENTHESESSTART VAR[javax.swing.JButton] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalGlue]] +++$+++  PARENTHESESSTART LEX[MainFrame.MAC_OS_X] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalStrut]] +++$+++  PARENTHESESSTART VAR[javax.swing.JButton] PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  CURLYSTART RETURN LEX[lst.get] PARENTHESESSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[edu.umd.cs.findbugs.gui2.BugAspects.SortableValue]] +++$+++  LEX[SortableValue] VAR[edu.umd.cs.findbugs.gui2.BugAspects.SortableValue] PARENTHESESEND CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[javax.swing.AbstractButton,setDisplayedMnemonicIndex,1,void] PARA[CALL[edu.umd.cs.findbugs.gui.AnnotatedString,getMnemonicIndex]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.HashSet,contains,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,put,2,V] PARA[VAR[INT]] PARA[VAR[java.awt.Color]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[javax.swing.text.Document,getLength,0,int] +++$+++  OP[bitwiseOr] VAR[INT] OP[greaterThan] OP[assign]
CALL[java.util.Random,nextBytes,1,void] PARA[VAR[BYTE]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[ConversionSpecification] PARENTHESESEND
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,internalsprintf]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL ELSE
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[jake2.util.PrintfFormat.ConversionSpecification,internalsprintf]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL ELSE
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  VAR[CHAR] OP[assign] OP[assign] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[not] OP[assign]
CALL[java.nio.ByteBuffer,clear,0,java.nio.Buffer] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.io.RandomAccessFile,readFloat,0,float] +++$+++  PARENTHESESEND EOL VAR[FLOAT] OP[assign]
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  VAR[SHORT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  LEX[f.readShort] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  VAR[SHORT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.io.RandomAccessFile,readShort,0,short] +++$+++  VAR[SHORT] ARRAYSTART ARRAYEND OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.StringTokenizer,hasMoreTokens,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN VAR[java.lang.String] EOL RETURN
CALL[java.io.RandomAccessFile,writeInt,1,void] PARA[LIT[Integer]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND PARENTHESESEND
CALL[java.io.File,getName,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.FileInputStream,available,0,int] +++$+++  TRY CURLYSTART VAR[INT] OP[assign]
CALL[java.io.BufferedInputStream,read,0,int] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.RandomAccessFile,close,0,void] +++$+++  EOL CURLYEND TRY CURLYSTART
CALL[java.awt.Container,add,1,java.awt.Component] PARA[VAR[javax.swing.JTextField]] +++$+++  LEX[openWindow] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.Container,add,1,java.awt.Component] PARA[VAR[javax.swing.JTextField]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextField] PARENTHESESEND EOL
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  IF PARENTHESESSTART OP[not] PARENTHESESSTART
CALL[javax.swing.JList,getSelectedValue,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[javax.swing.JTable,repaint,0,void] +++$+++  ARRAYEND OP[assign] LEX[false] EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[lessThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[sum] EOL LEX[buff.append] PARENTHESESSTART
CALL[java.io.FileReader,close,0,void] +++$+++  OP[assign] VAR[INT] EOL CURLYEND
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Stack,size,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[lessThan] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  LEX[beep] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.PrintStream,print,1,void] PARA[VAR[java.lang.String]] +++$+++  OP[not] VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.PrintWriter,println,1,void] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.util.zip.Deflater,finish,0,void] +++$+++  PARENTHESESSTART VAR[BYTE] PARENTHESESEND EOL
CALL[java.io.ByteArrayOutputStream,toByteArray,0,byte[]] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  COMMA VAR[LONG] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  VAR[SHORT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESSTART CHAR VAR[CHAR] OP[ternaryFalse]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.lang.Thread,join,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  EOL PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Random,nextBytes,1,void] PARA[VAR[BYTE]] +++$+++  ARRAYEND VAR[BYTE] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[INT]] +++$+++  CURLYEND TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.ref.SoftReference,get,0,T] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[sum] EOL LEX[buff.append] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.Thread,setDaemon,1,void] PARA[LIT[Boolean]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.Thread,start,0,void] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.CharBuffer,position,0,int] +++$+++  LEX[charBuffer.capacity] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.nio.ByteBuffer,capacity,0,int] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.nio.channels.FileChannel,position,1,java.nio.channels.FileChannel] PARA[VAR[LONG]] +++$+++  OP[assign] VAR[LONG] PARENTHESESEND CURLYSTART
CALL[java.io.Reader,read,1,int] PARA[VAR[CHAR]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[org.h2.table.TableLinkConnection]] +++$+++  CURLYSTART TYPE[TableLinkConnection] VAR[org.h2.table.TableLinkConnection] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[lessThan] PARENTHESESEND OP[sum] PARENTHESESSTART
CALL[java.nio.ByteBuffer,capacity,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,put,1,java.nio.ByteBuffer] PARA[VAR[java.nio.ByteBuffer]] +++$+++  LEX[temp.flip] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.BitSet,set,2,void] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  LEX[set.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.nio.channels.FileChannel,truncate,1,java.nio.channels.FileChannel] PARA[VAR[LONG]] +++$+++  VAR[LONG] OP[sum] OP[sum] EOL
CALL[java.util.HashMap,put,2,V] PARA[LIT[Stirng]] PARA[VAR[LONG]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL CURLYEND LEX[result.append] PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  EOL BREAK EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[INT] OP[lessThan] PARENTHESESEND CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART LEX[Constants.BUILD_ID] PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,remove,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.lang.ref.SoftReference,get,0,T] +++$+++  ARRAYSTART ARRAYEND VAR[org.h2.value.Value] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[BOOLEAN] EOL IF PARENTHESESSTART
CALL[java.io.DataInputStream,readByte,0,byte] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.io.DataOutputStream,writeLong,1,void] PARA[VAR[LONG]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.DataInputStream,readDouble,0,double] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.io.DataInputStream,readFloat,0,float] +++$+++  THROWS LEX[IOException] CURLYSTART RETURN
CALL[java.io.DataInputStream,readChar,0,char] +++$+++  PARENTHESESEND CURLYSTART LEX[buff.append] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,size,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.sql.SQLException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.error] PARENTHESESSTART OP[sum]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.concurrent.ExecutorService,awaitTermination,2,boolean] PARA[VAR[LONG]] PARA[VAR[java.util.concurrent.TimeUnit]] +++$+++  THROWS LEX[InterruptedException] CURLYSTART RETURN
CALL[java.lang.Object,equals,1,boolean] PARA[CALL[net.pms.util.KeyedComboBoxModel.ComboBoxItemPair,getKey]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.regex.Pattern,matcher,1,java.util.regex.Matcher] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Matcher] VAR[java.util.regex.Matcher] OP[assign]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.Object]] +++$+++  LEX[sb.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[FileUtil.renameForSorting] PARENTHESESSTART
CALL[java.io.File,getName,0,java.lang.String] +++$+++  VAR[java.lang.String] OP[assign] LEX[FileUtil.renameForSorting] PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.debug] PARENTHESESSTART COMMA
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setHideMediaLibraryFolder] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setShowItunesLibrary] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setShowIphotoLibrary] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setShowApertureLibrary] PARENTHESESSTART PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  EOL LEX[episodeTitles.setEnabled] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JTable,getValueAt,2,java.lang.Object] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[javax.swing.JTable,setValueAt,3,void] PARA[CALL[javax.swing.JTable,getValueAt]] PARA[VAR[INT]] PARA[LIT[Integer]] +++$+++  OP[sub] COMMA PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART VAR[java.awt.CardLayout] PARENTHESESEND EOL
CALL[javax.swing.JPanel,applyComponentOrientation,1,void] PARA[VAR[java.awt.ComponentOrientation]] +++$+++  LEX[builder.getPanel] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JComboBox,setEditable,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[audioChannelsModel] PARENTHESESEND EOL
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  CURLYSTART LEX[configuration.setEncodedAudioPassthrough] PARENTHESESSTART PARENTHESESSTART
CALL[javax.swing.JPanel,applyComponentOrientation,1,void] PARA[VAR[java.awt.ComponentOrientation]] +++$+++  LEX[builder.getPanel] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setForcedSubtitleTags] PARENTHESESSTART
CALL[javax.swing.JButton,setBackground,1,void] PARA[VAR[java.awt.Color]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  PARENTHESESEND CURLYSTART LEX[fos.write] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setMaximumBitrate] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART LEX[configuration.setAutomaticMaximumBitrate] PARENTHESESSTART
CALL[javax.swing.JScrollBar,addAdjustmentListener,1,void] PARA[THIS[null]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL LEX[builder.addLabel] PARENTHESESSTART
CALL[javax.swing.JFrame,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  EOL CONTINUE EOL CURLYEND
CALL[javax.swing.JPanel,getComponentCount,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.OutputStream,write,1,void] PARA[VAR[BYTE]] +++$+++  COMMA FIELD[length,BYTE] PARENTHESESEND EOL
CALL[java.lang.Thread,start,0,void] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.io.File,deleteOnExit,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.io.FileWriter,flush,0,void] +++$+++  PARENTHESESEND OP[sum] PARENTHESESEND EOL
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.Object,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[speedStats.put] PARENTHESESSTART
CALL[java.net.SocketException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.error] PARENTHESESSTART OP[sum]
CALL[java.sql.SQLException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOG.finest] PARENTHESESSTART OP[sum]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.sql.Statement]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.math.BigInteger,compareTo,1,int] PARA[VAR[java.math.BigInteger]] +++$+++  OP[lessThan] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.math.BigInteger,longValue,0,long] +++$+++  OP[assign] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Calendar,setTimeZone,1,void] PARA[VAR[java.util.TimeZone]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.io.Writer,write,3,void] PARA[VAR[CHAR]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[javax.swing.ButtonGroup,getButtonCount,0,int] +++$+++  VAR[javax.swing.ButtonGroup] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.ButtonGroup,getElements,0,java.util.Enumeration<javax.swing.AbstractButton>] +++$+++  CURLYSTART RETURN LEX[DefaultGroovyMethods.iterator] PARENTHESESSTART
CALL[javax.swing.JComboBox,getItemCount,0,int] +++$+++  VAR[javax.swing.JComboBox] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JComboBox,addItem,1,void] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.table.TableModel,getRowCount,0,int] +++$+++  VAR[javax.swing.table.TableModel] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[javax.swing.tree.TreePath,getPath,0,java.lang.Object[]] +++$+++  CURLYSTART RETURN LEX[DefaultGroovyMethods.iterator] PARENTHESESSTART
CALL[javax.swing.tree.TreeNode,getChildCount,0,int] +++$+++  VAR[javax.swing.tree.TreeNode] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JMenu,getMenuComponent,1,java.awt.Component] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JToolBar,add,1,javax.swing.JButton] PARA[VAR[javax.swing.Action]] +++$+++  LEX[Action] VAR[javax.swing.Action] PARENTHESESEND CURLYSTART
CALL[java.util.List,listIterator,1,java.util.ListIterator<E>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,containsAll,1,boolean] PARA[VAR[java.util.Collection]] +++$+++  VAR[java.util.Collection] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.text.JTextComponent,addFocusListener,1,void] PARA[VAR[java.awt.event.FocusAdapter]] +++$+++  LEX[JTextComponent] VAR[javax.swing.text.JTextComponent] PARENTHESESEND CURLYSTART
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  LEX[dispose] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.management.Notification,getSource,0,java.lang.Object] +++$+++  EOL LEX[result.put] PARENTHESESSTART COMMA
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[CALL[javax.management.Notification,getSequenceNumber]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.io.PrintStream,println,1,void] PARA[LIT[Stirng]] +++$+++  OP[sum] PARENTHESESEND EOL CURLYEND
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  TYPE[String] PARENTHESESEND PARENTHESESEND PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND EOL
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,equals,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  RETURN NEW TYPE[QName] PARENTHESESSTART
CALL[java.util.Map,keySet,0,java.util.Set<K>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,getName,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[classCache.put] PARENTHESESSTART
CALL[java.util.Map,clear,0,void] +++$+++  PARENTHESESSTART VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,listIterator,1,java.util.ListIterator<E>] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.net.URL,getPort,0,int] +++$+++  OP[assign] NEW TYPE[ServerSocket] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.io.PrintWriter,print,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[ClassHelper.char_TYPE] PARENTHESESEND CURLYSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Class]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Class] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[ClassInfo] VAR[org.codehaus.groovy.reflection.ClassInfo] OP[assign]
CALL[java.io.Reader,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.Class,getModifiers,0,int] +++$+++  PARENTHESESSTART OP[not] LEX[Modifier.isPublic] PARENTHESESSTART
CALL[java.lang.Throwable,getCause,0,java.lang.Throwable] +++$+++  VAR[java.lang.Throwable] EOL WHILE PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Class] PARENTHESESEND
CALL[java.lang.reflect.Method,getModifiers,0,int] +++$+++  LEX[Modifier.PUBLIC] EOL RETURN PARENTHESESSTART
CALL[java.lang.Object,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  PARENTHESESEND OP[lessThan] VAR[INT] PARENTHESESEND
CALL[java.lang.StringBuilder,length,0,int] +++$+++  PARENTHESESEND CURLYSTART WHILE PARENTHESESSTART
CALL[java.lang.Object,getClass,0,java.lang.Class<? extends java.lang.Object>] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Enumeration,nextElement,0,E] +++$+++  EOL TYPE[URL] VAR[java.net.URL] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  TYPE[HashMap] OP[lessThan] OP[greaterThan] PARENTHESESSTART
CALL[java.util.logging.Logger,addHandler,1,void] PARA[VAR[java.util.logging.Handler]] +++$+++  OP[ternaryFalse] VAR[java.util.logging.Handler] PARENTHESESEND CURLYSTART
CALL[java.net.URI,getScheme,0,java.lang.String] +++$+++  LEX[dburi.isAbsolute] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND EOL CURLYEND
CALL[javax.swing.DefaultListModel,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[ElementWrapper] PARENTHESESEND
CALL[net.sourceforge.pmd.util.designer.Designer.TreeWidget,setRootVisible,1,void] PARA[LIT[Boolean]] +++$+++  VAR[javax.swing.tree.TreeNode] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Class,getDeclaredMethod,2,java.lang.reflect.Method] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Class]] +++$+++  TRY CURLYSTART VAR[java.lang.reflect.Method] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  LEX[original.length] PARENTHESESSTART PARENTHESESEND OP[sum]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.lang.String,indexOf,2,int] PARA[VAR[CHAR]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  CURLYEND RETURN VAR[BOOLEAN] OP[ternaryTrue]
CALL[java.lang.reflect.InvocationTargetException,printStackTrace,0,void] +++$+++  TYPE[InvocationTargetException] VAR[java.lang.reflect.InvocationTargetException] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  VAR[INT] OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[javax.swing.tree.DefaultMutableTreeNode,getFirstChild,0,javax.swing.tree.TreeNode] +++$+++  OP[assign] PARENTHESESSTART TYPE[DefaultMutableTreeNode] PARENTHESESEND
CALL[java.awt.GridBagLayout,setConstraints,2,void] PARA[VAR[java.awt.Component]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  FIELD[gridwidth,java.awt.GridBagConstraints] OP[assign] VAR[INT] EOL
CALL[java.io.Writer,close,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.Writer,flush,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.lang.RuntimeException,printStackTrace,0,void] +++$+++  LEX[RuntimeException] VAR[java.lang.RuntimeException] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.List,add,1,boolean] PARA[VAR[net.sourceforge.pmd.Report.RuleConfigurationError]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  LEX[instance] PARENTHESESSTART PARENTHESESEND OP[ternaryFalse]
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[not] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.concurrent.ConcurrentMap,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.io.PrintWriter,println,0,void] +++$+++  PARENTHESESEND EOL CURLYEND CURLYEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  BREAK EOL CASE OP[ternaryFalse]
CALL[java.io.BufferedReader,readLine,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,clear,0,void] +++$+++  OP[greaterThan] VAR[java.util.Map] PARENTHESESEND CURLYSTART
CALL[java.awt.Color,getRed,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.awt.Color,getAlpha,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART FIELD[criticalHitsOnPCs,net.sf.hale.DifficultyManager.DifficultyLevel] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART FIELD[friendlyFireOnPCs,net.sf.hale.DifficultyManager.DifficultyLevel] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  FIELD[damageFactorOnPCs,net.sf.hale.DifficultyManager.DifficultyLevel] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.reflect.InvocationTargetException,getCause,0,java.lang.Throwable] +++$+++  CURLYSTART LEX[Logger.appendToErrorLog] PARENTHESESSTART COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.List,get]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.io.PrintStream,print,1,void] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Set,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  INSTANCEOF TYPE[JSONObject] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  TYPE[JSONObject] PARENTHESESEND VAR[java.lang.Object] COMMA
CALL[java.io.File,isDirectory,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.BufferedInputStream,close,0,void] +++$+++  LEX[out.closeEntry] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.BufferedInputStream,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[greaterThan] PARENTHESESEND PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.util.List] PARENTHESESEND EOL CURLYEND
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.Integer]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  EOL LEX[i--] PARENTHESESEND CURLYSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.io.File,canRead,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.net.URI,isAbsolute,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[true] EOL VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART VAR[org.ambraproject.freemarker.AmbraFreemarkerConfig.JournalConfig] OP[assign]
CALL[java.lang.String,regionMatches,5,boolean] PARA[LIT[Boolean]] PARA[LIT[Integer]] PARA[VAR[java.lang.String]] PARA[LIT[Integer]] PARA[CALL[java.lang.String,length]] +++$+++  CURLYEND BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[not] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.List,hashCode,0,int] +++$+++  OP[assign] OP[multiply] VAR[INT] OP[sum]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.ambraproject.views.TOCRelatedArticle]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL LEX[authorsForRelated.add] PARENTHESESSTART
CALL[java.util.Set,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,equals,1,boolean] PARA[CALL[org.ambraproject.views.article.ArticleType,getHeading]] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[CALL[org.ambraproject.views.article.ArticleType,getHeading]] +++$+++  NULL OP[ternaryTrue] LEX[false] OP[ternaryFalse]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.ambraproject.views.article.HomePageArticleInfo]] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[not]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Long,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  LEX[List] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  RETURN PARENTHESESSTART TYPE[SelectionRange] PARENTHESESEND
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] VAR[java.lang.String] OP[sum] PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.HashMap,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.util.ArrayList]] +++$+++  OP[greaterThan] VAR[java.util.ArrayList] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[ImageReader] VAR[javax.imageio.ImageReader] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.CharSequence]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuilder] PARENTHESESSTART
CALL[java.lang.StringBuilder,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[javax.swing.JCheckBox,setSelected,1,void] PARA[VAR[BOOLEAN]] +++$+++  VAR[java.awt.event.ItemListener] PARENTHESESEND EOL CURLYEND
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  LEX[_textSelectedContent.setText] PARENTHESESSTART VAR[java.lang.String] OP[sum]
CALL[javax.swing.JTextArea,getText,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[javax.swing.JTextArea,setText,1,void] PARA[CALL[java.lang.String,replaceAll]] +++$+++  LEX[_textWebSeeds.getText] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JRadioButton,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Object,notify,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,getCellEditor,0,javax.swing.table.TableCellEditor] +++$+++  EOL TYPE[TableCellEditor] VAR[javax.swing.table.TableCellEditor] OP[assign]
CALL[javax.swing.JTable,getCellRect,3,java.awt.Rectangle] PARA[VAR[INT]] PARA[VAR[INT]] PARA[LIT[Boolean]] +++$+++  PARENTHESESEND CURLYSTART LEX[detailsTable.scrollRectToVisible] PARENTHESESSTART
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,reset,0,void] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[java.awt.geom.Path2D,moveTo,2,void] PARA[VAR[DOUBLE]] PARA[LIT[Integer]] +++$+++  LEX[path.reset] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,reset,0,void] +++$+++  VAR[INT] OP[sum] VAR[INT] EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  COMMA VAR[INT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  COMMA VAR[FLOAT] PARENTHESESEND EOL
CALL[java.awt.geom.Path2D,reset,0,void] +++$+++  VAR[INT] OP[sum] VAR[INT] EOL
CALL[javax.swing.JTextField,getBorder,0,javax.swing.border.Border] +++$+++  CURLYSTART TYPE[Border] VAR[javax.swing.border.Border] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.plaf.TextUI,getAccessibleChild,2,javax.accessibility.Accessible] PARA[VAR[javax.swing.JComponent]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JTextField,getClientProperty,1,java.lang.Object] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[Insets] PARENTHESESEND
CALL[javax.swing.JTextField,putClientProperty,2,void] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[java.util.Map,get,1,V] PARA[VAR[com.frostwire.gui.library.HistoHashMap.K]] +++$+++  CURLYSTART VAR[INT] OP[assign] OP[sum]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setText,1,void] PARA[VAR[java.lang.String]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.List,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Set,addAll,1,boolean] PARA[VAR[java.util.Set]] +++$+++  LEX[deselected.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[javax.swing.JDialog,dispose,0,void] +++$+++  PARENTHESESSTART LEX[false] PARENTHESESEND EOL
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,hashCode,0,int] +++$+++  VAR[java.lang.String] EOL VAR[INT] OP[assign]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[sum] EOL IF PARENTHESESSTART
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  LEX[IOException] CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  OP[assign] VAR[INT] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  RETURN NEW TYPE[Token] PARENTHESESSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Set,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[String] ARRAYSTART
CALL[java.lang.Class,newInstance,0,T] +++$+++  OP[assign] PARENTHESESSTART TYPE[LookAndFeel] PARENTHESESEND
CALL[javax.swing.LookAndFeel,initialize,0,void] +++$+++  LEX[clazz.newInstance] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTree,expandPath,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JTree,scrollPathToVisible,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART VAR[javax.swing.tree.TreePath] PARENTHESESEND EOL
CALL[javax.swing.JTree,scrollPathToVisible,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  CURLYEND CURLYEND CURLYEND RETURN
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createHorizontalStrut]] +++$+++  PARENTHESESSTART LEX[BoxPanel.X_AXIS] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[assign] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.Icon]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[javax.swing.Icon]] +++$+++  OP[assign] OP[assign] NULL PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[f.getAbsolutePath] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[sum] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[command.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JRadioButton,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JLabel,addMouseListener,1,void] PARA[VAR[java.awt.event.MouseAdapter]] +++$+++  PARENTHESESSTART VAR[java.awt.event.MouseAdapter] PARENTHESESEND EOL
CALL[java.awt.datatransfer.Transferable,getTransferDataFlavors,0,java.awt.datatransfer.DataFlavor[]] +++$+++  LEX[flavors.addAll] PARENTHESESSTART LEX[Arrays.asList] PARENTHESESSTART
CALL[java.util.List,addAll,1,boolean] PARA[CALL[null,asList]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JWindow,isShowing,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.JWindow,toBack,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.net.NetworkInterface,isUp,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  EOL CURLYEND WHILE PARENTHESESSTART
CALL[javax.swing.JTable,isEditing,0,boolean] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[javax.swing.Icon,getIconWidth,0,int] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.awt.datatransfer.Clipboard,getContents,1,java.awt.datatransfer.Transferable] PARA[VAR[java.lang.Object]] +++$+++  TRY CURLYSTART VAR[java.awt.datatransfer.Transferable] OP[assign]
CALL[javax.swing.table.TableCellRenderer,getTableCellRendererComponent,6,java.awt.Component] PARA[VAR[javax.swing.JTable]] PARA[VAR[java.lang.Object]] PARA[VAR[BOOLEAN]] PARA[LIT[Boolean]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.awt.Graphics,fillRect,4,void] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  OP[assign] VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JComponent]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[java.awt.FontMetrics,stringWidth,1,int] PARA[CALL[javax.swing.JLabel,getText]] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[javax.swing.JComponent,getInputMap,1,javax.swing.InputMap] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[InputMap] VAR[javax.swing.InputMap] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[javax.swing.event.ListDataListener,intervalRemoved,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.Vector,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.awt.event.MouseEvent,getModifiers,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[javax.swing.JTable,setAutoResizeMode,1,void] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[not] OP[assign] PARENTHESESEND
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  NULL EOL ELSE RETURN
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] VAR[INT] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[INT] OP[assign]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[greaterThan] VAR[java.lang.Integer] PARENTHESESEND
CALL[java.util.TreeSet,last,0,E] +++$+++  OP[greaterThan] VAR[INT] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] NEW INT ARRAYSTART
CALL[java.io.PrintWriter,flush,0,void] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,interrupt,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.Throwable,printStackTrace,1,void] PARA[VAR[java.io.PrintWriter]] +++$+++  VAR[java.io.ByteArrayOutputStream] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  LEX[str1.length] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Stack,isEmpty,0,boolean] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] OP[assign] LEX[Integer.parseInt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  WHILE PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.nio.charset.CoderResult,throwException,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.File,delete,0,boolean] +++$+++  OP[sum] VAR[java.io.File] PARENTHESESEND EOL
CALL[java.io.File,exists,0,boolean] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.util.StringTokenizer,nextToken,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.List,isEmpty,0,boolean] +++$+++  VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.util.Iterator,next]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  OP[not] OP[assign] NULL OP[ternaryTrue]
CALL[java.lang.Long,longValue,0,long] +++$+++  EOL LONG VAR[LONG] OP[assign]
CALL[java.io.FileOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.zip.ZipInputStream,getNextEntry,0,java.util.zip.ZipEntry] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[java.util.zip.ZipEntry] OP[assign]
CALL[java.util.zip.ZipFile,size,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  LEX[Locale.US] PARENTHESESEND EOL RETURN
CALL[java.util.List,isEmpty,0,boolean] +++$+++  VAR[BOOLEAN] OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] EOL ELSE RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  PARENTHESESEND EOL LEX[sb.append] PARENTHESESSTART
CALL[java.util.concurrent.atomic.AtomicInteger,getAndIncrement,0,int] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[sum] OP[sum]
CALL[java.util.Map,get,1,V] PARA[CALL[java.lang.String,substring]] +++$+++  FINAL TYPE[Character] VAR[java.lang.Character] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND CURLYEND CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  LEX[t.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  PARENTHESESSTART CHAR VAR[CHAR] OP[ternaryFalse]
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA PARENTHESESEND EOL
CALL[java.util.logging.Logger,logp,4,void] PARA[VAR[java.util.logging.Level]] PARA[VAR[java.lang.String]] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[CHAR] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,setLength,1,void] PARA[LIT[Integer]] +++$+++  LEX[free] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[lessThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[lessThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,flip,0,java.nio.Buffer] +++$+++  CURLYEND CURLYEND CURLYEND CURLYEND
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[SearchTask] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[BoxLambda] VAR[com.frostwire.mp4.Box.BoxLambda] OP[assign]
CALL[org.apache.commons.lang3.ArrayUtils.clone(T[]).T,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[LONG,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[CHAR,clone,0,java.lang.Object] +++$+++  NULL EOL CURLYEND RETURN
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[java.lang.CharSequence] COMMA VAR[INT] OP[sub]
CALL[java.lang.CharSequence,length,0,int] +++$+++  COMMA VAR[java.lang.CharSequence] COMMA COMMA
CALL[java.lang.CharSequence,length,0,int] +++$+++  VAR[java.lang.CharSequence] COMMA VAR[java.lang.CharSequence] COMMA
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[greaterThan]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] EOL CURLYEND RETURN
CALL[java.lang.String,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART LEX[list.add] PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[CALL[java.lang.String,charAt]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.lang.CharSequence,length,0,int] +++$+++  OP[bitwiseAnd] OP[bitwiseAnd] VAR[INT] OP[lessThan]
CALL[java.util.Collection,size,0,int] +++$+++  PARENTHESESSTART NEW TYPE[File] ARRAYSTART
CALL[java.io.File,exists,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[java.net.Socket,close,0,void] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[CALL[java.lang.Object,toString]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND OP[ternaryFalse]
CALL[java.io.Writer,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  VAR[INT] PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.LinkedList,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[l.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[sum] PARENTHESESEND EOL RETURN
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  LEX[resetValues.put] PARENTHESESSTART VAR[java.lang.String] COMMA
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  LEX[values.put] PARENTHESESSTART LEX[MediaColumns.DATA] COMMA
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Stirng]] +++$+++  OP[sub] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  CURLYSTART TRY CURLYSTART RETURN
CALL[java.lang.Class,isArray,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.Class,getComponentType,0,java.lang.Class<? extends java.lang.Object>] +++$+++  CURLYSTART TYPE[Class] VAR[java.lang.Class] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Class]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Coercion] PARENTHESESEND
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.Class]] PARA[VAR[org.luaj.vm2.lib.jse.CoerceJavaToLua.Coercion]] +++$+++  VAR[org.luaj.vm2.lib.jse.CoerceJavaToLua.Coercion] OP[ternaryFalse] VAR[org.luaj.vm2.lib.jse.CoerceJavaToLua.Coercion] EOL
CALL[java.lang.Thread,join,0,void] +++$+++  OP[not] OP[assign] NULL PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART OP[sum] LEX[s.substring] PARENTHESESSTART
CALL[java.lang.Throwable,getMessage,0,java.lang.String] +++$+++  THROW NEW TYPE[Error] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  CONTINUE EOL CASE OP[ternaryFalse]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  EOL ELSE IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[java.lang.Object,toString]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[CALL[null,toString]] +++$+++  DOUBLE VAR[DOUBLE] PARENTHESESEND CURLYSTART
CALL[java.lang.NoSuchMethodException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[assign] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[assign] OP[assign]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[true] EOL IF PARENTHESESSTART
CALL[java.awt.Window,getY,0,int] +++$+++  OP[sum] LEX[bottom.getWidth] PARENTHESESSTART PARENTHESESEND
CALL[java.io.FileOutputStream,close,0,void] +++$+++  LEX[inStream.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.ArrayList,iterator,0,java.util.Iterator<E>] +++$+++  CURLYSTART TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JCheckBox]] +++$+++  COMMA PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[CALL[null,createGlue]] +++$+++  PARENTHESESSTART VAR[javax.swing.JCheckBox] PARENTHESESEND EOL
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Biomarker] PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[ca.spaz.cron.metrics.Biomarker]] +++$+++  LEX[biomarker.setMin] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[ca.spaz.cron.metrics.Biomarker]] +++$+++  LEX[biomarker.setMin] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] PARENTHESESEND CURLYSTART RETURN
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[javax.swing.JEditorPane,setCaretPosition,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART TRY CURLYSTART
CALL[java.awt.Rectangle,union,1,java.awt.Rectangle] PARA[VAR[java.awt.Rectangle]] +++$+++  NULL PARENTHESESEND VAR[java.awt.Rectangle] OP[assign]
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createCompoundBorder]] +++$+++  PARENTHESESSTART LEX[Color.LIGHT_GRAY] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  BOOLEAN VAR[BOOLEAN] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESSTART PARENTHESESEND EOL RETURN
CALL[java.lang.String,indexOf,1,int] PARA[FIELD[RiverLayout]] +++$+++  OP[not] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.awt.Container,getTreeLock,0,java.lang.Object] +++$+++  PARENTHESESEND CURLYSTART SYNCHRONIZED PARENTHESESSTART
CALL[java.util.Properties,getProperty,2,java.lang.String] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.TreeSet,contains,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPasswordField,requestFocusInWindow,0,boolean] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[javax.swing.JPasswordField,requestFocusInWindow,0,boolean] +++$+++  LEX[WindowEvent] LEX[e] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART LEX[portMapping] PARENTHESESEND
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART LEX[navigationListener] PARENTHESESEND
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Number] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYEND TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[List] PARENTHESESEND
CALL[java.util.Set,equals,1,boolean] PARA[VAR[java.util.Set]] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.InputStream,read,3,int] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.InputStream,skip,1,long] PARA[VAR[LONG]] +++$+++  EOL CURLYEND RETURN PARENTHESESSTART
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  RETURN PARENTHESESSTART LEX[supported_extensions.contains] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.util.Map,size,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.io.InputStream,skip,1,long] PARA[VAR[LONG]] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  OP[greaterThan] VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  EOL CURLYEND LEX[res.append] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[java.lang.Object,toString]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.net.Socket,getInputStream,0,java.io.InputStream] +++$+++  CURLYSTART TYPE[InputStream] VAR[java.io.InputStream] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL RETURN PARENTHESESSTART
CALL[java.util.LinkedList,getFirst,0,E] +++$+++  PARENTHESESSTART PARENTHESESEND OP[assign] OP[assign]
CALL[java.util.LinkedList,size,0,int] +++$+++  PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr] PARENTHESESSTART
CALL[java.util.LinkedList,getFirst,0,E] +++$+++  OP[assign] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.LinkedList,add,1,boolean] PARA[VAR[com.aelitis.azureus.core.content.RelatedContentManager.DownloadInfo]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART COMMA LEX[ByteFormatter.decodeString] PARENTHESESSTART
CALL[java.io.DataOutputStream,writeByte,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[java.io.ByteArrayOutputStream] PARENTHESESEND EOL
CALL[java.io.DataOutputStream,writeInt,1,void] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[java.lang.Throwable,toString,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART LEX[SpeedManagerLogger.log] PARENTHESESSTART
CALL[java.io.InputStream,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.io.InputStream,available,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.InputStream,read,1,int] PARA[VAR[BYTE]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[MessageCompletionListener] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[assign] PARENTHESESSTART TYPE[String] PARENTHESESEND
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] OP[assign] LEX[Base32.encode] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.util.Set,contains,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  ARRAYEND ARRAYSTART ARRAYEND EOL
CALL[java.util.Map,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  PARENTHESESEND CURLYSTART LEX[handshake.put] PARENTHESESSTART
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  PARENTHESESEND EOL LEX[handshake.put] PARENTHESESSTART
CALL[java.nio.ByteBuffer,get,0,byte] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.util.Map,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.Map,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  PARENTHESESSTART VAR[BOOLEAN] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART TYPE[UDPPacket] PARENTHESESEND
CALL[java.nio.ByteBuffer,position,1,java.nio.Buffer] PARA[LIT[Integer]] +++$+++  LEX[buffer.position] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[java.nio.ByteBuffer]] +++$+++  PARENTHESESEND OP[assign] OP[assign] EOL
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  OP[sum] OP[assign] VAR[INT] OP[sub]
CALL[java.lang.String,getBytes,0,byte[]] +++$+++  TYPE[Message] PARENTHESESEND LEX[message_map.get] PARENTHESESSTART
CALL[java.util.LinkedList,size,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.ArrayList,size,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[greaterThan] OP[assign]
CALL[java.util.ArrayList,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART RETURN OP[not]
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  FINAL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[LIT[Integer]] +++$+++  OP[assign] OP[bitwiseAnd] OP[bitwiseAnd] PARENTHESESSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CONTINUE EOL RETURN
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,contains,1,boolean] PARA[VAR[com.aelitis.azureus.ui.common.table.impl.DataSourceCallBackUtil.addDataSourceCallback]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.util.List,get,1,E] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART LEX[addDataSourceCallback] PARENTHESESEND
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  LEX[items.add] PARENTHESESSTART VAR[INT] COMMA
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL WHILE PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.StringTokenizer,nextToken]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  IF PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  VAR[INT] OP[assign] PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] PARENTHESESSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  LEX[res.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL RETURN
CALL[java.io.File,renameTo,1,boolean] PARA[VAR[java.io.File]] +++$+++  LEX[file.delete] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.Throwable,printStackTrace,0,void] +++$+++  TYPE[Throwable] VAR[java.lang.Throwable] PARENTHESESEND CURLYSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.Class,newInstance,0,T] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[bitwiseOr] OP[bitwiseOr] OP[not]
CALL[java.io.File,isDirectory,0,boolean] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  NULL PARENTHESESEND VAR[java.lang.String] OP[assign]
CALL[java.util.List,toArray,0,java.lang.Object[]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.Object] OP[assign]
CALL[java.util.Stack,pop,0,E] +++$+++  RETURN PARENTHESESSTART TYPE[IProgressReporter] PARENTHESESEND
CALL[java.io.File,lastModified,0,long] +++$+++  PARENTHESESEND EOL LEX[entry.setTime] PARENTHESESSTART
CALL[java.io.IOException,printStackTrace,0,void] +++$+++  TYPE[IOException] VAR[java.io.IOException] PARENTHESESEND CURLYSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART LEX[false] OP[assign] OP[assign]
CALL[java.lang.Exception,printStackTrace,0,void] +++$+++  TYPE[Exception] VAR[java.lang.Exception] PARENTHESESEND CURLYSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[null,toHexString]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.util.Comparator,compare,2,int] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.io.PrintStream,println,1,void] PARA[VAR[java.lang.StringBuffer]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  EOL TYPE[Iterator] VAR[java.util.Iterator] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.util.List,get]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[allowedHosts.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.File,equals,1,boolean] PARA[CALL[java.io.File,getParentFile]] +++$+++  EOL RETURN PARENTHESESSTART OP[not]
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,setPriority,1,void] PARA[VAR[INT]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,interrupt,0,void] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[org.gudy.azureus2.core3.util.AEThread2.threadWrapper,toString,0,java.lang.String] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.io.File,getAbsolutePath,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.nio.ByteBuffer,clear,0,java.nio.Buffer] +++$+++  EOL VAR[LONG] OP[assign] EOL
CALL[java.nio.ByteBuffer,rewind,0,java.nio.Buffer] +++$+++  LEX[finalBuffer.position] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,flip,0,java.nio.Buffer] +++$+++  PARENTHESESSTART VAR[java.nio.ByteBuffer] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] PARENTHESESSTART TYPE[Integer] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  PARENTHESESEND VAR[java.lang.String] OP[sum] OP[assign]
CALL[java.lang.StringBuffer,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.Random,nextBoolean,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Random,nextBytes,1,void] PARA[VAR[BYTE]] +++$+++  BYTE ARRAYSTART ARRAYEND EOL
CALL[java.io.File,lastModified,0,long] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  LEX[str1.length] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  ARRAYEND EOL IF PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,trim,0,java.lang.String] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  EOL CURLYEND VAR[INT] OP[assign]
CALL[java.net.URL,getPath,0,java.lang.String] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.net.URL,getRef,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[result.append] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.net.URL,getProtocol]] +++$+++  TYPE[StringBuffer] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND OP[greaterThan] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[java.lang.String]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.net.URL,getQuery]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.net.URL,toExternalForm,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.net.InetAddress,getHostAddress,0,java.lang.String] +++$+++  LEX[UrlUtils.setHost] PARENTHESESSTART VAR[java.net.URL] COMMA
CALL[java.net.URLConnection,getContentLength,0,int] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.util.concurrent.locks.ReentrantLock,lock,0,void] +++$+++  LEX[enter] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL IF PARENTHESESSTART OP[not]
CALL[java.lang.String,length,0,int] +++$+++  LEX[temp_app_path.length] PARENTHESESSTART PARENTHESESEND OP[sub]
CALL[java.io.File,canWrite,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.concurrent.ConcurrentHashMap,put,2,V] PARA[VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.S]] PARA[VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.T]] +++$+++  CURLYEND TYPE[T] VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.T] OP[assign]
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  EOL TYPE[T] VAR[org.gudy.azureus2.core3.util.ConcurrentHashMapWrapper.T] OP[assign]
CALL[java.net.InetAddress,getAddress,0,byte[]] +++$+++  ARRAYSTART ARRAYEND VAR[BYTE] OP[assign]
CALL[java.io.File,delete,0,boolean] +++$+++  ELSE CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuffer,length,0,int] +++$+++  OP[greaterThan] OP[assign] OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.List,remove,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.SystemTime.TickConsumer]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.azureus2.core3.util.SystemTime.TickConsumer]] +++$+++  PARENTHESESSTART VAR[java.util.List] PARENTHESESEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Stack,peek,0,E] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,startsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.util.Map,clear,0,void] +++$+++  VAR[BOOLEAN] OP[assign] LEX[true] EOL
CALL[java.util.Map,putAll,1,void] PARA[VAR[java.util.Map]] +++$+++  PARENTHESESEND OP[sum] PARENTHESESEND EOL
CALL[java.util.List,size,0,int] +++$+++  NULL OP[ternaryTrue] OP[ternaryFalse] OP[sum]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND CURLYEND IF PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Set,contains,1,boolean] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] PARENTHESESSTART BYTE PARENTHESESEND
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART RETURN PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.net.URL,getPort,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sum] OP[sum]
CALL[java.util.Map,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] NULL OP[bitwiseAnd] OP[bitwiseAnd]
CALL[java.lang.Class,isInstance,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[org.gudy.bouncycastle.jce.provider.PKIXPolicyNode]] +++$+++  LEX[PKIXPolicyNode] VAR[org.gudy.bouncycastle.jce.provider.PKIXPolicyNode] PARENTHESESEND CURLYSTART
CALL[java.util.List,iterator,0,java.util.Iterator<E>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.io.ByteArrayOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  ARRAYSTART PARENTHESESSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] PARENTHESESSTART PARENTHESESSTART PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,length,0,int] +++$+++  VAR[BYTE] ARRAYSTART LEX[data.charAt] PARENTHESESSTART
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.lang.String,toCharArray,0,char[]] +++$+++  ARRAYSTART ARRAYEND VAR[CHAR] OP[assign]
CALL[java.io.InputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  EOL CURLYEND VAR[java.lang.String] OP[assign]
CALL[java.math.BigInteger,bitLength,0,int] +++$+++  OP[assign] LEX[Math.min] PARENTHESESSTART COMMA
CALL[java.math.BigInteger,mod,1,java.math.BigInteger] PARA[VAR[java.math.BigInteger]] +++$+++  TYPE[CryptoException] CURLYSTART VAR[java.math.BigInteger] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CHAR VAR[CHAR] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  OP[sum] OP[sum] PARENTHESESEND CURLYSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  LEX[Character.isDigit] PARENTHESESSTART VAR[CHAR] OP[assign]
CALL[java.io.File,setLastModified,1,boolean] PARA[CALL[null,max]] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseMotionListener,mouseMoved,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseMotionListener,mouseDragged,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseListener,mouseReleased,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseListener,mouseEntered,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseMotionListener,mouseDragged,1,void] PARA[CALL[null,convertMouseEvent]] +++$+++  LEX[MouseEvent] VAR[java.awt.event.MouseEvent] PARENTHESESEND CURLYSTART
CALL[javax.swing.text.JTextComponent,selectAll,0,void] +++$+++  LEX[run] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[not] OP[assign]
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[javax.swing.JSlider,getMinimum,0,int] +++$+++  LEX[qualitySlider.setValue] PARENTHESESSTART LEX[Math.max] PARENTHESESSTART
CALL[java.io.File,lastModified,0,long] +++$+++  LEX[f1.lastModified] PARENTHESESSTART PARENTHESESEND OP[lessThan]
CALL[java.awt.geom.GeneralPath,lineTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  COMMA VAR[FLOAT] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  COMMA VAR[FLOAT] PARENTHESESEND EOL
CALL[java.awt.geom.GeneralPath,moveTo,2,void] PARA[VAR[FLOAT]] PARA[VAR[FLOAT]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.awt.geom.GeneralPath,closePath,0,void] +++$+++  EOL CASE LEX[PathIterator.SEG_CLOSE] OP[ternaryFalse]
CALL[javax.swing.JToolBar,repaint,0,void] +++$+++  LEX[WindowEvent] LEX[ev] PARENTHESESEND CURLYSTART
CALL[java.util.Iterator,next,0,E] +++$+++  TYPE[Baseboard] OP[greaterThan] VAR[java.lang.ref.WeakReference] OP[assign]
CALL[java.util.Enumeration,hasMoreElements,0,boolean] +++$+++  LEX[remove.keys] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Vector,elementAt,1,E] PARA[VAR[INT]] +++$+++  FINAL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.io.BufferedInputStream,read,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.io.File,length,0,long] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.util.Map,clear,0,void] +++$+++  LEX[createColourHashTable] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  LEX[nameColourHashtable.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.awt.Color]] +++$+++  COMMA VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  LEX[nameColourHT.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,put,2,V] PARA[VAR[java.awt.Color]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[Color] VAR[java.awt.Color] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,toLowerCase,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[buf.append] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[VAR[CHAR]] +++$+++  OP[lessThan] OP[assign] LEX[x007e] PARENTHESESEND
CALL[java.util.ArrayList,size,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[sub] PARENTHESESEND
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Runnable]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,indexOf,2,int] PARA[VAR[CHAR]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART VAR[INT] ARRAYEND EOL
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NEW TYPE[StringBuffer] PARENTHESESSTART
CALL[java.util.Properties,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  EOL CURLYEND FINALLY CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  CURLYSTART CHAR VAR[CHAR] OP[assign]
CALL[javax.swing.JPanel,removeAll,0,void] +++$+++  PARENTHESESSTART VAR[javax.swing.JPanel] PARENTHESESEND EOL
CALL[java.util.ArrayList,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.ButtonGroup,add,1,void] PARA[VAR[javax.swing.JRadioButton]] +++$+++  PARENTHESESSTART VAR[javax.swing.JRadioButton] PARENTHESESEND EOL
CALL[javax.swing.JComponent,repaint,0,void] +++$+++  VAR[BOOLEAN] OP[assign] LEX[false] EOL
CALL[java.io.File,canWrite,0,boolean] +++$+++  CURLYEND IF PARENTHESESSTART OP[not]
CALL[javax.swing.JInternalFrame,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  LEX[false] PARENTHESESEND EOL CURLYEND
CALL[javax.swing.JButton,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.border.Border,isBorderOpaque,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,clear,0,void] +++$+++  LEX[clear] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.awt.Point]] +++$+++  EOL TYPE[Color] VAR[java.awt.Color] OP[assign]
CALL[java.awt.Component,getBackground,0,java.awt.Color] +++$+++  PARENTHESESSTART VAR[java.awt.Point] PARENTHESESEND COMMA
CALL[java.util.HashSet,clear,0,void] +++$+++  VAR[java.awt.Point] OP[assign] NULL EOL
CALL[java.awt.event.MouseEvent,getComponent,0,java.awt.Component] +++$+++  PARENTHESESEND CURLYSTART LEX[_textPopupMenu.show] PARENTHESESSTART
CALL[java.awt.event.MouseEvent,getX,0,int] +++$+++  LEX[evt.getComponent] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART VAR[INT] OP[lessThan]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[INT]] +++$+++  LEX[result.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN NULL EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[bitwiseAnd] VAR[INT] OP[not] OP[assign]
CALL[java.sql.SQLException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[s_log.debug] PARENTHESESSTART OP[sum]
CALL[javax.swing.RepaintManager,setDoubleBufferingEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART VAR[java.awt.Component] PARENTHESESEND EOL
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createTitledBorder]] +++$+++  TYPE[JPanel] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[IllegalArgumentException] CURLYSTART LEX[config.setHeaderCell] PARENTHESESSTART
CALL[javax.swing.JTextField,getText,0,java.lang.String] +++$+++  LEX[IllegalArgumentException] CURLYSTART LEX[config.setRowEndTag] PARENTHESESSTART
CALL[javax.swing.JComboBox,addActionListener,1,void] PARA[VAR[java.awt.event.ActionListener]] +++$+++  LEX[ActionListener] VAR[java.awt.event.ActionListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JLabel,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  LEX[_socksUseProxyChk.isSelected] PARENTHESESSTART PARENTHESESEND EOL
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JTextField,setEnabled,1,void] PARA[VAR[BOOLEAN]] +++$+++  PARENTHESESSTART VAR[BOOLEAN] PARENTHESESEND EOL
CALL[javax.swing.JTabbedPane,getTabCount,0,int] +++$+++  PARENTHESESSTART VAR[java.awt.Point] PARENTHESESEND OP[ternaryTrue]
CALL[java.awt.Component,getBounds,0,java.awt.Rectangle] +++$+++  TYPE[Rectangle] PARENTHESESSTART PARENTHESESEND OP[ternaryFalse]
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JButton]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  PARENTHESESEND PARENTHESESEND EOL CURLYEND
CALL[java.io.File,delete,0,boolean] +++$+++  PARENTHESESEND EOL TRY CURLYSTART
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[IllegalStateException] PARENTHESESSTART OP[sum]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  TRY CURLYSTART LEX[_cache.load] PARENTHESESSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JSpinner]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  EOL FIELD[weightx,java.awt.GridBagConstraints] OP[assign] EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[javax.swing.JButton,setEnabled,1,void] PARA[LIT[Boolean]] +++$+++  VAR[java.awt.Color] OP[assign] VAR[java.awt.Color] EOL
CALL[javax.swing.JPanel,setBackground,1,void] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[javax.swing.JPanel,setBackground,1,void] PARA[VAR[java.awt.Color]] +++$+++  PARENTHESESSTART LEX[true] PARENTHESESEND EOL
CALL[java.lang.String,compareTo,1,int] PARA[FIELD[net.sourceforge.squirrel_sql.client.gui.db.SQLAliasSchemaDetailProperties]] +++$+++  VAR[net.sourceforge.squirrel_sql.client.gui.db.SQLAliasSchemaDetailProperties] PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.io.File]] +++$+++  PARENTHESESSTART VAR[java.net.URI] PARENTHESESEND EOL
CALL[javax.swing.JCheckBoxMenuItem,setSelected,1,void] PARA[LIT[Boolean]] +++$+++  LEX[onChkMnuShowFilePath] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.net.URL,toString,0,java.lang.String] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYEND TYPE[DefaultMutableTreeNode] VAR[javax.swing.tree.DefaultMutableTreeNode] OP[assign]
CALL[javax.swing.JTree,scrollPathToVisible,1,void] PARA[VAR[javax.swing.tree.TreePath]] +++$+++  PARENTHESESSTART VAR[javax.swing.tree.TreePath] PARENTHESESEND EOL
CALL[javax.swing.JTabbedPane,getSelectedIndex,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JComboBox,getSelectedItem,0,java.lang.Object] +++$+++  PARENTHESESSTART VAR[java.lang.String] OP[assign] OP[assign]
CALL[javax.swing.JComboBox,setSelectedItem,1,void] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[javax.swing.JPanel,add,2,void] PARA[VAR[javax.swing.JCheckBox]] PARA[VAR[java.awt.GridBagConstraints]] +++$+++  COMMA COMMA PARENTHESESEND EOL
CALL[java.util.SortedSet,toArray,0,java.lang.Object[]] +++$+++  EOL CURLYEND LEX[useColsList.setListData] PARENTHESESSTART
CALL[javax.swing.JList,setListData,1,void] PARA[CALL[java.util.SortedSet,toArray]] +++$+++  VAR[java.lang.String] PARENTHESESEND EOL CURLYEND
CALL[java.util.ArrayList,add,1,boolean] PARA[CALL[java.lang.Object,toString]] +++$+++  VAR[java.lang.Object] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[javax.swing.JList,setListData,1,void] PARA[CALL[java.util.ArrayList,toArray]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JCheckBox,isSelected,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.HashMap,remove,1,V] PARA[VAR[java.lang.String]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.util.HashMap,get,1,V] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[ret.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[javax.swing.JTabbedPane,getSelectedIndex,0,int] +++$+++  LEX[tab] OP[assign] LEX[_tabs.get] PARENTHESESSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Stirng]] +++$+++  OP[assign] LEX[path.substring] PARENTHESESSTART COMMA
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Stirng]] +++$+++  VAR[java.lang.String] EOL IF PARENTHESESSTART
CALL[javax.swing.JPanel,setBorder,1,void] PARA[CALL[null,createEmptyBorder]] +++$+++  PARENTHESESSTART VAR[javax.swing.JPanel] PARENTHESESEND EOL
CALL[javax.swing.JPanel,add,1,java.awt.Component] PARA[VAR[javax.swing.JScrollPane]] +++$+++  PARENTHESESSTART VAR[javax.swing.JTextPane] PARENTHESESEND EOL
CALL[net.sourceforge.squirrel_sql.client.session.mainpanel.ErrorPanel.TabButton,setVisible,1,void] PARA[LIT[Boolean]] +++$+++  LEX[hideCloseButton] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.awt.event.MouseEvent,isPopupTrigger,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.ArrayList,get,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND COMMA
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  IF PARENTHESESSTART OP[assign] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] OP[assign] VAR[INT] OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND OP[greaterThan] VAR[INT] OP[sum]
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  OP[assign] OP[assign] LEX[Character.isWhitespace] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESSTART VAR[INT] OP[sum] OP[lessThan]
CALL[java.lang.management.ThreadMXBean,getAllThreadIds,0,long[]] +++$+++  VAR[java.lang.management.ThreadInfo] OP[assign] LEX[threadMXBean.getThreadInfo] PARENTHESESSTART
CALL[java.io.Closeable,close,0,void] +++$+++  NULL PARENTHESESEND TRY CURLYSTART
CALL[java.lang.String,lastIndexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,1,java.lang.String] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  LEX[Object] VAR[java.lang.Object] PARENTHESESEND CURLYSTART
CALL[java.util.Map,clear,0,void] +++$+++  LEX[resultList.clear] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.prefs.Preferences,putInt,2,void] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  LEX[store] PARENTHESESSTART PARENTHESESEND CURLYSTART
CALL[java.util.prefs.Preferences,putInt,2,void] PARA[LIT[Stirng]] PARA[VAR[INT]] +++$+++  COMMA VAR[BOOLEAN] PARENTHESESEND EOL
CALL[java.util.prefs.Preferences,put,2,void] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.util.prefs.Preferences,put,2,void] PARA[LIT[Stirng]] PARA[VAR[java.lang.String]] +++$+++  COMMA VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.lang.StackTraceElement,getClassName,0,java.lang.String] +++$+++  EOL RETURN LEX[Logger.getLogger] PARENTHESESSTART
CALL[java.lang.String,indexOf,2,int] PARA[VAR[java.lang.String]] PARA[VAR[INT]] +++$+++  PARENTHESESEND CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  VAR[java.lang.String] OP[assign] LEX[valReturn.concat] PARENTHESESSTART
CALL[java.lang.String,concat,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.List,clear,0,void] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.String,substring,2,java.lang.String] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  ARRAYEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  CURLYEND CURLYEND ELSE CURLYSTART
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  RETURN NEW TYPE[PyString] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.lang.String,substring]] +++$+++  VAR[INT] PARENTHESESEND EOL CURLYEND
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  CURLYSTART LONG VAR[LONG] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[org.python.util.Generic.list(U...).T]] +++$+++  OP[ternaryFalse] VAR[org.python.util.Generic.list(U...).U] PARENTHESESEND CURLYSTART
CALL[java.nio.ByteBuffer,remaining,0,int] +++$+++  OP[assign] OP[assign] OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.InputStream,close,0,void] +++$+++  FINALLY CURLYSTART TRY CURLYSTART
CALL[java.io.InputStream,read,0,int] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.math.BigDecimal,doubleValue,0,double] +++$+++  LEX[RoundingMode.HALF_UP] PARENTHESESEND EOL RETURN
CALL[java.util.ArrayList,add,1,boolean] PARA[VAR[INT]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.Object,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.IllegalArgumentException,getMessage,0,java.lang.String] +++$+++  CURLYSTART THROW LEX[Py.ValueError] PARENTHESESSTART
CALL[java.lang.ThreadLocal,get,0,T] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[java.lang.String,regionMatches,4,boolean] PARA[LIT[Integer]] PARA[CALL[java.io.File,getName]] PARA[LIT[Integer]] PARA[CALL[java.lang.String,length]] +++$+++  EOL BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  EOL INT VAR[INT] OP[assign]
CALL[java.util.List,size,0,int] +++$+++  CURLYEND BOOLEAN VAR[BOOLEAN] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[VAR[org.python.core.BytecodeNotification.Callback]] +++$+++  LEX[Callback] VAR[org.python.core.BytecodeNotification.Callback] PARENTHESESEND CURLYSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] LEX[s.substring] PARENTHESESSTART COMMA
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  EOL CURLYEND IF PARENTHESESSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,format]] +++$+++  TYPE[StringBuilder] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[java.lang.String]] +++$+++  STRING VAR[java.lang.String] PARENTHESESEND CURLYSTART
CALL[java.io.PrintWriter,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.io.InputStream,close,0,void] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.util.Set,contains,1,boolean] PARA[THIS[null]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.python.indexer.Def]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[org.python.indexer.Ref]] +++$+++  CURLYSTART IF PARENTHESESSTART OP[not]
CALL[java.lang.String,equals,1,boolean] PARA[VAR[java.lang.String]] +++$+++  VAR[java.lang.String] PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.util.List,add,1,boolean] PARA[LIT[Stirng]] +++$+++  LEX[coreLibFiles.add] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,replace,2,java.lang.String] PARA[LIT[Character]] PARA[LIT[Character]] +++$+++  PARENTHESESEND PARENTHESESEND EOL RETURN
CALL[java.io.PipedOutputStream,close,0,void] +++$+++  LEX[_answerReceiverStream.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Option] PARENTHESESEND
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  VAR[INT] EOL CURLYEND RETURN
CALL[java.util.Iterator,next,0,E] +++$+++  OP[assign] PARENTHESESSTART TYPE[Option] PARENTHESESEND
CALL[java.util.Map,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Map,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL LEX[buf.append] PARENTHESESSTART
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[CALL[java.util.Map,toString]] +++$+++  LEX[buf.append] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.io.Reader,read,1,int] PARA[VAR[CHAR]] +++$+++  DO CURLYSTART VAR[INT] OP[assign]
CALL[java.lang.StringBuilder,length,0,int] +++$+++  VAR[INT] OP[assign] VAR[INT] OP[sum]
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[IOException] PARENTHESESSTART OP[sum]
CALL[java.lang.String,length,0,int] +++$+++  VAR[java.lang.String] OP[assign] LEX[fullPath.substring] PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND PARENTHESESEND CURLYSTART RETURN
CALL[java.nio.ByteBuffer,get,3,java.nio.ByteBuffer] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[sub] VAR[INT] PARENTHESESEND EOL
CALL[java.io.File,getPath,0,java.lang.String] +++$+++  NEW TYPE[FileNotFoundException] PARENTHESESSTART OP[sum]
CALL[java.util.regex.Matcher,find,0,boolean] +++$+++  EOL CURLYEND WHILE PARENTHESESSTART
CALL[java.awt.event.ItemEvent,getStateChange,0,int] +++$+++  PARENTHESESSTART LEX[ItemEvent.SELECTED] OP[assign] OP[assign]
CALL[java.util.List,remove,1,boolean] PARA[VAR[javax.swing.event.ListDataListener]] +++$+++  LEX[ListDataListener] VAR[javax.swing.event.ListDataListener] PARENTHESESEND CURLYSTART
CALL[javax.swing.event.ListDataListener,contentsChanged,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[javax.swing.JTable,getSelectedRowCount,0,int] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[javax.swing.JTable,getSelectedRowCount,0,int] +++$+++  PARENTHESESEND EOL VAR[INT] OP[assign]
CALL[javax.swing.text.JTextComponent,setComponentPopupMenu,1,void] PARA[VAR[net.pandoragames.far.ui.swing.component.UndoHistoryPopupMenu]] +++$+++  COMMA VAR[javax.swing.text.JTextComponent] PARENTHESESEND EOL
CALL[java.lang.String,equals,1,boolean] PARA[FIELD[net.pandoragames.far.ui.swing.dialog.FormListEntry]] +++$+++  PARENTHESESEND VAR[java.lang.Object] EOL RETURN
CALL[javax.swing.JMenu,add,1,javax.swing.JMenuItem] PARA[VAR[javax.swing.JMenuItem]] +++$+++  PARENTHESESEND PARENTHESESEND PARENTHESESEND EOL
CALL[javax.swing.JFileChooser,getSelectedFile,0,java.io.File] +++$+++  OP[assign] NEW TYPE[ImportAction] PARENTHESESSTART
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.Object]] +++$+++  VAR[java.lang.Object] PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.util.List,add,2,void] PARA[VAR[INT]] PARA[VAR[java.lang.Object]] +++$+++  INT VAR[INT] PARENTHESESEND CURLYSTART
CALL[javax.swing.event.ListDataListener,contentsChanged,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[javax.swing.event.ListDataListener,intervalRemoved,1,void] PARA[VAR[javax.swing.event.ListDataEvent]] +++$+++  OP[ternaryFalse] VAR[java.util.List] PARENTHESESEND CURLYSTART
CALL[java.util.List,remove,1,E] PARA[VAR[INT]] +++$+++  PARENTHESESEND PARENTHESESEND RETURN EOL
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Properties,containsKey,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Properties,getProperty,1,java.lang.String] PARA[VAR[java.lang.String]] +++$+++  LEX[form.setAddFileInfo] PARENTHESESSTART LEX[Boolean.parseBoolean] PARENTHESESSTART
CALL[java.lang.String,charAt,1,char] PARA[VAR[INT]] +++$+++  ELSE CURLYSTART LEX[cleaned.append] PARENTHESESSTART
CALL[java.util.List,addAll,1,boolean] PARA[VAR[java.util.List]] +++$+++  OP[greaterThan] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.Class,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[org.geoserver.web.data.importer.LayerResource.LayerStatus,compareTo,1,int] PARA[FIELD[org.geoserver.web.data.importer.LayerResource]] +++$+++  OP[assign] PARENTHESESEND CURLYSTART RETURN
CALL[java.lang.Class,equals,1,boolean] PARA[VAR[java.lang.Class]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.lang.String,isEmpty,0,boolean] +++$+++  NULL OP[bitwiseAnd] OP[bitwiseAnd] OP[not]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL PARENTHESESEND OP[ternaryTrue]
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] NULL PARENTHESESEND OP[ternaryTrue]
CALL[java.util.Iterator,next,0,E] +++$+++  CURLYSTART TYPE[File] VAR[java.io.File] OP[assign]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.sql.ResultSet,getInt]] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.awt.Color,getRed,0,int] +++$+++  PARENTHESESSTART LEX[Locale.ENGLISH] COMMA COMMA
CALL[java.lang.Integer,compareTo,1,int] PARA[FIELD[org.geoserver.jdbcconfig.internal.PropertyType]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.Integer,compareTo,1,int] PARA[FIELD[org.geoserver.jdbcconfig.internal.PropertyType]] +++$+++  OP[assign] NULL OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.List,add,1,boolean] PARA[FIELD[EoLayerType]] +++$+++  PARENTHESESSTART LEX[EoLayerType.COVERAGE_OUTLINE] PARENTHESESEND EOL
CALL[java.lang.IllegalArgumentException,getMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[response.sendError] PARENTHESESSTART COMMA
CALL[java.awt.Graphics2D,fillRect,4,void] PARA[LIT[Integer]] PARA[LIT[Integer]] PARA[VAR[INT]] PARA[VAR[INT]] +++$+++  PARENTHESESSTART VAR[java.awt.Color] PARENTHESESEND EOL
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[image.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  LEX[img.getHeight] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  LEX[img.getWidth] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  FINAL TYPE[Graphics2D] VAR[java.awt.Graphics2D] OP[assign]
CALL[java.awt.image.BufferedImage,getHeight,0,int] +++$+++  PARENTHESESEND PARENTHESESSTART LEX[Math.max] PARENTHESESSTART
CALL[java.awt.image.BufferedImage,getWidth,0,int] +++$+++  PARENTHESESSTART INT PARENTHESESEND PARENTHESESSTART
CALL[java.awt.Dimension,getWidth,0,double] +++$+++  LEX[Math.max] PARENTHESESSTART VAR[DOUBLE] COMMA
CALL[java.awt.image.BufferedImage,createGraphics,0,java.awt.Graphics2D] +++$+++  PARENTHESESEND EOL VAR[java.awt.Graphics2D] OP[assign]
CALL[java.lang.String,substring,2,java.lang.String] PARA[LIT[Integer]] PARA[LIT[Integer]] +++$+++  VAR[INT] OP[assign] LEX[Integer.valueOf] PARENTHESESSTART
CALL[java.util.List,get,1,E] PARA[LIT[Integer]] +++$+++  PARENTHESESEND EOL LEX[buff.append] PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.Map,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.Object]] +++$+++  OP[assign] NULL PARENTHESESEND CURLYSTART
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,replaceAll,2,java.lang.String] PARA[LIT[Stirng]] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL VAR[java.lang.String] OP[assign]
CALL[java.lang.String,indexOf,1,int] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART PARENTHESESSTART VAR[INT] OP[assign]
CALL[java.io.BufferedWriter,close,0,void] +++$+++  LEX[from.close] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map.Entry,getValue,0,V] +++$+++  LEX[entry.getKey] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.io.File,mkdirs,0,boolean] +++$+++  PARENTHESESSTART PARENTHESESEND PARENTHESESEND CURLYSTART
CALL[java.io.BufferedOutputStream,write,3,void] PARA[VAR[BYTE]] PARA[LIT[Integer]] PARA[VAR[INT]] +++$+++  OP[not] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.File,exists,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.net.URI,toURL,0,java.net.URL] +++$+++  RETURN NEW TYPE[ResourceAdaptor] PARENTHESESSTART
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] NULL OP[bitwiseOr] OP[bitwiseOr]
CALL[java.io.File,getName,0,java.lang.String] +++$+++  LEX[file.getParentFile] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.io.FileOutputStream,close,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.io.FileOutputStream,flush,0,void] +++$+++  PARENTHESESEND THROWS LEX[IOException] CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[assign]
CALL[java.lang.NoSuchFieldException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.lang.NoSuchMethodException,getMessage,0,java.lang.String] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.io.InputStream,skip,1,long] PARA[VAR[LONG]] +++$+++  OP[assign] VAR[INT] EOL RETURN
CALL[java.lang.String,length,0,int] +++$+++  CURLYEND INT VAR[INT] OP[assign]
CALL[java.io.Writer,write,1,void] PARA[LIT[Stirng]] +++$+++  OP[assign] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.lang.String,endsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART PARENTHESESEND OP[bitwiseOr] OP[bitwiseOr]
CALL[java.lang.String,startsWith,1,boolean] PARA[LIT[Stirng]] +++$+++  OP[assign] EOL IF PARENTHESESSTART
CALL[java.lang.String,getBytes,1,byte[]] PARA[LIT[Stirng]] +++$+++  TRY CURLYSTART VAR[BYTE] OP[assign]
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[CALL[null,format]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,indexOf,1,int] PARA[LIT[Character]] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,length,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.List,add,1,boolean] PARA[CALL[java.lang.StringBuilder,toString]] +++$+++  PARENTHESESSTART PARENTHESESEND EOL CURLYEND
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[VAR[CHAR]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.Class,hashCode,0,int] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.Iterator,hasNext,0,boolean] +++$+++  LEX[result.iterator] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Iterator,next,0,E] +++$+++  FINAL TYPE[Object] VAR[java.lang.Object] OP[assign]
CALL[java.util.concurrent.ConcurrentHashMap,put,2,V] PARA[VAR[org.geoserver.monitor.PipeliningTaskQueue.K]] PARA[VAR[java.util.Queue]] +++$+++  TYPE[ConcurrentLinkedQueue] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.concurrent.ExecutorService,shutdown,0,void] +++$+++  LEX[executor.shutdown] PARENTHESESSTART PARENTHESESEND EOL
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  TYPE[Double] OP[greaterThan] VAR[java.util.List] OP[assign]
CALL[java.awt.geom.AffineTransform,getScaleX,0,double] +++$+++  OP[sum] OP[sum] LEX[Double.toString] PARENTHESESSTART
CALL[java.awt.geom.AffineTransform,getShearX,0,double] +++$+++  OP[sum] OP[sum] LEX[Double.toString] PARENTHESESSTART
CALL[java.awt.geom.AffineTransform,getShearY,0,double] +++$+++  OP[sum] OP[sum] LEX[Double.toString] PARENTHESESSTART
CALL[java.awt.geom.AffineTransform,getScaleY,0,double] +++$+++  OP[sum] OP[sum] LEX[Double.toString] PARENTHESESSTART
CALL[java.lang.String,equalsIgnoreCase,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.String,split,1,java.lang.String[]] PARA[VAR[java.lang.String]] +++$+++  ARRAYSTART ARRAYEND VAR[java.lang.String] OP[assign]
CALL[java.util.Map,get,1,V] PARA[LIT[Stirng]] +++$+++  OP[lessThan] TYPE[String] OP[greaterThan] PARENTHESESEND
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  PARENTHESESEND EOL CURLYEND RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[java.lang.String]] +++$+++  PARENTHESESSTART VAR[INT] PARENTHESESEND EOL
CALL[java.lang.Throwable,getLocalizedMessage,0,java.lang.String] +++$+++  CURLYSTART LEX[LOGGER.finer] PARENTHESESSTART OP[sum]
CALL[java.net.URL,getHost,0,java.lang.String] +++$+++  LEX[casUrlPrefix.getProtocol] PARENTHESESSTART PARENTHESESEND COMMA
CALL[java.net.HttpURLConnection,getInputStream,0,java.io.InputStream] +++$+++  PARENTHESESSTART NEW TYPE[InputStreamReader] PARENTHESESSTART
CALL[java.net.HttpURLConnection,getHeaderFieldKey,1,java.lang.String] PARA[VAR[INT]] +++$+++  CURLYSTART TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.net.HttpURLConnection,getHeaderField,1,java.lang.String] PARA[VAR[INT]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.util.Set,isEmpty,0,boolean] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,compareTo,1,int] PARA[VAR[java.lang.String]] +++$+++  RETURN EOL ELSE RETURN
CALL[java.lang.String,split,1,java.lang.String[]] PARA[LIT[Stirng]] +++$+++  OP[greaterThan] PARENTHESESSTART LEX[Arrays.asList] PARENTHESESSTART
CALL[java.util.Collection,iterator,0,java.util.Iterator<E>] +++$+++  TYPE[String] OP[greaterThan] VAR[java.util.Iterator] OP[assign]
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  CURLYEND ELSE IF PARENTHESESSTART
CALL[java.lang.String,equals,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.Map,containsKey,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.String,substring,1,java.lang.String] PARA[LIT[Integer]] +++$+++  PARENTHESESEND CURLYSTART VAR[java.lang.String] OP[assign]
CALL[java.net.URLConnection,getInputStream,0,java.io.InputStream] +++$+++  CURLYEND ELSE CURLYSTART RETURN
CALL[java.util.HashMap,put,2,V] PARA[VAR[java.lang.String]] PARA[VAR[java.lang.String]] +++$+++  EOL CURLYEND ELSE CURLYSTART
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.lang.String,contains,1,boolean] PARA[LIT[Stirng]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.lang.Integer,equals,1,boolean] PARA[CALL[org.geoserver.catalog.ProjectionPolicy,getCode]] +++$+++  PARENTHESESEND CURLYSTART IF PARENTHESESSTART
CALL[java.util.Map,entrySet,0,java.util.Set<java.util.Map.Entry<K, V>>] +++$+++  PARENTHESESSTART PARENTHESESEND CURLYSTART RETURN
CALL[java.util.List,add,1,boolean] PARA[VAR[org.geoserver.catalog.ResourcePool.Listener]] +++$+++  LEX[Listener] VAR[org.geoserver.catalog.ResourcePool.Listener] PARENTHESESEND CURLYSTART
CALL[java.lang.StringBuilder,append,1,java.lang.StringBuilder] PARA[LIT[Character]] +++$+++  OP[greaterThan] OP[assign] PARENTHESESEND CURLYSTART
CALL[java.io.BufferedOutputStream,flush,0,void] +++$+++  COMMA VAR[java.io.BufferedOutputStream] PARENTHESESEND EOL
CALL[java.io.BufferedInputStream,mark,1,void] PARA[LIT[Integer]] +++$+++  PARENTHESESSTART VAR[java.io.InputStream] PARENTHESESEND EOL
CALL[java.lang.StringBuffer,append,1,java.lang.StringBuffer] PARA[LIT[Stirng]] +++$+++  PARENTHESESSTART VAR[java.lang.String] PARENTHESESEND EOL
CALL[java.nio.ByteBuffer,limit,0,int] +++$+++  OP[assign] NEW BYTE ARRAYSTART
CALL[java.nio.ByteBuffer,get,1,java.nio.ByteBuffer] PARA[VAR[BYTE]] +++$+++  PARENTHESESSTART PARENTHESESEND ARRAYEND EOL
CALL[java.security.SecureRandom,nextInt,0,int] +++$+++  CURLYSTART INT VAR[INT] OP[assign]
CALL[java.lang.String,hashCode,0,int] +++$+++  NULL PARENTHESESEND OP[ternaryTrue] OP[ternaryFalse]
CALL[java.util.regex.Matcher,matches,0,boolean] +++$+++  PARENTHESESEND EOL IF PARENTHESESSTART
CALL[java.util.List,size,0,int] +++$+++  OP[assign] EOL VAR[INT] OP[lessThan]
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  RETURN PARENTHESESSTART TYPE[NameSpaceTranslator] PARENTHESESEND
CALL[java.util.Map,get,1,V] PARA[VAR[java.lang.String]] +++$+++  EOL TYPE[String] VAR[java.lang.String] OP[assign]
CALL[java.lang.StringBuilder,toString,0,java.lang.String] +++$+++  EOL CURLYEND CURLYEND RETURN
